<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>前端方面性能优化</title>
    <url>/%E5%89%8D%E7%AB%AF%E6%96%B9%E9%9D%A2%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="首屏懒加载：在鼠标滑动时加载相应内容"><a href="#首屏懒加载：在鼠标滑动时加载相应内容" class="headerlink" title="首屏懒加载：在鼠标滑动时加载相应内容"></a>首屏懒加载：在鼠标滑动时加载相应内容</h2><h2 id="vue-router路由懒加载：在进入相应的页面时才加载相应的页面模块"><a href="#vue-router路由懒加载：在进入相应的页面时才加载相应的页面模块" class="headerlink" title="vue-router路由懒加载：在进入相应的页面时才加载相应的页面模块"></a>vue-router路由懒加载：在进入相应的页面时才加载相应的页面模块</h2><p>当访问到当前页面才会加载相关的资源。当点击对应路由时才加载对应的页面，而不是一开始就将路由文件中的所以页面都加载出来。通过import方法实现路由懒加载或者vue异步组件实现。</p>
<p>在router.js中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: &apos;/upload&apos;,</span><br><span class="line">        name: upload,</span><br><span class="line"></span><br><span class="line">        // 方法一：import方式实现</span><br><span class="line">        component: () =&gt; import(&apos;upload页面路径&apos;)  // 通过import方法实现路由懒加载</span><br><span class="line"></span><br><span class="line">        // 方法二：vue异步组件实现</span><br><span class="line">        component: resolve =&gt; (require([&apos;@/upload页面路径&apos;], resolve))</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="组件懒加载"><a href="#组件懒加载" class="headerlink" title="组件懒加载"></a>组件懒加载</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;hello&quot;&gt;</span><br><span class="line">    &lt;hello-world&gt;&lt;/hello-world&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line"></span><br><span class="line">            // 方法一：import方式实现</span><br><span class="line">            &apos;HelloWorld&apos;: () =&gt; import(&apos;./HelloWorld&apos;),</span><br><span class="line"></span><br><span class="line">            // 方法二：vue异步组件实现</span><br><span class="line">            &apos;HelloWorld&apos;: resolve =&gt; ([&apos;./HelloWorld&apos;], resolve)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>ES6 重读</title>
    <url>/ES6-%E9%87%8D%E8%AF%BB/</url>
    <content><![CDATA[<h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>let 是 ES6 中新增的，它和 ES5 中的 var 的区别如下：</p>
<ul>
<li><p>不属于顶层对象window</p>
</li>
<li><p>不允许重复声明</p>
</li>
<li><p>不存在<code>变量提升</code>(先声明再使用)</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let a = 0</span><br><span class="line">console.log(a)  // 这样就是先声明再使用</span><br><span class="line"></span><br><span class="line">console.log(a)  // a is not defined，这样先使用再声明就是变量提升了会报错</span><br><span class="line">let a = 0</span><br></pre></td></tr></table></figure>
</li>
<li><p>暂时性死区（在封闭的作用域中，先使用再声明）</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function foo(a=b,b=2) &#123;</span><br><span class="line">    console.log(a)</span><br><span class="line">&#125;</span><br><span class="line">foo()  // 这样也会造成暂时性死区，因为a=b时，b还没有赋值，相当于先使用再声明</span><br></pre></td></tr></table></figure>
</li>
<li><p>块级作用域</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for( let i = 0; i &lt; 3; i++ ) &#123;</span><br><span class="line">    console.log(i)  // 0,1,2  i只能在这个作用域中访问</span><br><span class="line">&#125;</span><br><span class="line">console.log(i)  // 会报错。 因为使用了let 在循环作用域结束后i就被销毁了</span><br></pre></td></tr></table></figure>

<blockquote>
<p>es5中没有块级作用域，只有<code>全局作用域</code>和<code>函数作用域</code></p>
</blockquote>
</li>
</ul>
<p>面试题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(var i = 0; i &lt; 3; i ++) &#123;</span><br><span class="line">    setTimeout(function()&#123;</span><br><span class="line">        console.log(i)  // 3,3,3</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为setTimeout是一个异步操作，而for是同步操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(var i = 0; i &lt; 3; i ++) &#123;</span><br><span class="line">    (function(j)&#123;</span><br><span class="line">        setTimeout(function()&#123;</span><br><span class="line">            console.log(i)  // 0,1,2</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为立即执行函数（闭包）接收i的参数，并且又是立即执行函数。</p>
<h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>const 是 ES6 中新增的一个常量。</p>
<p>在ES5中的实现方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object.defineProperty(window,&apos;PI&apos;,&#123;</span><br><span class="line">    value: 3.14,</span><br><span class="line">    writable: false</span><br><span class="line">&#125;)</span><br><span class="line">PI = 6</span><br><span class="line">console.log(PI) // 不能被改变  还是3.14</span><br></pre></td></tr></table></figure>

<p>const 不能改变指的是：内存地址不改动。对于栈内存来说基本类型下保存的是值，引用类型保存的是引用地址(不变的是这个)，但实际引用地址中的值在堆内存中这个是可以变的。如下图：</p>
<p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/ES6%E9%87%8D%E8%AF%BB/WechatIMG1.png" alt="cmd-markdown-logo"></p>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const obj = &#123;</span><br><span class="line">    name: &apos;lzzhy&apos;,</span><br><span class="line">    age: 18</span><br><span class="line">&#125;</span><br><span class="line">obj.sex = &apos;male&apos;</span><br><span class="line">console.log(obj)  // &#123;name: &apos;lzzhy&apos;,age: 18,sex: &apos;male&apos;&#125;</span><br></pre></td></tr></table></figure>

<p>特性（跟let一样）：</p>
<ul>
<li>不属于顶层对象window</li>
<li>不允许重复声明</li>
<li>不存在<code>变量提升</code>(先声明再使用)</li>
<li>暂时性死区（在封闭的作用域中，先使用再声明）</li>
<li>块级作用域</li>
</ul>
<h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><ul>
<li><p>按照<code>一定模式</code>(解构赋值：简单来说就是‘=’两边的<code>模式结构匹配</code>)，从数组和变量之类的之中提取值，对变量进行赋值</p>
</li>
<li><p>数组解构</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let [a,b,[c,d]] = [1,2,[3,4]]  //  &apos;=&apos;两边结构是一样的</span><br></pre></td></tr></table></figure>
</li>
<li><p>对象解构</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let girl = &#123;</span><br><span class="line">    name: &apos;lzzhy&apos;,</span><br><span class="line">    age: 18</span><br><span class="line">&#125;</span><br><span class="line">let &#123;name: uname, age: uage&#125; = girl  // 别名在‘:’后面那个</span><br><span class="line">const (uname, uage)  // 这样获取的意思&apos;lzzhy&apos;,18</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串解构</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arr = &apos;lzzhy&apos;</span><br><span class="line">let [a,b,c,d,e] = arr</span><br><span class="line">console.log(a,b,c,d,e)  // l z z h y</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>应用</p>
<p>传参时：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function foo(&#123;name,age,sex: &apos;male&apos;&#125;) &#123;</span><br><span class="line">    console.log(name,age,sex)  </span><br><span class="line">&#125;</span><br><span class="line">let obj = &#123;</span><br><span class="line">    name: &apos;lzzhy&apos;,</span><br><span class="line">    age: 18</span><br><span class="line">&#125;</span><br><span class="line">foo(obj)  //lzzhy,18,male</span><br></pre></td></tr></table></figure>

<p>取值时：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function foo()&#123;</span><br><span class="line">let obj = &#123;</span><br><span class="line">        name: &apos;lzzhy&apos;,</span><br><span class="line">        age: 18</span><br><span class="line">    &#125; </span><br><span class="line">    return obj</span><br><span class="line">&#125;</span><br><span class="line">let &#123;name, age: uage&#125; = obj  // lzzhy,18</span><br></pre></td></tr></table></figure>

<p>获取json串时：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let ujson = &apos;&#123;&quot;a&quot;: &quot;lzzhy&quot;,&quot;b&quot;: &quot;dance&quot;&#125;&apos;</span><br><span class="line">let &#123;a,b&#125; = JSON.parse(ujson)</span><br><span class="line">console.log(a,b)  // lzzhy,dance</span><br></pre></td></tr></table></figure>

<h2 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h2><p>reduce实现数组去重：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arr = [1,2,3,4,3]</span><br><span class="line">let res = arr.reduce(function(prev,cur) &#123;</span><br><span class="line">    prev.indexOf(cur) == -1 &amp;&amp; prev.push(cur)</span><br><span class="line">    return prev</span><br><span class="line">&#125;,[])</span><br><span class="line">console.log(res)</span><br></pre></td></tr></table></figure>

<p>类数组/伪数组：不是真正意义上的数组。具有length,但是不具有数组的方法</p>
<p>类数组/伪数组转化为真正的数组：</p>
<p>ES5：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array.prototype.slice.call(伪数组)  // 转换成真正的数组</span><br></pre></td></tr></table></figure>

<p>ES6：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array.from(伪数组)</span><br></pre></td></tr></table></figure>

<h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><ul>
<li><p>参数的默认值</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function foo(x,y=&apos;world&apos;) &#123;</span><br><span class="line">    console.log(x,y)</span><br><span class="line">&#125;</span><br><span class="line">foo(&apos;hello&apos;, 0)  // hello,0</span><br><span class="line">foo(&apos;hello&apos;)  // hello,world</span><br></pre></td></tr></table></figure>
</li>
<li><p>与解构赋值结合</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function ajax(url,&#123;</span><br><span class="line">    body= &apos;&apos;,</span><br><span class="line">    method=&apos;GET&apos;,</span><br><span class="line">    headers=&#123;&#125;</span><br><span class="line">&#125; = &#123;&#125;) &#123;</span><br><span class="line">    console.log(method)</span><br><span class="line">&#125;</span><br><span class="line">ajax(&apos;baidu.com&apos;)  //  GET</span><br><span class="line">ajax(&apos;baidu.com&apos;,&#123;method=&apos;POST&apos;&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>length属性(可以获取没有默认值的参数的个数)</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function foo(x,y,z=1) &#123;</span><br><span class="line">    console.log(x,y)</span><br><span class="line">&#125;</span><br><span class="line">console.log(foo.length)  // z没有默认值length值为3，有就为2</span><br></pre></td></tr></table></figure>
</li>
<li><p>作用域</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let x =1</span><br><span class="line">function foo(y = x)&#123;</span><br><span class="line">    let x =2;  // 重复定义不报错，因为不在同一个作用域</span><br><span class="line">    console.log(y)</span><br><span class="line">&#125;</span><br><span class="line">foo()  // 1</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="扩展运算符和res参数"><a href="#扩展运算符和res参数" class="headerlink" title="扩展运算符和res参数"></a>扩展运算符和res参数</h2><p>扩展运算符 …：把数组或者类数组之类的展开成用逗号隔开的值（在等号的右边或者实参上）。</p>
<pre><code>let arr1 = [1,2,3]
let arr2 = [8,9,7]
let a = [...arr1, ...arr2]  // [1, 2, 3, 8, 9, 7] 数组合并</code></pre><p>res参数：把逗号隔开的值组合成一个数组（在等号的左边或者形参上）。</p>
<pre><code>function foo(x, ...args) {
    console.log(x)  // 1
    console.log(args)  // [2, 3, 4, 5]
}
foo(1,2,3,4,5)</code></pre><p>形参：是封装好的函数的参数；实参：是调用该函数时传的参数；</p>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><ul>
<li><p>this指向定义时所在的对象，而不是调用时所在的对象(箭头函数本身其实并不存在this，只是用了在外一层的this)</p>
</li>
<li><p>不可以当做构造函数(因为受eval影响)</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let People = (name, age) =&gt; &#123;</span><br><span class="line">    this.name = name </span><br><span class="line">    this.age = age</span><br><span class="line">&#125;</span><br><span class="line">let p1 = new People(&apos;lzzhy&apos;,18)  // People is not a constructor</span><br></pre></td></tr></table></figure>
</li>
<li><p>不可以使用arguments对象(因为受eval影响)</p>
</li>
</ul>
<h2 id="对象的扩展"><a href="#对象的扩展" class="headerlink" title="对象的扩展"></a>对象的扩展</h2><ul>
<li><p>Object.is()：类似===</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object.is(NaN,NaN)  // true</span><br></pre></td></tr></table></figure>
</li>
<li><p>扩展运算符与Object.assign()（合并对象）</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let x =&#123;</span><br><span class="line">    a: 3,</span><br><span class="line">    b:5</span><br><span class="line">&#125;</span><br><span class="line">let y = &#123;b:6&#125;</span><br><span class="line">Object.assign(x,y)  // &#123;a: 3, b: 6&#125;  有相同的值的话会被后面的对象覆盖</span><br></pre></td></tr></table></figure>
</li>
<li><p>对象的遍历方式</p>
<p>  初始代码：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let obj = &#123;</span><br><span class="line">    name: &apos;lzzhy&apos;,</span><br><span class="line">    age: 18,</span><br><span class="line">    sex: &apos;male&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  Object.keys：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object.keys(obj).forEach(key =&gt; &#123;</span><br><span class="line">    console.log(key,obj[key])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>  Object.getOwnPropertyNames：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object.getOwnPropertyNames(obj).forEach(key =&gt; &#123;</span><br><span class="line">    console.log(key,obj[key])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>  Reflect.ownKeys：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Reflect.ownKeys(obj).forEach(key =&gt; &#123;</span><br><span class="line">    console.log(key,obj[key])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="类与继承"><a href="#类与继承" class="headerlink" title="类与继承"></a>类与继承</h2><p>实例属性，静态属性以及静态方法的区别：</p>
<p>es5中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function People(name, age) &#123;</span><br><span class="line">    &lt;!--names和ages是实例属性：和实例化对象有关的 --&gt;</span><br><span class="line">    this.names = name</span><br><span class="line">    this.ages = age</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 静态属性：跟实例化对象无关的属性 --&gt;</span><br><span class="line">People.count = 0</span><br><span class="line">console.log(People.count)</span><br><span class="line"></span><br><span class="line">&lt;!-- 静态方法：跟实例化方法无关 --&gt;</span><br><span class="line">Math.max()</span><br><span class="line"></span><br><span class="line">&lt;!-- 实例方法：和实例原型上的方法 --&gt;</span><br><span class="line">People.prototype.shouName = function() &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>es6是通过static在类中实现静态方法的。</p>
<h2 id="Set-一种新的数据结构"><a href="#Set-一种新的数据结构" class="headerlink" title="Set 一种新的数据结构"></a>Set 一种新的数据结构</h2><p>Set：一种新的数据结构，类似于数组，也可用于遍历。</p>
<ul>
<li><p>常见应用场景</p>
<p>  数组去重：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let s = new Set([1,2,3,4,1,3])  // Set(4) &#123;1, 2, 3, 4&#125;</span><br></pre></td></tr></table></figure>

<p>  数组合并去重（交集）：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arr1 = [1,2,3,4,5]</span><br><span class="line">let arr2 = [1,3,6,5,8] </span><br><span class="line">let arr3 = new Set([...arr1, ...arr2]</span><br><span class="line">console.log(Array.from(arr3))  // [1, 2, 3, 4, 5, 6, 8]</span><br></pre></td></tr></table></figure>

<p>  筛选数组差集：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arr1 = [1,2,3,4]</span><br><span class="line">let arr2 = [2,3,4,5,6,7]</span><br><span class="line">let s1 = new Set(arr1)</span><br><span class="line">let s2 = new Set(arr2)</span><br><span class="line">let arr3 = new Set(arr1.filter(item =&gt; !s2.has(item)))  // Set(1) &#123;1&#125; </span><br><span class="line">let arr4 = new Set(arr2.filter(item =&gt; !s1.has(item)))  // Set(3) &#123;5, 6, 7&#125;</span><br><span class="line"></span><br><span class="line">[...arr3, ...arr4]  // [1,5,6,7]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Proxy代理"><a href="#Proxy代理" class="headerlink" title="Proxy代理"></a>Proxy代理</h2><ul>
<li>代理：对于当前的一些对象或者方法或者其他操作先代理过来，在用相对应的拦截方法去处理各种各样的操作。</li>
<li>常用拦截方法</li>
</ul>
<p>ES5 中可以通过 Object.definePropert 对对象的属性进行拦截；其中第一个参数是拦截对象本身，第二个参数是对于哪个属性进行拦截，第三个参数可以是对应的方法。如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let obj = &#123;&#125;</span><br><span class="line">let newVal = &apos;&apos;</span><br><span class="line">Object.defineProperty(obj, &apos;name&apos;, &#123;  // Object.definePropert 是ES5中的拦截的api。分别对应的三个参数</span><br><span class="line">    get() &#123;</span><br><span class="line">        console.log(&apos;get&apos;)</span><br><span class="line">        return newVal</span><br><span class="line">    &#125;,</span><br><span class="line">    set(val) &#123;</span><br><span class="line">        console.log(&apos;set&apos;)</span><br><span class="line">        newVal = val</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(obj.name)  // get</span><br><span class="line"></span><br><span class="line">obj.name = &apos;es&apos;  // 会调用set方法</span><br><span class="line">console.log(obj.name)  // es</span><br></pre></td></tr></table></figure>

<p>ES6 通过 Proxy（第一个参数是：需要拦截的对象或者是方法，第二个参数是代理的钩子函数）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let obj = &#123;&#125;</span><br><span class="line">let p = new Proxy(obj, &#123;&#125;)</span><br><span class="line">p.name = &apos;lzzhy&apos;</span><br><span class="line">console.log(obj.name)  // lzzhy</span><br></pre></td></tr></table></figure>

<p>Proxy 常用的拦截方法：</p>
<p>get（拦截对象属性的 读 操作）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arr = [7,8,9]</span><br><span class="line">arr = new Proxy(arr, &#123;</span><br><span class="line">    get(target, prop) &#123; // get钩子函数对应的两个参数：代理的对象，参数值</span><br><span class="line">        console.log(target, prop)</span><br><span class="line">        return prop in target ? target[prop] : &apos;error&apos;  // 判断是否在里面，在的话返回下标对应的值</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(arr[2])  // 9</span><br></pre></td></tr></table></figure>

<p>set（拦截对象属性的设置）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arr = []</span><br><span class="line">arr = new Proxy(arr, &#123;</span><br><span class="line">    set(target, prop, val) &#123;  // set钩子函数对应的三个参数：目标对象、目标属性的值、需设置的值</span><br><span class="line">        if(typeof val === &apos;number&apos;) &#123;</span><br><span class="line">            target[prop] = val</span><br><span class="line">            return true</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">arr.push(9)</span><br><span class="line">console.log(arr[0])  // 9</span><br></pre></td></tr></table></figure>

<p>has（拦截proxyKey in proxy的操作）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let range = &#123;</span><br><span class="line">    start: 1,</span><br><span class="line">    end: 5</span><br><span class="line">&#125;</span><br><span class="line">range = new Proxy(range, &#123;</span><br><span class="line">    has(target, prop) &#123;</span><br><span class="line">        return prop &lt;= target.start &amp;&amp; prop &lt;= target.end</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(1 in range)  // true</span><br><span class="line">console.log(9 in range)  // false</span><br></pre></td></tr></table></figure>

<p>ownKeys（用于对象循环遍历进行拦截）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let userinfo = &#123;</span><br><span class="line">    username: &apos;lzzhy&apos;,</span><br><span class="line">    age: 18,</span><br><span class="line">    _password: &apos;***&apos;</span><br><span class="line">&#125;</span><br><span class="line">userinfo = new Proxy(userinfo, &#123;</span><br><span class="line">    ownKeys(target) &#123;</span><br><span class="line">        return Object.keys(target).filter(key =&gt; !key.startsWith(&apos;_&apos;))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">for(let key in userinfo) &#123;</span><br><span class="line">    console.log(key)  // username,age</span><br><span class="line">&#125;</span><br><span class="line">console.log(Object.keys(userinfo))  // [&quot;username&quot;, &quot;age&quot;]</span><br></pre></td></tr></table></figure>

<p>apply（用于拦截函数调用以及apply,call的操作）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let sum = (...args) =&gt; &#123;</span><br><span class="line">    let num = 0</span><br><span class="line">    args.forEach(item =&gt; &#123;</span><br><span class="line">        num += item</span><br><span class="line">    &#125;)</span><br><span class="line">    return num </span><br><span class="line">&#125;</span><br><span class="line">sum = new Proxy(sum, &#123;</span><br><span class="line">    apply(target, ctx, args) &#123;  // apply对应的三个参数：拦截的目标，当前上下文，目标对象参数数组</span><br><span class="line">        return target(...args) * 2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(sum(8,2))  // 20</span><br><span class="line">console.log(sum.call(null,1,2,3))  // 12</span><br><span class="line">console.log(sum.apply(null,[1,2,3]))  // 12</span><br></pre></td></tr></table></figure>

<p>construct（用于拦截new命令，返回一个对象）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let User = class &#123;</span><br><span class="line">    constructor(name) &#123;</span><br><span class="line">        this.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">User = new Proxy(User, &#123;</span><br><span class="line">    construct(target, args, newTarget) &#123;  // 三个参数：目标对象，构造函数的参数列表，new作用的函数</span><br><span class="line">        return new target(...args)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(new User(&apos;lzzhy&apos;))  // User &#123;name: &quot;lzzhy&quot;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Reflect-反射"><a href="#Reflect-反射" class="headerlink" title="Reflect 反射"></a>Reflect 反射</h2><ul>
<li><p>将Object属于语言内部的方法放到Reflect上</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 这段代码是es5中实现代理的方法，由于现在Reflect会将Object属于语言内部的方法放到Reflect上，因此可以直接将Object换成Reflect  --&gt;</span><br><span class="line"></span><br><span class="line">let obj = &#123;&#125;</span><br><span class="line">let newVal = &apos;&apos;</span><br><span class="line">Reflect.defineProperty(obj, &apos;name&apos;, &#123;  // 直接将Object换成Reflect </span><br><span class="line">    get() &#123;</span><br><span class="line">        console.log(&apos;get&apos;)</span><br><span class="line">        return newVal</span><br><span class="line">    &#125;,</span><br><span class="line">    set(val) &#123;</span><br><span class="line">        console.log(&apos;set&apos;)</span><br><span class="line">        newVal = val</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(obj.name)  // get</span><br><span class="line"></span><br><span class="line">obj.name = &apos;es&apos;  // 会调用set方法</span><br><span class="line">console.log(obj.name)  // es</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改某些Object方法的返回结果，让其变得合理</p>
</li>
<li><p>让Object操作变成函数行为</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- Object的写法 --&gt;</span><br><span class="line">console.log(&apos;assign&apos; in Object)  // true</span><br><span class="line"></span><br><span class="line">&lt;!-- Reflect的写法 --&gt;</span><br><span class="line">console.log(Reflect.has(Object, &apos;assign&apos;))</span><br></pre></td></tr></table></figure>
</li>
<li><p>Reflect对象的方法与Proxy对象的方法一一对应（Proxy拦截器的名称是啥改成对应的Reflect.拦截器名称就行）。如：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arr = []</span><br><span class="line">arr = new Proxy(arr, &#123;</span><br><span class="line">    set(target, prop, val) &#123;</span><br><span class="line">        if(typeof val === &apos;number&apos;) &#123;</span><br><span class="line">            &lt;!-- Proxy的写法</span><br><span class="line"></span><br><span class="line">            target[prop] = val --&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- Reflect的写法</span><br><span class="line"></span><br><span class="line">            Reflect.set(target,prop,val) --&gt;</span><br><span class="line"></span><br><span class="line">            return true</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">arr.push(9)</span><br><span class="line">console.log(arr[0])  // 9</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="异步操作前置知识"><a href="#异步操作前置知识" class="headerlink" title="异步操作前置知识"></a>异步操作前置知识</h2><p>异步操作前置知识：</p>
<ul>
<li><p>JS是单线程的：同一个时间内只能处理一个任务。</p>
</li>
<li><p>同步任务与异步任务</p>
<p>  <img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/ES6%E9%87%8D%E8%AF%BB/WechatIMG2.png" alt="cmd-markdown-logo"></p>
<p>  这张图展示了JS单线程的执行过程：JS会从上往下执行，当碰到同步任务时会立即执行，碰到异步任务时会先将该异步操作存放在任务队列中（如：即使setTimeout中为0时也算异步），在往下继续执行同步任务。当主线程上的同步任务都结束后，才会去读取任务队列中的异步操作。</p>
<p>  如下的同步任务和异步任务：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(1)</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(2)  </span><br><span class="line">&#125;, 0)  // 在JS底层中最短时间是4ms,因此这里写0并不是真的代表0ms</span><br><span class="line">console.log(3)</span><br><span class="line"></span><br><span class="line">&lt;!-- 在setTimeout或其他异步中，后面的时间（假设写的是2000）也不一定就是2000之后就执行了。根据上面这张图setTimeout异步任务会在2000之后进入 Event Queue 任务队列中。而setTimeout异步操作是否执行还需要取决于主线程中同步任务是否结束并且异步操作时间达到这个2000已经在任务队列中等待 --&gt;</span><br></pre></td></tr></table></figure>

<p>  以上执行结果为 1 3 2。因为在console.log 1,2,3中，JS会按照上下文先后顺序执行，但是由于setTimeout表示异步，因此会先执行完同步主线程上的操作也就是console.log 1,3，当同步任务主线程完成后才会执行异步队列中的操作</p>
</li>
<li><p>Ajax（叫做异步的javascript的XML）原理：</p>
<p>  原生的原理：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 1.创建XMLHttpRequest对象 --&gt;</span><br><span class="line">var url = &apos;接口地址&apos;</span><br><span class="line">var xmlhttp</span><br><span class="line">if(window.XMLHttpRequest) &#123;  // 兼容问题 ie7之后的版本</span><br><span class="line">    xmlhttp = new XMLHttpRequest()</span><br><span class="line">&#125; else &#123;  // 兼容早期浏览器</span><br><span class="line">    xmlhttp = new ActiveXOBject(&apos;Microsoft XMLHTTP&apos;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 2.发送请求 --&gt;</span><br><span class="line">xmlhttp.open(&apos;GET&apos;, url, true)</span><br><span class="line">xmlhttp.send()</span><br><span class="line">&lt;!-- 3.接收服务端响应 --&gt;</span><br><span class="line">xmlhttp.onreadystatechange = function()&#123;</span><br><span class="line">    if(xmlhttp.readState === 4 &amp;&amp; xmlhttp.status === 4) &#123;</span><br><span class="line">        var obj = JSON.parse(xmlhttp.responseText)</span><br><span class="line">        console.log(obj)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  封装后的Ajax：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function ajax(url, successCallback, failCallback) &#123;</span><br><span class="line">    var xmlhttp</span><br><span class="line">    if(window.XMLHttpRequest) &#123;</span><br><span class="line">        xmlhttp = new XMLHttpRequest()</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        xmlhttp = new ActiveXOBject(&apos;Microsoft XMLHTTP&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;!-- 2.发送请求 --&gt;</span><br><span class="line">    xmlhttp.open(&apos;GET&apos;, url, true)</span><br><span class="line">    xmlhttp.send()</span><br><span class="line">    &lt;!-- 3.接收服务端响应 --&gt;</span><br><span class="line">    xmlhttp.onreadystatechange = function()&#123;</span><br><span class="line">        if(xmlhttp.readState === 4 &amp;&amp; xmlhttp.status === 404) &#123;</span><br><span class="line">            var obj = JSON.parse(xmlhttp.responseText)</span><br><span class="line">            console.log(obj)</span><br><span class="line">            successCallback &amp;&amp; successCallback(obj)</span><br><span class="line">        &#125; else if(xmlhttp.readState === 4 &amp;&amp; xmlhttp.status !== 404) &#123;</span><br><span class="line">            failCallback &amp;&amp; failCallback(xmlhttp.statueText)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var url = &quot;接口地址&quot;</span><br><span class="line">ajax(url, res =&gt; &#123;</span><br><span class="line">    console.log(res)</span><br><span class="line">&#125;, err =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Callback Hell(回调深渊/回调地狱)</p>
<p>  多个异步操作层层嵌套：如 有1，2，3 三个接口，需要执行完1后在执行2在执行3（或者如 省市县选择）：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 在各个回调函数中执行就行了 --&gt;</span><br><span class="line"></span><br><span class="line">ajax(url, res =&gt; &#123;  // 接口1</span><br><span class="line">    ajax(url, res =&gt; &#123;  // 接口2</span><br><span class="line">        ajax(url, res =&gt; &#123;  // 接口3</span><br><span class="line">        </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>  这种写法虽然可以实现需求，可是代码可读性和维护性不行。可以通过Promise来解决，如下一节通过Promise实现省市区。</p>
</li>
</ul>
<h2 id="异步编程解决方案一：-Promise"><a href="#异步编程解决方案一：-Promise" class="headerlink" title="异步编程解决方案一： Promise"></a>异步编程解决方案一： Promise</h2><p>Promise：对异步状态进行管理，解决异步的一些问题。</p>
<h3 id="Promise：上个接口成功后再请求下一个（如实现省市区功能）"><a href="#Promise：上个接口成功后再请求下一个（如实现省市区功能）" class="headerlink" title="Promise：上个接口成功后再请求下一个（如实现省市区功能）"></a>Promise：上个接口成功后再请求下一个（如实现省市区功能）</h3><p>以省市区的异步调用为例，并且把选中的值传递给下一个异步接口请求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Promise((resolve, reject) =&gt; &#123;  // resolve 成功时的回调函数，reject 失败时的回调函数</span><br><span class="line">    ajax(&apos;省接口地址&apos;, res =&gt; &#123;  // ajax是上文中一个封装好的接口请求</span><br><span class="line">        resolve(&apos;我是省 请求成功了&apos;)  // 成功时 选中的值只需要在resolve中作为参数传递就行</span><br><span class="line"></span><br><span class="line">        &lt;!-- reject(&apos;我是省,但是请求失败了&apos;) --&gt;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then((res) =&gt; &#123;  // res是接收上一个异步操作的形参</span><br><span class="line">    console.log(&apos;成功&apos;, res)</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        ajax(&apos;市的接口&apos;, (res) =&gt; &#123;</span><br><span class="line">            resolve()  // 手动调用resolve()，让函数进入到成功里</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, (err) =&gt; &#123;  // 这个可以省略</span><br><span class="line">    console.log(&apos;失败&apos;, err)</span><br><span class="line">&#125;).then((res) =&gt; &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        ajax(&apos;区的接口&apos;, (res) =&gt; &#123;</span><br><span class="line">            resolve() </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(res =&gt; &#123;</span><br><span class="line">    console.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>封装后： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getPromise(url) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        ajax(url, res =&gt; &#123;</span><br><span class="line">            resolve(res)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">getPromise(&apos;省接口地址&apos;).then(res =&gt; &#123;  </span><br><span class="line">    console.log(res)</span><br><span class="line">    return getPromise(&apos;市接口地址&apos;)</span><br><span class="line">&#125;).then(res =&gt; &#123;</span><br><span class="line">    return getPromise(&apos;区接口地址&apos;)</span><br><span class="line">&#125;).then(res =&gt; &#123;</span><br><span class="line">    console.log(res)</span><br><span class="line">&#125;).catch(err =&gt; &#123;  // 这个catch是针对上文ajax封装后failCallback参数做为统一的错误出口进行拦截</span><br><span class="line">    console.log(&apos;对错误统一处理&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这种通过Promise可以更好地对Callback Hell(回调深渊/回调地狱) 进行处理</p>
<p>小注意点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let p = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    console.log(1)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;) </span><br><span class="line">console.log(2)</span><br><span class="line">p.then(() =&gt; &#123;</span><br><span class="line">    console.log(3)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>执行结果是1，2，3。当new Promise是会立即执行。.then相当于是成功时的一个回调函数具有异步性</p>
<h3 id="Promise-all：-实现所有接口都完成后再去执行某个事情（如上传完三张图片后在做某事）"><a href="#Promise-all：-实现所有接口都完成后再去执行某个事情（如上传完三张图片后在做某事）" class="headerlink" title="Promise.all： 实现所有接口都完成后再去执行某个事情（如上传完三张图片后在做某事）"></a>Promise.all： 实现所有接口都完成后再去执行某个事情（如上传完三张图片后在做某事）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const imgArr = [&apos;1.png&apos;,&apos;2.png&apos;,&apos;3.png&apos;]</span><br><span class="line">let promiseArr = []</span><br><span class="line">imgArr.forEach(item =&gt; &#123;</span><br><span class="line">    promiseArr.push(new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        // 图片上传的操作</span><br><span class="line">        resolve(url)  // url是上传3张图片后端返回的地址</span><br><span class="line">    &#125;))</span><br><span class="line">&#125;)</span><br><span class="line">Promise.all(promiseArr).then(res =&gt; &#123;</span><br><span class="line">    console.log(&apos;图片全部上传成功&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="异步编程解决方案二：Async-Await"><a href="#异步编程解决方案二：Async-Await" class="headerlink" title="异步编程解决方案二：Async Await"></a>异步编程解决方案二：Async Await</h2><p>Async Await：相对Promise来说更加的语义化和更加优雅。写法：Async放在function关键字前面，Await放在函数里面，他们需要成对出现。</p>
<p>当使用 Async Await解决异步时，await是等待的意思后面跟着的是异步操作。加上await后相当于这个需要等待异步操作完成后才能执行下一步。如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function timeout() &#123;</span><br><span class="line">    return new Promise(resolve =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            console.log(&apos;1&apos;)</span><br><span class="line">            resolve()</span><br><span class="line">        &#125;, 1000)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">async function foo() &#123;</span><br><span class="line">    await timeout()  // 1，2   await后面接着的是异步操作，加上await后相当于需要等待这个异步操作结束后才会执行下一步</span><br><span class="line">    console.log(&apos;2&apos;)</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>

<p>实例，如 省市区 的解决方案：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import ajax from &apos;./xxx/ajax.js&apos;  // ajax是已经封装好的axios接口组件</span><br><span class="line">function request(url) &#123;</span><br><span class="line">    return new Promise(resolve =&gt; &#123;</span><br><span class="line">        ajax(url, res =&gt; &#123;</span><br><span class="line">            resolve(res)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">async function getData() &#123;</span><br><span class="line">    const res1 = await request(&apos;省url地址&apos;)  // 因为用了async和await所以就会先执行完res1才会执行下一个市接口请求</span><br><span class="line">    console.log(res1)</span><br><span class="line">    const res2 = await request(&apos;市url地址&apos;)</span><br><span class="line">    console.log(res2)</span><br><span class="line">    const res3 = await request(&apos;取url地址&apos;)</span><br><span class="line">    console.log(res3)</span><br><span class="line">&#125;</span><br><span class="line">getData()</span><br></pre></td></tr></table></figure>

<h2 id="异步编程解决方案三：Generator"><a href="#异步编程解决方案三：Generator" class="headerlink" title="异步编程解决方案三：Generator"></a>异步编程解决方案三：Generator</h2><p>特点:</p>
<ul>
<li>有一个 *</li>
<li>里面有关键字 yield</li>
</ul>
<h2 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h2><ul>
<li>是一种接口机制，为各种不同的数据结构提供统一访问机制</li>
<li>主要供for…of消费</li>
<li>一句话：不支持遍历的数据结构”可遍历“</li>
</ul>
<h2 id="模块化-Module"><a href="#模块化-Module" class="headerlink" title="模块化 Module"></a>模块化 Module</h2><h3 id="export-–-import"><a href="#export-–-import" class="headerlink" title="export – import {}"></a>export – import {}</h3><p>导出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const a = &apos;2&apos;</span><br><span class="line">const lzzhy = &#123;</span><br><span class="line">    name: &apos;liting&apos;,</span><br><span class="line">    age: 18</span><br><span class="line">&#125;</span><br><span class="line">export &#123; a, lzzhy &#125;</span><br></pre></td></tr></table></figure>

<p>导入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; a, lzzhy &#125; from &apos;./xx&apos;</span><br></pre></td></tr></table></figure>

<h3 id="export-default-–-import"><a href="#export-default-–-import" class="headerlink" title="export default – import"></a>export default – import</h3><p>导出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">functiom sum(x,y) &#123;</span><br><span class="line">    return x + y</span><br><span class="line">&#125;</span><br><span class="line">export default sum</span><br></pre></td></tr></table></figure>

<p>导入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sum from &apos;./xx&apos;  // sum这个可以自己改其他的名字</span><br></pre></td></tr></table></figure>

<p>第四章结束</p>
<h2 id="es新特性在vue中的应用"><a href="#es新特性在vue中的应用" class="headerlink" title="es新特性在vue中的应用"></a>es新特性在vue中的应用</h2><h3 id="依赖包安装及使用"><a href="#依赖包安装及使用" class="headerlink" title="依赖包安装及使用"></a>依赖包安装及使用</h3><p>在vue-cli脚手架创建的项目中。在package.json里，dependencies里的是生产环境的，安装时要加<code>--save</code>。devDependencies里的是开发环境需要的，安装时要加<code>--save -dev</code>。</p>
<p>当要使用这些包时，需要导出，如：<code>import axios from &#39;axios&#39;</code></p>
<h3 id="es新特性实现组件按需加载"><a href="#es新特性实现组件按需加载" class="headerlink" title="es新特性实现组件按需加载"></a>es新特性实现组件按需加载</h3><h4 id="点击对应路由时加载这个路由的对应页面："><a href="#点击对应路由时加载这个路由的对应页面：" class="headerlink" title="点击对应路由时加载这个路由的对应页面："></a>点击对应路由时加载这个路由的对应页面：</h4><p>在vue项目中，当点击一个按钮进入另一个页面时，这个事件也可以实现按需加载（当点击对应路由时才加载对应的页面，而不是一开始就将路由文件中的所以页面都加载出来）。<br>在router.js中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: &apos;/upload&apos;,</span><br><span class="line">        name: upload,</span><br><span class="line">        component: () =&gt; import(&apos;upload页面路径&apos;)  // 这样写就是实现整个页面的按需加载，只有当点击/upload路由时才会去加载对应的这个页面。</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>websocket，你好吖</title>
    <url>/websocket%EF%BC%8C%E4%BD%A0%E5%A5%BD%E5%90%96/</url>
    <content><![CDATA[<p>初次接触 WebSocket 的人，都会问同样的问题：我们已经有了 HTTP 协议，为什么还需要另一个协议？它能带来什么好处？</p>
<p>首先对于<br>HTTP:</p>
<ul>
<li>无法监听连续性的变化</li>
<li>效率低下</li>
<li>浪费资源</li>
</ul>
<p>WebSocket：是一种网络传输协议，可在单个 TCP 连接上进行全双工通信，位于 OSI 模型的应用层。</p>
<ul>
<li>TCP连接，与 HTTP 协议兼容</li>
<li>双向通信，主动推送（服务端向客户端）</li>
<li>节省服务器资源和带宽</li>
<li>实时通信</li>
<li>无同源限制，协议标识符是ws（加密wss）</li>
</ul>
<p>应用场景：</p>
<ul>
<li>聊天，消息，点赞</li>
<li>直播评论（弹幕）</li>
<li>游戏，协同编辑，基于位置的应用</li>
</ul>
<p>websocket 在前端来说主要有 open、close、error、message几个事件</p>
<h2 id="创建聊天室"><a href="#创建聊天室" class="headerlink" title="创建聊天室"></a>创建聊天室</h2><p>创建连接：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;websocket-page&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; placeholder=&quot;请输入消息&quot; v-model=&quot;msg&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            msg: &apos;&apos;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        const socket = new WebSocket(&apos;ws://localhost:8080&apos;);  // ws可以改成wss意思为加密（跟http和https一个意思）</span><br><span class="line"></span><br><span class="line">        &lt;!-- 通过 addEventListener 监听绑定事件： --&gt;</span><br><span class="line">        ws.addEventListener(&apos;open&apos;, this.handleOpen.bind(this), false)  // 通过bind改变this的指向</span><br><span class="line">        ws.addEventListener(&apos;close&apos;, this.handleClose.bind(this), false)</span><br><span class="line">        ws.addEventListener(&apos;error&apos;, this.handleError.bind(this), false)</span><br><span class="line">        ws.addEventListener(&apos;message&apos;, this.handleMessage.bind(this), false)</span><br><span class="line">    &#125;</span><br><span class="line">    methods() &#123;</span><br><span class="line">        handleOpen() &#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        handleClose() &#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        handleError() &#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        handleMessage() &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>项目中：（Normandy-web: menuDetail父组件，chatRoom聊天室组件）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enterRoom(wssurl) &#123;</span><br><span class="line">    if(!wssurl) return</span><br><span class="line">    let self = this;</span><br><span class="line">    this.wsLink = new WebSocket(wssurl);</span><br><span class="line">    this.wsLink.onopen = function(evt) &#123;</span><br><span class="line">        self.socketStatus = true;				</span><br><span class="line">		self.getChatMsgList();</span><br><span class="line">		self.heartbeatFun = setInterval(self.heartbeat, 10000)</span><br><span class="line">	&#125;;</span><br><span class="line">	this.wsLink.onmessage = function(evt) &#123;</span><br><span class="line">        let res = JSON.parse(evt.data);</span><br><span class="line">        if (res.event === &quot;BROADCAST_MESSAGE&quot;) &#123;</span><br><span class="line">            self.uploadMsgList(res.data);</span><br><span class="line">            if(res.data.messageResource === &apos;CASE_CIRCULATION_AUTO_INPUT&apos; &amp;&amp; res.data.sender &amp;&amp; res.data.sender.memberName !== &apos;&apos;)&#123;</span><br><span class="line">				self.reserveVideo = res.data</span><br><span class="line">				self.reserveVideo.messageContent = JSON.parse(self.reserveVideo.messageContent)</span><br><span class="line">                self.joinVideoFlag = true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (res.event === &quot;LIST_MESSAGE&quot;) &#123;</span><br><span class="line">            self.getListMessage(res.data)</span><br><span class="line">        &#125; else if (res.event === &quot;ROOM&quot;) &#123;</span><br><span class="line">            self.initRoomConfig(res.data)</span><br><span class="line">            self.chatRoomMember = res.data.members</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket" target="_blank" rel="noopener">《webSocket官方文档》</a></p>
]]></content>
  </entry>
  <entry>
    <title>Vue 项目搭建</title>
    <url>/Vue-%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>在拿到一个新项目时，一般来说我们可以直接通过vue-cli脚手架生成一个项目结构就可以开始写业务代码了。但是往往出于对团队的协作能力以及后期的维护等等这些原因考虑我们会选择对一些常用的进行封装或者说全局配置，比如会对axios进行统一的接口封装（当然其中又会涉及很多其他的点，如：不同环境域名配置，请求头配置，接口状态封装，页面import引入封装。。。）</p>
<p>项目搭建中，一般还会对以下几个部分进行处理：</p>
<ul>
<li>通过<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create" target="_blank" rel="noopener">vue-cli</a>创建并初始化项目</li>
<li>封装<a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios</a>接口（包括不同环境域名配置，请求头配置，接口状态封装，页面import引入封装）</li>
<li>引入组件库（我这里用的是<a href="https://element.eleme.cn/#/zh-CN/component/installation" target="_blank" rel="noopener">element-ui</a>，包括设置全局色值） </li>
<li><a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html" target="_blank" rel="noopener">vue-router</a>（包括路由管理、导航守卫）</li>
<li>数据存储/清空问题（登录后或者其他情况时）</li>
<li>npm 脚本设置</li>
</ul>
<h2 id="项目最终目录结构"><a href="#项目最终目录结构" class="headerlink" title="项目最终目录结构"></a>项目最终目录结构</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── babel.config.js</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   └── index.html</span><br><span class="line">└── src</span><br><span class="line">    ├── App.vue</span><br><span class="line">    ├── api</span><br><span class="line">    │   └── login.js</span><br><span class="line">    ├── assets</span><br><span class="line">    │   └── images</span><br><span class="line">    ├── components</span><br><span class="line">    ├── config</span><br><span class="line">    │   ├── index.js</span><br><span class="line">    │   └── router.js</span><br><span class="line">    ├── layout</span><br><span class="line">    │   └── home.vue</span><br><span class="line">    ├── main.js</span><br><span class="line">    ├── router</span><br><span class="line">    │   ├── index.js</span><br><span class="line">    │   └── modules</span><br><span class="line">    ├── utils</span><br><span class="line">    │   ├── axios.js</span><br><span class="line">    │   ├── errorHandle.js</span><br><span class="line">    │   ├── request.js</span><br><span class="line">    │   ├── router.js</span><br><span class="line">    │   └── utils.js</span><br><span class="line">    └── views</span><br><span class="line">        ├── home.vue</span><br><span class="line">        └── login.vue</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：<br>tree 可以自动生成目录结构，安装依赖：<code>brew install tree</code><br>执行命令生成树状目录结构：<code>tree -L 3 -I &quot;node_modules&quot;  // &#39;3&#39;是指要几层，&quot;node_modules&quot;指过滤掉的</code></p>
</blockquote>
<h2 id="通过vue-cli创建并初始化项目"><a href="#通过vue-cli创建并初始化项目" class="headerlink" title="通过vue-cli创建并初始化项目"></a>通过vue-cli创建并初始化项目</h2><p>利用脚手架创建项目：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue create 项目名</span><br></pre></td></tr></table></figure>

<p>脚手架生成项目结构后，手动删除初始化生成的一些多余页面。</p>
<p>注：若创建项目后本地自动有关联仓库的话（没有手动关联仓库，可是本地会显示待提交的文件）就执行：<br>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm -rf .git</span><br></pre></td></tr></table></figure></p>
<h2 id="封装axios接口"><a href="#封装axios接口" class="headerlink" title="封装axios接口"></a>封装<a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios</a>接口</h2><h3 id="封装axios的流程"><a href="#封装axios的流程" class="headerlink" title="封装axios的流程"></a>封装axios的流程</h3><p>1.首先安装axios：<br>        <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure></p>
<p>2.新建 utils 文件夹和里面的 axios.js 并在 main.js 中引入这个utils/axios.js。</p>
<p>utils =&gt; axios.js：（将<a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios</a> 上的这段复制下来，并封装在了HttpRequest中 ）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 封装axios的请求，返回重新封装的数据格式</span><br><span class="line">// 需要对返回的错误code码进行统一处理</span><br><span class="line">import axios from &apos;axios&apos;</span><br><span class="line">import errorHandle from &apos;./errorHandle&apos;  // 也是在utils中自己封装的一个方法</span><br><span class="line"></span><br><span class="line">class HttpRequest &#123;</span><br><span class="line">    constructor(baseURL) &#123;</span><br><span class="line">        this.baseURL = baseURL</span><br><span class="line">    &#125;</span><br><span class="line">    // 获取axios的配置</span><br><span class="line">    getInsideConfig() &#123;</span><br><span class="line">        const config = &#123;</span><br><span class="line">            baseURL: this.baseURL,</span><br><span class="line">            headers: &#123;</span><br><span class="line">                &apos;Content-Type&apos;: &apos;application/json;chartset=utf-8&apos;,</span><br><span class="line">            &#125;,</span><br><span class="line">            timeout: 10000  // 请求超过10s默认失败，请求超时</span><br><span class="line">        &#125;</span><br><span class="line">        return config;</span><br><span class="line">    &#125;</span><br><span class="line">    // 设定拦截器</span><br><span class="line">    interceptors(instance) &#123;</span><br><span class="line">        // 将axios github上的这段复制下来 </span><br><span class="line">        // 并用instance替换axios</span><br><span class="line"></span><br><span class="line">        // 请求拦截器</span><br><span class="line">        instance.interceptors.request.use((config) =&gt; &#123;</span><br><span class="line">            console.log(&apos;发送请求&apos;);</span><br><span class="line">            return config;</span><br><span class="line">        &#125;, (err) =&gt; &#123;</span><br><span class="line">            errorHandle(err)</span><br><span class="line">            return Promise.reject(err);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        // 响应请求的拦截器</span><br><span class="line">        instance.interceptors.response.use((res) =&gt; &#123;</span><br><span class="line">            // 处理响应成功的</span><br><span class="line">            console.log(&apos;请求回来的&apos;);</span><br><span class="line">            if (res.status === 200) &#123;</span><br><span class="line">                return Promise.resolve(res.data)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return Promise.reject(res.data)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, (err) =&gt; &#123;</span><br><span class="line">            // 对返回的错误code码进行统一处理</span><br><span class="line">            errorHandle(err)</span><br><span class="line">            return Promise.reject(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    // 创建实例</span><br><span class="line">    request(options) &#123;</span><br><span class="line">        const instance = axios.create()</span><br><span class="line">        const newOptions = Object.assign(this.getInsideConfig(), options)</span><br><span class="line">        this.interceptors(instance)</span><br><span class="line">        return instance.request(newOptions)</span><br><span class="line">    &#125;</span><br><span class="line">    // get方法封装</span><br><span class="line">    get (url,config) &#123;</span><br><span class="line">        const options = Object.assign(&#123;</span><br><span class="line">            method: &apos;get&apos;,</span><br><span class="line">            url: url</span><br><span class="line">        &#125;, config)</span><br><span class="line">        return this.request(options)</span><br><span class="line">    &#125;</span><br><span class="line">    // post方法封装</span><br><span class="line">    post (url,data, ...config) &#123;  // data是post请求时带的json数据</span><br><span class="line">        return this.request(&#123;</span><br><span class="line">            method: &apos;post&apos;,</span><br><span class="line">            url: url,</span><br><span class="line">            data: data,</span><br><span class="line">            ...config</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default HttpRequest  // 导出HttpRequest</span><br></pre></td></tr></table></figure>

<p>现在已经把最基础的前置守卫封装在类里了，并且导出了HttpRequest</p>
<p>3.HttpRequest 导出后，就可以在utils/request.js中实例化axios并导出axios：<br>utils =&gt; request.js： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import HttpRequest from &apos;./axios&apos;</span><br><span class="line">import config from &apos;@/config&apos;  // 引入配置文件 取到里面的baseUrl</span><br><span class="line">const baseURL = process.env.NODE_ENV === &apos;development&apos; ? config.baseURL.dev : config.baseURL.process   // 把@config中的baseUrl传递过去</span><br><span class="line"></span><br><span class="line">const axios = new HttpRequest(baseURL)  // 实例化axios,并将baseUrl传进去</span><br><span class="line"></span><br><span class="line">export default axios  // 导出axios</span><br></pre></td></tr></table></figure>

<p>4.那么现在就可以使用封装好的axios在进行接口的封装了：<br>api =&gt; login.js： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import axios from &apos;@/utils/request&apos;  // 引入封装好的axios</span><br><span class="line"></span><br><span class="line">const test = () =&gt; &#123;  // 接口</span><br><span class="line">    return axios.get(&apos;/test&apos;)  </span><br><span class="line">&#125;</span><br><span class="line">const login = () =&gt; &#123;</span><br><span class="line">    return axios.post(&apos;/save&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export &#123; test, login &#125;</span><br></pre></td></tr></table></figure>

<p>5.那么现在我们可以在页面中来测试使用接口是否能调通了：</p>
<p>get方法，在.vue文件中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; test &#125; from &apos;@/api/login&apos;</span><br><span class="line">test().then(res =&gt; &#123;</span><br><span class="line">    console.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>post 方法，在.vue文件中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; login &#125; from &apos;@/api/login&apos;</span><br><span class="line">const params = &#123;</span><br><span class="line">    phone: this.loginForm.phone,</span><br><span class="line">    password: this.loginForm.password</span><br><span class="line">&#125;</span><br><span class="line">login(params).then(res =&gt; &#123;</span><br><span class="line">    console.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="接口状态封装"><a href="#接口状态封装" class="headerlink" title="接口状态封装"></a>接口状态封装</h3><p>待开发</p>
<h3 id="页面import引入接口封装"><a href="#页面import引入接口封装" class="headerlink" title="页面import引入接口封装"></a>页面import引入接口封装</h3><p>待开发</p>
<h2 id="引入组件库element-ui"><a href="#引入组件库element-ui" class="headerlink" title="引入组件库element-ui"></a>引入组件库<a href="https://element.eleme.cn/#/zh-CN/component/installation" target="_blank" rel="noopener">element-ui</a></h2><p>1.npm 安装：<code>npm i element-ui -S</code></p>
<p>2.引入 Element：</p>
<p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/Vue%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%85%8D%E7%BD%AE/WechatIMG7.png" alt="cmd-markdown-logo"></p>
<p>上面这个截图是<a href="https://element.eleme.cn/#/zh-CN/component/quickstart" target="_blank" rel="noopener">element-ui快速上手</a>中的完整引入，文档中也有部分引入的说明，具体的看文档。</p>
<p>好了，这样就完成了组件库的引入。</p>
<h3 id="设置全局样式"><a href="#设置全局样式" class="headerlink" title="设置全局样式"></a>设置全局样式</h3><p>app.vue： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html &#123;</span><br><span class="line">    /* 获取整个屏幕大小 */</span><br><span class="line">    height: 100vh;  </span><br><span class="line">&#125;</span><br><span class="line">body, #app &#123;</span><br><span class="line">    height: 100%;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置全局统一的色值"><a href="#配置全局统一的色值" class="headerlink" title="配置全局统一的色值"></a>配置全局统一的色值</h3><!-- 安装：node-sass 和 sass-loader(版本为7.几的话下图43行就用"data",版本不为7.几的话43行就用"prependData") -->
<p>待开发</p>
<h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><h3 id="路由管理（一般页面少的情况下可以直接这样，路由都放在router-gt-index-js一个文件中）"><a href="#路由管理（一般页面少的情况下可以直接这样，路由都放在router-gt-index-js一个文件中）" class="headerlink" title="路由管理（一般页面少的情况下可以直接这样，路由都放在router =&gt; index.js一个文件中）"></a>路由管理（一般页面少的情况下可以直接这样，路由都放在router =&gt; index.js一个文件中）</h3><p>入口文件 App.vue：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;router-view /&gt;  // router中的配置会印射进来</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>路由配置 router =&gt; index.js：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Login from &apos;../views/login.vue&apos;</span><br><span class="line">import Home from &apos;../views/home.vue&apos;</span><br><span class="line">const routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: &apos;/&apos;,  // 根路由会印射在App.vue里面，默认该页面是进网站的第一个页面</span><br><span class="line">        name: &apos;Login&apos;,</span><br><span class="line">        component: Login</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: &apos;/Home&apos;,</span><br><span class="line">        name: &apos;Home&apos;,</span><br><span class="line">        component: Home</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="路由拦截-又叫导航守卫-（路由分了模块放在不同的js文件中，这边对router-gt-modules中的所有路由js页面做了配置，可以拿到router-gt-modules中所有的路由）"><a href="#路由拦截-又叫导航守卫-（路由分了模块放在不同的js文件中，这边对router-gt-modules中的所有路由js页面做了配置，可以拿到router-gt-modules中所有的路由）" class="headerlink" title="路由拦截(又叫导航守卫)（路由分了模块放在不同的js文件中，这边对router =&gt; modules中的所有路由js页面做了配置，可以拿到router =&gt; modules中所有的路由）"></a>路由拦截(又叫导航守卫)（路由分了模块放在不同的js文件中，这边对router =&gt; modules中的所有路由js页面做了配置，可以拿到router =&gt; modules中所有的路由）</h3><p>utils =&gt; router.js（ 这个里面就是<a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB" target="_blank" rel="noopener">vue-router路由拦截</a>）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Router from &apos;vue-router&apos;</span><br><span class="line">import ROUTES from &apos;@/router/index&apos;  // 见下面封装</span><br><span class="line">import &#123; ROUTER_DEFAULT_CONFIG &#125; from &apos;@/config/index&apos;  // 见下面封装</span><br><span class="line">import &#123; routerBeforeEachFunc &#125; from &apos;@/config/router&apos;  // 见下面封装</span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line">// 注入默认配置和路由表</span><br><span class="line">let routerInstance = new Router(&#123;</span><br><span class="line">    ...ROUTER_DEFAULT_CONFIG,  // 默认配置</span><br><span class="line">    routes: ROUTES  // 路由表</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">routerInstance.beforeEach(routerBeforeEachFunc)  // routerBeforeEachFunc 是beforeEach的参数</span><br><span class="line"></span><br><span class="line">export default routerInstance  // 导出前置守卫</span><br></pre></td></tr></table></figure>

<p>以上这是一个总的路由拦截的写法，那几个引入的文件都是把它单个的封装出去了，具体封装的见下面：</p>
<p>router =&gt; index.js： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; importAll &#125; from &apos;@/utils/utils&apos;</span><br><span class="line"></span><br><span class="line">const routeModules = importAll(  // importAll这样可以匹配到@/router/modules下的路由，就可以把路由按照模块来写不用堆在一个文件中</span><br><span class="line">    require.context(&apos;@/router/modules&apos;, false, /\.js$/)</span><br><span class="line">)</span><br><span class="line">const routes = routeModules.reduce(</span><br><span class="line">    (finallRoutes, routerModule) =&gt;</span><br><span class="line">        finallRoutes.concat(routerModule.module),</span><br><span class="line">    []</span><br><span class="line">)</span><br><span class="line">export default routes  // 导出的router按模块划分写在不同的js页面里</span><br></pre></td></tr></table></figure>

<p>utils =&gt; utils.js：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const fileNameRE = /^\.\/([^\s]+)\.js$/</span><br><span class="line">export function importAll(modulesContext) &#123;  // importAll router/index.js中引入的 </span><br><span class="line">    return modulesContext.keys().map((modulesPath) =&gt; &#123;</span><br><span class="line">        const moduleName = modulesPath.match(</span><br><span class="line">            fileNameRE</span><br><span class="line">        )</span><br><span class="line">        return &#123;</span><br><span class="line">            moduleName,</span><br><span class="line">            camelModuleName: moduleName[1].replace(</span><br><span class="line">                /-(\w)/g,</span><br><span class="line">                (_, c) =&gt; (c ? c.toUpperCase() : &apos;&apos;)</span><br><span class="line">            ),</span><br><span class="line">            module: modulesContext(modulesPath).default</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>config =&gt; index.js：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 路由默认配置，路由表并不从此注入</span><br><span class="line">export const ROUTER_DEFAULT_CONFIG = &#123;  // history 模式</span><br><span class="line">    mode: &apos;history&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>config =&gt; router.js：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 在这里面处理一些页面拦截，权限处理之类的</span><br><span class="line">export function routerBeforeEachFunc(to, from, next) &#123;</span><br><span class="line">    if(to.matched.some(record =&gt; record.meta.requireAuth)) &#123;  // 判断该路由是否需要登录权限</span><br><span class="line">        // let loginInfo = window.localStorage.getItem(&quot;loginUserInfo&quot;)</span><br><span class="line">        // if(loginInfo) &#123;  // 判断该路由是否需要登录权限</span><br><span class="line">        //     next()</span><br><span class="line">        // &#125; else &#123;</span><br><span class="line">        //     next(&#123;</span><br><span class="line">        //         path: &apos;/home&apos;,</span><br><span class="line">        //         query: &#123; redirect: to.fullPath &#125;  // 将跳转的路由path作为参数，登录成功后跳转到该路由</span><br><span class="line">        //     &#125;)</span><br><span class="line">        // &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        next()</span><br><span class="line">    &#125;</span><br><span class="line">    next()</span><br></pre></td></tr></table></figure>

<p>最后在main.js中注入这个经过处理的拦截router：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import router from &apos;@/utils/router.js&apos;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  router  // 注入router</span><br><span class="line">&#125;).$mount(&apos;#app&apos;)</span><br></pre></td></tr></table></figure>

<p>好了，那么需要写入路由的话。router =&gt; modules =&gt; index.js：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const App = () =&gt;</span><br><span class="line">    import (&apos;@/layout/home.vue&apos;)  // 需要一个壳子</span><br><span class="line">const Login = () =&gt; import(&apos;@/views/login.vue&apos;)  // 可以写成这种写法，原本是 import Login from &apos;../../views/login.vue&apos; </span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    path: &quot;/&quot;,</span><br><span class="line">    component: App,  // App 需要在上面引入,是一个嵌套页面的壳子</span><br><span class="line">    redirect: &quot;/Login&quot;,</span><br><span class="line">    meta: &#123;</span><br><span class="line">        title: &quot;&quot;,</span><br><span class="line">        requireAuth: false, // 添加该字段，表示进入这个路由是需要登录的</span><br><span class="line">        isback: true</span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: &quot;/Login&quot;,</span><br><span class="line">            meta: &#123;</span><br><span class="line">                title: &apos;登录页&apos;</span><br><span class="line">            &#125;,</span><br><span class="line">            component: Login</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>好了，这样路由拦截就完成了</p>
<h2 id="ESLint-配置"><a href="#ESLint-配置" class="headerlink" title="ESLint 配置"></a>ESLint 配置</h2><p>可以在创建项目的时候就选择使用eslint。但是那是默认的eslint，要是想在默认的基础上修改或者添加一些自己的配置呢：<br>package.json中(创建项目时选择了把eslint放在package.json中)</p>
<p>新增缩进4格配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;eslintConfig&quot;: &#123;</span><br><span class="line">    &quot;rules&quot;: &#123;</span><br><span class="line">        &quot;indent&quot;: [1, 4]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改<code>定义了但是未使用</code>(这个是eslint默认的)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;eslintConfig&quot;: &#123;</span><br><span class="line">    &quot;rules&quot;: &#123;</span><br><span class="line">        &quot;no-unused-vars&quot;: 0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当想要不校验某一行的eslit是否符合规范时，可以在这句的上一行添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// eslint-disable-next-line</span><br></pre></td></tr></table></figure>

<h2 id="数据存储-数据清除等"><a href="#数据存储-数据清除等" class="headerlink" title="数据存储/数据清除等"></a>数据存储/数据清除等</h2><p>数据存储时可以保存在 localStorage 或者 sessionstorage，以下将方法封装在 utils/utils.js 中：</p>
<p>localStorage：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 存储localStorage</span><br><span class="line">export const setStore = (name, content) =&gt; &#123;</span><br><span class="line">    if(!name) return;</span><br><span class="line">    if(typeof content !== &apos;string&apos;) &#123;</span><br><span class="line">        content = JSON.stringify(content);</span><br><span class="line">    &#125;</span><br><span class="line">    window.localStorage.setItem(name,content);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取localStorage</span><br><span class="line">export const getStore = name =&gt; &#123;</span><br><span class="line">    if(!name) return;</span><br><span class="line">    return window.localStorage.getItem(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 清除localStorage</span><br><span class="line">export const removeStore = name =&gt; &#123;</span><br><span class="line">    if(!name) return;</span><br><span class="line">    window.localStorage.removeItem(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sessionstorage：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//  存储sessionstorage</span><br><span class="line">export const setStoreSession = (name,content) =&gt; &#123;</span><br><span class="line">    if(!name) return;</span><br><span class="line">    if(typeof content !== &apos;string&apos;) &#123;</span><br><span class="line">        content = JSON.stringify(content)</span><br><span class="line">    &#125;</span><br><span class="line">    window.sessionStorage.setItem(name,content)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取sessionStorage</span><br><span class="line">export const getStoreSession = name =&gt; &#123;</span><br><span class="line">    if (!name) return;</span><br><span class="line">    return window.sessionStorage.getItem(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 清除sessionStorage</span><br><span class="line">export const removeStoreSession = name =&gt; &#123;</span><br><span class="line">    if(!name) return;</span><br><span class="line">    window.sessionStorage.removeItem(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用方法：以localStorage为例，在.vue页面中如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- setStore --&gt;</span><br><span class="line">import &#123; setStore &#125; from &apos;@/utils/utils&apos;</span><br><span class="line">setStore(&apos;lzzhy&apos;, res);</span><br><span class="line"></span><br><span class="line">&lt;!-- getStore --&gt;</span><br><span class="line">import &#123; getStore &#125; from &apos;@/utils/utils&apos;</span><br><span class="line">JSON.parse(getStore(&apos;lzzhy&apos;))</span><br></pre></td></tr></table></figure>

<h2 id="npm-脚本设置"><a href="#npm-脚本设置" class="headerlink" title="npm 脚本设置"></a>npm 脚本设置</h2><p>待开发</p>
<h2 id="搭建项目过程中的问题"><a href="#搭建项目过程中的问题" class="headerlink" title="搭建项目过程中的问题"></a>搭建项目过程中的问题</h2><h3 id="vue-cli生成项目后可以直接用-引入文件"><a href="#vue-cli生成项目后可以直接用-引入文件" class="headerlink" title="vue-cli生成项目后可以直接用@引入文件"></a>vue-cli生成项目后可以直接用@引入文件</h3><p>之所以用‘@’，是因为偷了个懒利用3.x中/node_modules/@vue/cli-service/lib/config/base.js中已经配好的@路径,有兴趣的可以进入文件里面看一看</p>
<h3 id="Failed-to-resolve-loader-sass-loader"><a href="#Failed-to-resolve-loader-sass-loader" class="headerlink" title="Failed to resolve loader: sass-loader"></a>Failed to resolve loader: sass-loader</h3><p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/Vue%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%85%8D%E7%BD%AE/WechatIMG6.png" alt="cmd-markdown-logo"></p>
<p>因为在项目中使用的是<code>&lt;style lang=&quot;scss&quot;&gt;</code>，发现会报上图这个错：不能解析saa-loader。解决方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install sass-loader node-sass -D  // 安装 sass-loader node-sass 依赖</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>koa + MongoDB</title>
    <url>/koa%20+%20MongoDB/</url>
    <content><![CDATA[<p>新年第一趴来咯！！！！</p>
<h2 id="为什么要学这个呢"><a href="#为什么要学这个呢" class="headerlink" title="为什么要学这个呢"></a>为什么要学这个呢</h2><p>现在越来越讲究 大前端，但是大前端究竟是什么呢？</p>
<p>我对大前端的理解：它至少有一个点是在现在前后端分离的趋势中可以脱离后端独立开发一个项目。由于 前端代码 + 数据库 + 后端代码 = 完整的一个项目，那么就有了我们本节所讲的Node.js(扮演后端)和 MongoDB(数据库)</p>
<p>对于为什么会选中 Node.js 和 MongoDB 呢？ </p>
<p>Node.js 是能够在服务器端运行 JavaScript 的开放源代码、跨平台 JavaScript 运行环境。</p>
<p>而 MongoDB 相较于其他关系型数据库相比来说具有以下的有点：</p>
<ul>
<li>弱一致性（最终一致），更能保证用户的访问速度</li>
<li>文档结构的存储方式，能够更便捷的获取数据</li>
<li>内置GridFS，支持大容量的存储</li>
<li>第三方支持丰富 (这是与其他的NoSQL相比，MongoDB也具有的优势)</li>
<li>性能优越</li>
</ul>
<h2 id="koa-和-MongoDB-是什么"><a href="#koa-和-MongoDB-是什么" class="headerlink" title="koa 和 MongoDB 是什么"></a>koa 和 MongoDB 是什么</h2><p>koa：官方的解释是基于Node.js平台的下一代web开发框架</p>
<p>MongoDB 是数据库本身，而 Mongoose 是 MongoDB 的对象建模工具（说白了就是基于前者之上进行功能封装的一个库，它们两者之间的关系类似Node.js和express或koa之间的关系）</p>
<p>二者之间的关系：使用 node.js 的框架 ( 比如koa ) 与数据库（  MongoDB ）建立连接并且操作数据库，node.js 框架给提供接口，提供的接口就是关联数据库里面的，最后渲染在前端页面上。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>环境要求：node.js &gt; 7.6.0（可以使用 <a href="https://github.com/nvm-sh/nvm/blob/master/README.md" target="_blank" rel="noopener">nvm</a>：node.js版本控制工具）</p>
<h2 id="项目准备工作"><a href="#项目准备工作" class="headerlink" title="项目准备工作"></a>项目准备工作</h2><ul>
<li><p>新建项目文件夹：koa + MongoDB (根据自己爱好取o)</p>
</li>
<li><p>生成 package.json：npm init -y</p>
</li>
<li><p>安装相应的依赖：cnpm install koa koa-router –save (–save: 生成的在 dependencies 里)</p>
</li>
<li><p>在 package.json 里将 “main”: “index.js” 改成 “main”: “app.js”，入口文件就变成 app.js 了，在新建一个 app.js 文件作为入口文件(或者直接新增 index.js 并以这个文件作为入口)</p>
</li>
<li><p>在刚新增的 app.js 文件中引入和写逻辑(往下看，在下面的本地搭建里面哦)</p>
</li>
<li><p>启动项目：需要在 package.json 中配置，将 </p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  修改为：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;node app.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  本来执行的命令是 node app.js,但是这里配置了的话执行命令写成 npm run start 就行了。(如对脚本配置有问题的可以参考 <a href="https://lzzhy.github.io/package.json%20%E4%B8%AD%E7%9A%84%20npm%20%E8%84%9A%E6%9C%AC(npm%20scripts)%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/">npm scripts</a> )</p>
</li>
<li><p>安装 nodemon 热更新启动时可以自动监听：需要在 package.json 中配置：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;nodemon&quot;: &quot;nodemon app.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>  并且全局安装：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install -g nodemon</span><br></pre></td></tr></table></figure>

<p>  这样子启动项目的话就可以不用 npm run start (不会监听文件修改)，可以直接 nodemon (可以监听文件修改) 了，在浏览器打开localhost:4000(设置的端口号)就可以了。</p>
</li>
</ul>
<h2 id="搭建本地服务"><a href="#搭建本地服务" class="headerlink" title="搭建本地服务"></a>搭建本地服务</h2><p>app.js：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const koa = require(&quot;koa&quot;);  // 引入koa</span><br><span class="line">const Router = require(&quot;koa-router&quot;);  // 引入路由</span><br><span class="line"></span><br><span class="line">const app = new koa();  // 实例化koa</span><br><span class="line">const router = new Router();  // 实例化路由</span><br><span class="line"></span><br><span class="line">app.use(router.routes()).use(router.allowedMethods());  // 配置路由</span><br><span class="line"></span><br><span class="line">const port = process.env.PORT || 4000;  // 设置端口号 4000这个可以随便改成啥</span><br><span class="line">app.listen(port, () =&gt; &#123;  // 监听当前端口号</span><br><span class="line">    console.log(`serve started on $&#123;port&#125;`);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(&quot;/&quot;, async ctx =&gt; &#123;  // 路由 不同路由展示不同页面</span><br><span class="line">    ctx.body = &#123; msg: &quot;hello koa！I am coming!!&quot; &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>上文提到过了 mongoose 是 MongoDB 的一个对象建模工具，因此我们要通过 mongoose 来实现koa连接 MongoDB 数据库。</p>
<p>安装 mongoose：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install mongoose --save</span><br></pre></td></tr></table></figure>

<p>连接数据库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongoose.connect(&apos;mongodb://localhost:27017/phoneAlbumData&apos;, &#123; useUnifiedTopology: true, useNewUrlParser: true &#125;).then(() =&gt; &#123;  // &apos;mongodb://localhost:27017/&apos;是固定的，phoneAlbumData 是你创建的数据库的名称</span><br><span class="line">    console.log(&quot;数据库连接成功...&quot;);</span><br><span class="line">&#125;).catch(err =&gt; &#123;</span><br><span class="line">    console.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>操作 npm run start,可以看到端口输出数据库连接成功。</p>
<p>连接数据库成功后，可以下载一个 Robo 3T（数据库可视化工具）并在里面查看或者操作数据：<a href="https://www.bbsmax.com/A/obzb7V2BJE/" target="_blank" rel="noopener">Robo 3T 使用教程</a></p>
<h2 id="RESTful接口创建"><a href="#RESTful接口创建" class="headerlink" title="RESTful接口创建"></a>RESTful接口创建</h2><p>mongoose通过 services（方法）,controlller（接口）,model（模型）这三层来实现接口的创建。</p>
<p>下面介绍接口创建的流程以及分别举例介绍一个 GET/POST 方法！</p>
<ul>
<li><p>首先在app.js中引入 controlller（接口） 层的接口</p>
<p>  controlller =&gt; api =&gt; users.js 目录： </p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const Router = require(&quot;koa-router&quot;);  // 引入 koa-router</span><br><span class="line">const router = new Router();  // 实例化 router</span><br><span class="line">const bacUserService = require(&quot;../../services/users&quot;)  // 引入 services 层方法</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* @route GET请求方式 api/users/test</span><br><span class="line">*/</span><br><span class="line">router.get(&quot;/test&quot;, async ctx =&gt; &#123;</span><br><span class="line">    ctx.status = 200;</span><br><span class="line">    ctx.body = &#123; msg: &apos;users works...&apos; &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* @route POST方法 api/users/save</span><br><span class="line">*/</span><br><span class="line">router.post(&quot;/save&quot;, async ctx =&gt; &#123;</span><br><span class="line">    const user = &#123;</span><br><span class="line">        &quot;phone&quot;:  &quot;15770535880&quot;,</span><br><span class="line">        &quot;password&quot;:  &quot;88888888&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    const data = await bacUserService.save(user);</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">        data: data,</span><br><span class="line">        err_code: 0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>来到了 services（方法层）：services =&gt; users.js</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const userModel = require(&quot;../models/users&quot;)  // 引入 services 层</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line"></span><br><span class="line">    &lt;!-- ...封装的方法... --&gt;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>现在是model（模型）层，model =&gt; users.js 目录：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const mongoose = require(&quot;mongoose&quot;)</span><br><span class="line">const Schema = mongoose.Schema  // Schema是模板</span><br><span class="line">const userSchema = new Schema(&#123;  // 实例化数据模板</span><br><span class="line">    phone: &#123;</span><br><span class="line">        type: Number</span><br><span class="line">    &#125;,</span><br><span class="line">    password: &#123;</span><br><span class="line">        type: Number</span><br><span class="line">    &#125;,</span><br><span class="line">    id: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: Date.now</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">module.exports = user = mongoose.model(&quot;users&quot;,userSchema)  // 导出</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后将model（模型）层导出的在app.js中引用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">router.use(&apos;/api/users&apos;, users)  // 接口地址 localhost:4000/api/users</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>好了，这样一个完整的本地服务操作数据库的就完成了（这里只举例了一个get和一个post接口，更多复杂的接口可以自己去探讨一下哦），撒花撒花！！！</p>
<h2 id="测试接口"><a href="#测试接口" class="headerlink" title="测试接口"></a>测试接口</h2><p>既然接口以及实现了，那可以借助 postman 这个测试工具来测试接口是否成功。</p>
<p>比如想要调用 save 接口的话：就在 postman 里面输入 localhost:4000/api/users/save，再选择 post 方法并且输入入参就可以啦。</p>
<p>同理 get 方法也一样：localhost:4000/api/users/get，选择get方法不需要传参</p>
<h2 id="数据库可视化工具"><a href="#数据库可视化工具" class="headerlink" title="数据库可视化工具"></a>数据库可视化工具</h2><p>当我们在 postman 里面测试了 POST接口的话，那么数据库里肯定存入了对应的数据，那么我们要怎么查看我们的数据库具体有哪些数据呢</p>
<p>这个时候就可以借助 Robo 3T 这个工具了，打开这个工具时候需要先创建一个对应的数据库名（这个数据库名就是链接数据库时创建的名字，如我们这里就是phoneAlbumData，因为之前连接数据库时设置了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongoose.connect(&apos;mongodb://localhost:27017/phoneAlbumData&apos;,...</span><br></pre></td></tr></table></figure>

<p>以上只是截取了部分重要的代码，具体的代码放在github上了</p>
<h2 id="在koa应用中支持es6的语法"><a href="#在koa应用中支持es6的语法" class="headerlink" title="在koa应用中支持es6的语法"></a>在koa应用中支持es6的语法</h2><p>使用webpack+babel解决</p>
<p>完美完美。</p>
<p>参考：<br><a href="https://koa.bootcss.com/" target="_blank" rel="noopener">koa官方文档</a></p>
]]></content>
  </entry>
  <entry>
    <title>接口请求</title>
    <url>/Axios%E6%8E%A5%E5%8F%A3%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<p>在前后端联调的过程中，会碰到不同方式的传参。</p>
<h2 id="路径-‘-‘-后面带参数的接口请求-path方式传参"><a href="#路径-‘-‘-后面带参数的接口请求-path方式传参" class="headerlink" title="路径 ‘/‘ 后面带参数的接口请求 path方式传参"></a>路径 ‘/‘ 后面带参数的接口请求 path方式传参</h2><h3 id="带一个参数"><a href="#带一个参数" class="headerlink" title="带一个参数"></a>带一个参数</h3><p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/Axios%E6%8E%A5%E5%8F%A3%E8%AF%B7%E6%B1%82/WechatIMG14.png" alt="cmd-markdown-logo"></p>
<p>api.js：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const showQrCode = (data, shortQrCodeUrl) =&gt; &#123;  // 有两个参数，并且入参shortQrCodeUrl和字符串模板里的一样</span><br><span class="line">    return request(`/sjzmt-backend-web/qrcode/showQrCode/$&#123;shortQrCodeUrl&#125;`, data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>页面中使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; showQrCode &#125; from &apos;@/api&apos;</span><br><span class="line">showQrCode(&#123;shortQrCodeUrl: lastStr&#125;, lastStr).then((data = &#123;&#125;) =&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="带多个参数"><a href="#带多个参数" class="headerlink" title="带多个参数"></a>带多个参数</h3><p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/Axios%E6%8E%A5%E5%8F%A3%E8%AF%B7%E6%B1%82/WechatIMG6.png" alt="cmd-markdown-logo"></p>
<p>api.js：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const searchDictionaryInfo = (type,level,data) =&gt; axios.post(`$&#123;url&#125;/dictionary/dictionaryList/$&#123;type&#125;/$&#123;level&#125;`, data)</span><br></pre></td></tr></table></figure>

<p>页面中使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; searchDictionaryInfo &#125; from &apos;@/api&apos;</span><br><span class="line"></span><br><span class="line">searchDictionaryInfo(&apos;dispute_type&apos;,2).then(res=&gt;   </span><br><span class="line">   if(res.code == 0)&#123;</span><br><span class="line"></span><br><span class="line">   &#125; else &#123;</span><br><span class="line">       this.$message.error(res.msg)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;, (err) =&gt; &#123;</span><br><span class="line">    this.$message.error(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="路径-‘-‘-后面不带参数的接口请求"><a href="#路径-‘-‘-后面不带参数的接口请求" class="headerlink" title="路径 ‘/‘ 后面不带参数的接口请求"></a>路径 ‘/‘ 后面不带参数的接口请求</h2><p>类似这种干净的不带参数的路径：<br><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/Axios%E6%8E%A5%E5%8F%A3%E8%AF%B7%E6%B1%82/WechatIMG7.png" alt="cmd-markdown-logo"></p>
<p>但是这种路径要注意观察swagger看标注的是query,body,header,path中的哪一个;几者的传参时的区别如下：</p>
<h3 id="body"><a href="#body" class="headerlink" title="body"></a>body</h3><p>body是最常见的：</p>
<p>api.js：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const getDisputeProcessList = (data) =&gt; &#123;  // 只有一个参数data</span><br><span class="line">    return request(&apos;/disputeProcess/getDisputeProcessList&apos;, data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>页面调用时：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; getDisputeProcessList &#125; from &apos;@/api&apos;</span><br><span class="line"></span><br><span class="line">const params = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">getDisputeProcessList(params).then((data = &#123;&#125;) =&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="query"><a href="#query" class="headerlink" title="query"></a>query</h3><h4 id="一个参数"><a href="#一个参数" class="headerlink" title="一个参数"></a>一个参数</h4><p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/Axios%E6%8E%A5%E5%8F%A3%E8%AF%B7%E6%B1%82/WechatIMG8.png" alt="cmd-markdown-logo"></p>
<p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/Axios%E6%8E%A5%E5%8F%A3%E8%AF%B7%E6%B1%82/WechatIMG9.png" alt="cmd-markdown-logo"></p>
<p>这个Request URL就是举例给我们后端需要我们怎么样的形式传过去，根据这个知道后端需要将参数直接加个?跟在路径后面，并且参数是string类型。</p>
<p>所以，api.js：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const exportDisputeBook = data =&gt; axios.post(`$&#123;url&#125;/dispute/exportDisputeBook?text=$&#123;data&#125;`)</span><br></pre></td></tr></table></figure>

<p>调用的页面：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.content = `&lt;html&gt;&lt;body&gt;&lt;h2 style=&quot;text-align: center;&quot;&gt;调解协议书&lt;/h2&gt;&lt;br /&gt;&lt;div&gt; &lt;h3&gt;$&#123;bodyApplicant&#125;&lt;/h3&gt; &lt;/div&gt;&lt;div&gt;&lt;h3&gt;$&#123;bodyRelative&#125;&lt;/h3&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;`</span><br><span class="line"></span><br><span class="line">Api.list.exportDisputeBook(this.content).then((res) =&gt; &#123;&#125;) // 这个this.content就是$&#123;data&#125;</span><br></pre></td></tr></table></figure>

<h4 id="多个参数"><a href="#多个参数" class="headerlink" title="多个参数"></a>多个参数</h4><p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/Axios%E6%8E%A5%E5%8F%A3%E8%AF%B7%E6%B1%82/WechatIMG10.png" alt="cmd-markdown-logo"></p>
<p>api.js:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const saveDisputeBook = (disputeNo,data) =&gt; axios.post(`$&#123;url&#125;/dispute/saveDisputeBook?disputeNo=$&#123;disputeNo&#125;&amp;text=$&#123;data&#125;`)</span><br></pre></td></tr></table></figure>

<p>调用的页面：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Api.list.saveDisputeBook(this.disputeNo,`&lt;html&gt;&lt;body&gt;$&#123;this.content&#125;&lt;/body&gt;&lt;/html&gt;`).then((res) =&gt; &#123;&#125;)  // 因为swagger写的是string,所以这两个参数直接这样传</span><br></pre></td></tr></table></figure>

<h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><p>参数跟头参一起传过去，就是请求接口时的Request Headers那里，一般在httpServer封装配置文件里面会设置。</p>
<p><a href="http://www.axios-js.com/zh-cn/docs/#%E4%BB%80%E4%B9%88%E6%98%AF-axios%EF%BC%9F" target="_blank" rel="noopener">axios官方文档</a></p>
]]></content>
  </entry>
  <entry>
    <title>初识Gulp</title>
    <url>/%E5%88%9D%E8%AF%86Gulp/</url>
    <content><![CDATA[<p>gulp也是一种自动化构建工具，适合小型项目，hhh </p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.gulpjs.com.cn/docs/getting-started/quick-start/" target="_blank" rel="noopener">《Gulp官方文档》</a></p>
]]></content>
  </entry>
  <entry>
    <title>小程序笔记</title>
    <url>/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="二进制流如何转化为图片并展示"><a href="#二进制流如何转化为图片并展示" class="headerlink" title="二进制流如何转化为图片并展示"></a>二进制流如何转化为图片并展示</h2><p>二进制流、Base64、图片(文件)之间是可以相互转换的：</p>
<blockquote>
<p>file是文件，如图像文件.jpg等，Base64str 是文件转成的base64字符串</p>
</blockquote>
<p>需求：需要将二维码展示在页面上</p>
<p>接口返回直接是一张图片：<br><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%94%E8%AE%B0/WechatIMG6.png" alt="cmd-markdown-logo"><br>将接口返回的这张图片打印出来是这样的：<br><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%94%E8%AE%B0/WechatIMG7.png" alt="cmd-markdown-logo"></p>
<p>问题分析：</p>
<ul>
<li>由于只返回一张图片，跟项目封装的接口请求不同（项目中封装的是返回code,data,message），因此得自己重新写过接口请求。</li>
<li>二进制流的图片已经通过接口请求回来了，但是要怎么转化成图片链接并展示在页面上。</li>
</ul>
<h3 id="小程序端"><a href="#小程序端" class="headerlink" title="小程序端"></a>小程序端</h3><p>小程序端选择的是 wepy.request 请求方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- wxml部分 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;image  src=&apos;&#123;&#123;imgurl&#125;&#125;&apos;&gt;&lt;/image&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- js部分 --&gt;</span><br><span class="line"></span><br><span class="line">onShow() &#123;</span><br><span class="line">    launchQrCode(&#123;id: this.id&#125;, this.id).then((data = &#123;&#125;) =&gt; &#123;</span><br><span class="line">        var indexs = data.lastIndexOf(&quot;\/&quot;);</span><br><span class="line">        var lastStr =  data.substring(indexs + 1, data.length);</span><br><span class="line">        wepy.request(&#123;   // 使用wepy.request来请求接口，仿照接口封装的函数写的</span><br><span class="line">            data: &#123;shortQrCodeUrl: lastStr&#125;, // 接口需要的入参</span><br><span class="line">            headers: &#123;&apos;token&apos;: this.userInfo.token,&apos;UserId&apos;:this.userInfo.userId, &apos;USER_ID&apos;:this.userInfo.userId&#125;,  // 接口需要的头参，一般在登录后会保存在storage</span><br><span class="line">            url: `/sjzmt-backend-web/qrcode/showQrCode/$&#123;lastStr&#125;`, // 接口路径（域名货端口要有）</span><br><span class="line">            responseType: &apos;arraybuffer&apos;   // 这一行非常重要，重中之重</span><br><span class="line">        &#125;).then((data = &#123;&#125;) =&gt; &#123;</span><br><span class="line">            this.$apply()</span><br><span class="line">        &#125;).catch((data = &#123;&#125;) =&gt; &#123;</span><br><span class="line">            // 将二进制流转化为image能识别的</span><br><span class="line">            var base64 = wx.arrayBufferToBase64(data);</span><br><span class="line">            this.setData(&#123; imgurl:&quot;data:image/PNG;base64,&quot;+ base64&#125;)</span><br><span class="line">            this.$apply()</span><br><span class="line">        &#125;)</span><br><span class="line">        this.$apply()</span><br><span class="line">    &#125;).catch(e =&gt; &#123;</span><br><span class="line">        this.$apply()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="web端"><a href="#web端" class="headerlink" title="web端"></a>web端</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- html部分 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;image src=&apos;&#123;&#123;imgurl&#125;&#125;&apos;&gt;&lt;/image&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- js部分 --&gt;</span><br><span class="line">import axios from &apos;axios&apos;</span><br><span class="line">import &#123; baseURL &#125; from &apos;@/config/index&apos;</span><br><span class="line"></span><br><span class="line">const splitQRcode = res.data.split(&apos;/&apos;)</span><br><span class="line">let instance, imgurl = `$&#123;baseURL&#125;sjzmt-backend-web/qrcode/showQrCode/$&#123;splitQRcode[splitQRcode.length - 1]&#125;`  // imgurl请求的接口：http://123.206.197.169:18050/sjzmt-backend-web/qrcode/showQrCode/aaaacF</span><br><span class="line">instance = axios.create(&#123;  // 这些头参一般也是在storage里的</span><br><span class="line">    headers: &#123;&apos;token&apos;: localStorage.getItem(&apos;JWTToken&apos;),</span><br><span class="line">    &apos;UserId&apos;:localStorage.getItem(&apos;UserId&apos;), </span><br><span class="line">    &apos;USER_ID&apos;:localStorage.getItem(&apos;UserId&apos;)&#125;</span><br><span class="line">&#125;)</span><br><span class="line">instance(&#123;</span><br><span class="line">    method: &apos;post&apos;,</span><br><span class="line">    url: imgurl,</span><br><span class="line">    responseType: &apos;arraybuffer&apos;  // 这一行非常重要，重中之重</span><br><span class="line">&#125;).then(res =&gt; &#123;</span><br><span class="line">    this.showQrCodeIMG = window.URL.createObjectURL(new Blob([res.data],&#123;type:&apos;image/png;charset=UTF-8&apos; &#125;));  // 二进制流转化</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="小程序的-this-apply"><a href="#小程序的-this-apply" class="headerlink" title="小程序的 this.$apply()"></a>小程序的 this.$apply()</h2><p>this.$apply()使用场景：</p>
<ul>
<li>异步更新数据</li>
<li>手动刷新DOM</li>
</ul>
<p>注：在小程序中：methods里面的方法是不用这个的，但methods里面只能放bindtap这类方法。所以你自己定义的其他方法，或者写在onshow里面的，就必须得用this.$apply()。</p>
<h2 id="列表页展示数据并下拉刷新"><a href="#列表页展示数据并下拉刷新" class="headerlink" title="列表页展示数据并下拉刷新"></a>列表页展示数据并下拉刷新</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- wxml部分 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;view wx:for=&quot;&#123;&#123; disputeCaseList &#125;&#125;&quot; wx:key=&quot;index&quot;&gt;需要循环渲染的数据&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;view wx:if=&quot;&#123;&#123;disputeCaseList.length &gt; 0&#125;&#125;&quot; class=&quot;no-more&quot;&gt; ---- 已经到底了 ---- &lt;/view&gt;</span><br><span class="line">&lt;view wx:if=&quot;&#123;&#123; nodata &amp;&amp; !loading &#125;&#125;&quot; class=&quot;nodata-view&quot;&gt;</span><br><span class="line">    &lt;view class=&quot;nodata-view__icon&quot;&gt;&lt;view class=&quot;icon icon-tijianbaogaochaxun&quot;&gt;&lt;/view&gt;&lt;/view&gt;</span><br><span class="line">    &lt;view class=&quot;nodata-view__label&quot;&gt;当前无调解&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    disputeCaseList: [],  // 列表数据</span><br><span class="line">    nodata: false,</span><br><span class="line">    loading: false,</span><br><span class="line">    nomore: false,</span><br><span class="line">    itemCount: Number,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 页面上拉刷新触发底部函数 --&gt;</span><br><span class="line">onReachBottom() &#123;</span><br><span class="line">    this.onPullup()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onPullup(type, cb) &#123;  // 请求列表</span><br><span class="line">    if (this.nodata || this.nomore || this.loading)  // 若没有数据，或已加载完，或正在加载，则不做处理  return</span><br><span class="line">    const &#123; pageNum &#125; = this</span><br><span class="line">    let params = &#123;</span><br><span class="line">        pageIndex: pageNum + 1,</span><br><span class="line">        pageSize: 5,</span><br><span class="line">        keyword: this.keyWords ? this.keyWords : &apos;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    // 开启加载状态</span><br><span class="line">    this.loading = true</span><br><span class="line">    getDisputeList(params).then((data = &#123;&#125;) =&gt; &#123;</span><br><span class="line">        this.loading = false</span><br><span class="line">        this.disputeCaseList = this.disputeCaseList.concat(data.records || [])  // 每一页5条数据，每加载一次就把数据往里塞</span><br><span class="line">        this.itemCount = data.total || 0</span><br><span class="line">        // 计算是否有数据</span><br><span class="line">        this.nodata = this.itemCount === 0</span><br><span class="line">        // 计算是否已加载完</span><br><span class="line">        this.nomore = !this.nodata &amp;&amp; this.disputeCaseList.length === this.itemCount</span><br><span class="line">        // 若未加载完，则页码加1</span><br><span class="line">        if (!this.nodata &amp;&amp; !this.nomore) &#123;</span><br><span class="line">            this.pageNum++</span><br><span class="line">        &#125;</span><br><span class="line">        this.$apply()</span><br><span class="line">        cb &amp;&amp; cb()</span><br><span class="line">    &#125;).catch(e =&gt; &#123;</span><br><span class="line">        // 关闭加载状态</span><br><span class="line">        this.loading = false</span><br><span class="line">        this.$apply()</span><br><span class="line">        cb &amp;&amp; cb()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onShow() &#123;</span><br><span class="line">    this.loading = false</span><br><span class="line">    this.nodata = false</span><br><span class="line">    this.nomore = false</span><br><span class="line">    this.disputeCaseList = []</span><br><span class="line">    this.pageNum = 0</span><br><span class="line">    this.itemCount = 0</span><br><span class="line">    this.onPullup()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 小程序循环数组中要通过 data-xxx=&quot;&#123;&#123;&#125;&#125;&quot;来获取对应数据： --&gt;</span><br><span class="line"></span><br><span class="line">&lt;view wx:for=&quot;&#123;&#123; disputeCaseList &#125;&#125;&quot; data-disputeNo=&quot;&#123;&#123;item.disputeNo&#125;&#125;&quot; wx:key=&quot;index&quot;&gt;</span><br><span class="line">    需要循环渲染的数据</span><br><span class="line">    &lt;button class=&quot;button&quot; @tap=&quot;toCaseDetail(&apos;&#123;&#123;item&#125;&#125;&apos;)&quot;&gt;纠纷详情&lt;/button&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 跳转 --&gt;</span><br><span class="line"></span><br><span class="line">toCaseDetail(item) &#123;</span><br><span class="line">    wx.navigateTo(&#123;</span><br><span class="line">        url: `/pages/home/case-detail?disputeNo=$&#123;item.disputeNo&#125;&amp;id=$&#123;item.id&#125;`</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 被跳转页获取跳转时带来的参数 --&gt;</span><br><span class="line"></span><br><span class="line">onLoad(options) &#123;  // 获取前一个页面传来的参数</span><br><span class="line">    this.disputeNo = options.disputeNo</span><br><span class="line">    this.id = options.id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跳转到另一个页面的第二个tab：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 页面内跳转 到另一个页面的tab --&gt;</span><br><span class="line">toProcessDetail(item) &#123;</span><br><span class="line">    wx.navigateTo(&#123;</span><br><span class="line">        url: `/pages/home/case-detail?active=3&amp;disputeNo=$&#123;item.disputeNo&#125;&amp;id=$&#123;item.id&#125;`</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">再到被跳转页设置 tab 的 active = 3</span><br></pre></td></tr></table></figure>

<h2 id="表单提交"><a href="#表单提交" class="headerlink" title="表单提交"></a>表单提交</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form bindsubmit=&quot;formSubmit&quot;&gt;</span><br><span class="line">    &lt;view class=&quot;flex margin-b36 text-box&quot;&gt; </span><br><span class="line">        &lt;view class=&quot;font-m font-w400 current-view&quot;&gt;纠纷类型&lt;/view&gt;</span><br><span class="line">        &lt;textarea auto-height disabled=&quot;&#123;&#123;isAble&#125;&#125;&quot; value=&quot;&#123;&#123;caseInformationData.disputeTypeName&#125;&#125;&quot; name=&quot;disputeTypeName&quot; placeholder=&quot;请输入纠纷类型&quot; maxlength=&quot;500&quot;/&gt;  // 小程序文本框随着字数增多自动换行增高，每个输入框的nama要唯一</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">    &lt;button form-type=&quot;submit&quot; @tap=&quot;submiSave&quot;&gt;保存&lt;/button&gt;  // 得使用button才生效，view没用</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">formSubmit(e) &#123; // e.detail.value里面取表单中的value值</span><br><span class="line">    this.disputeTypeName = e.detail.value.disputeTypeName</span><br><span class="line"></span><br><span class="line">    // 接口请求</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">submiSave() &#123;</span><br><span class="line">    this.isAble = true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>大前端学习笔记</title>
    <url>/%E5%A4%A7%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h2><p>概念： 指将前端开发的流程规范化，标准化，包括流程开发，技术选型，代码规范，构建发布等，用于提升前端的开发效率和代码质量</p>
<p>包括 webpack4.0/gulp 项目设置，yeoman脚手架<br>自动化测试（工具，框架和使用）</p>
<p>webpack主要作用：资源压缩(eg:css,image…),代码混淆，代码检查，转义，预处理，热更新，核心概念(entry,output,loaders,plugins)<br>gulp核心概念(tasks,pipeline),及对应插件</p>
<p>第三周 =&gt; 2-9一半<br>loader运行报错</p>
]]></content>
  </entry>
  <entry>
    <title>反思二次封装DatePicker组件</title>
    <url>/%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85DatePicker%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<p>由于河北项目中原本使用的elem DatePicker的一个日期选择范围用户体验不太好，因此改成自己二次封装DatePicker组件(选一个日期 =&gt; 选两个日期)</p>
<p>一开始自己写的时候就写了个最简单的$emit，以及对两个时间选择的规则的一个判断，没有去想其他的东西。</p>
<p>后面让老大给CodeReview了一下，妈耶，突然发现自己写的好low，明明已经工作一年多了，封装出来的还跟刚接触vue时候写的一样。真的是服了自己了….</p>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>拿到封装需求之前先多想想这几个方面：</p>
<ul>
<li>如何封装可以让其他地方改动最少(修改二次封装时)</li>
<li>注意组件文件、html结构，函数命名</li>
<li>想清楚哪些应该要做成动态接收的</li>
</ul>
<p>组件无非就是动态传人数据，父子之间函数触发</p>
<h2 id="全局注册和局部引入"><a href="#全局注册和局部引入" class="headerlink" title="全局注册和局部引入"></a>全局注册和局部引入</h2><p>当项目中很多地方用到同一个组件时可以选择全局注册：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// main.js</span><br><span class="line"></span><br><span class="line">import rangeDatePicker from &apos;./components/rangeDatePicke&apos;</span><br><span class="line">Vue.component(&apos;rangeDatePicker&apos;,rangeDatePicker)  // 逗号前的是自己取的名字，用在需要用的文件中</span><br></pre></td></tr></table></figure>

<p>局部引入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//  需要用到这个组件的文件</span><br><span class="line"></span><br><span class="line">import topbar from &apos;@/publicResource/components/topbar.vue&apos;</span><br><span class="line">components: &#123;</span><br><span class="line">    &apos;v-topbar&apos;: topbar</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Vue-自定义组件通过-v-model-通信"><a href="#Vue-自定义组件通过-v-model-通信" class="headerlink" title="Vue 自定义组件通过 v-model 通信"></a>Vue 自定义组件通过 v-model 通信</h2><p>model:{ prop?: string, event?: string }</p>
<p>详细：允许一个自定义组件在使用 v-model 时定制 prop 和 event。默认情况下，一个组件上的 v-model 会把 value 用作 prop 且把 input 用作 event，但是一些输入类型比如单选框和复选框按钮可能想使用 value prop 来达到不同的目的。使用 model 选项可以回避这些情况产生的冲突。</p>
<h3 id="默认情况下，v-model-就是一个语法糖-等价于-value-””-input-””"><a href="#默认情况下，v-model-就是一个语法糖-等价于-value-””-input-””" class="headerlink" title="默认情况下，v-model 就是一个语法糖 等价于 :value=”” @input=””"></a>默认情况下，v-model 就是一个语法糖 等价于 :value=”” @input=””</h3><p>v-model 就是一个语法糖： v-model=”username”等价于 :value=”usernema” @input=”username=$event.target.value”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;input v-model=&quot;username&quot;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">&lt;input :value=&quot;value&quot; @input=&quot;handleinput&quot;&gt;&lt;/input&gt;</span><br><span class="line">props: &#123;</span><br><span class="line">    value: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &apos;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handleinput(e) &#123;</span><br><span class="line">    this.$emit(&apos;input&apos;,e.target.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="但也可以通过修改prop-event来达到不同的目的。使用-model-选项可以回避这些情况产生的冲突。"><a href="#但也可以通过修改prop-event来达到不同的目的。使用-model-选项可以回避这些情况产生的冲突。" class="headerlink" title="但也可以通过修改prop event来达到不同的目的。使用 model 选项可以回避这些情况产生的冲突。"></a>但也可以通过修改prop event来达到不同的目的。使用 model 选项可以回避这些情况产生的冲突。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 子组件使用model对象,定义它的两个属性,就可以在父组件通过v-model实现父子组件双向数据绑定</span><br><span class="line"></span><br><span class="line">model: &#123;</span><br><span class="line">    model: &#123;</span><br><span class="line">        prop: &apos;rangeDate&apos;,  // prop说:我要将rangeDate作为该组件被使用(被父组件调用)时,v-model能取到的值</span><br><span class="line">        event: &apos;change&apos;  // event说:我emit(触发)change的时候，参数的值就是父组件v-model收到的值</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果在子组件中这样写了，那么在props就必须接收的属性是rangeDate，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line"></span><br><span class="line">prop: &#123;</span><br><span class="line">    rangeDate: &#123;</span><br><span class="line">        default: []</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用这个组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;range-date-picker</span><br><span class="line">    v-model=&quot;selectForm.rangedate&quot;</span><br><span class="line">    @change=&quot;getQuerySysOplog&quot;&gt;</span><br><span class="line">&lt;/range-date-picker&gt;</span><br></pre></td></tr></table></figure>

<p>上面的代码相当于：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;range-date-picker</span><br><span class="line">    :rangeDate=&quot;selectForm.rangedate&quot;</span><br><span class="line">    @change=&quot;val =&gt; (foo = val)&quot;</span><br><span class="line">    @change=&quot;getQuerySysOplog&quot;&gt;</span><br><span class="line">&lt;/range-date-picker&gt;</span><br></pre></td></tr></table></figure>

<p>总结：自定义元素上使用 v-model=”selectForm.rangedate”， 同时，组件里使用 model {prop:xxx, event:xxx}<br>可以把 model 里面定义的 prop 和event 自动绑定在 “selectForm.rangedate” 这个自定义事件上</p>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;range-date-picker&quot;&gt;</span><br><span class="line">        &lt;el-date-picker</span><br><span class="line">            v-model=&quot;startDate&quot;</span><br><span class="line">            type=&quot;date&quot;</span><br><span class="line">            @change=&quot;changeStart&quot;</span><br><span class="line">            :picker-options=&quot;startOptions&quot;</span><br><span class="line">            :value-formate=&quot;valueFormat&quot;</span><br><span class="line">            :placeholder=&quot;startPlaceholder&quot;&gt;  // startPlaceholder是动态获取所以前面要加上&apos;:&apos;</span><br><span class="line">        &lt;/el-date-picker&gt;</span><br><span class="line">        &lt;el-date-picker</span><br><span class="line">            v-model=&quot;endDate&quot;</span><br><span class="line">            type=&quot;date&quot;</span><br><span class="line">            @change=&quot;changeEnd&quot;</span><br><span class="line">            :value-formate=&quot;valueFormat&quot;</span><br><span class="line">            :picker-options=&quot;endOptions&quot;</span><br><span class="line">            :placeholder=&quot;endPlaceholder&quot;&gt;</span><br><span class="line">        &lt;/el-date-picker&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import &#123;dateformat&#125; from &apos;@/publicResource/utils/utils.js&apos;</span><br><span class="line">    export default &#123;</span><br><span class="line">        model: &#123;</span><br><span class="line">            prop: &apos;rangeDate&apos;,</span><br><span class="line">            event: &apos;change&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        props: &#123;</span><br><span class="line">            rangeDate: &#123;</span><br><span class="line">                default: [],</span><br><span class="line">            &#125;,</span><br><span class="line">            startPlaceholder: &#123;</span><br><span class="line">                default: &apos;开始日期&apos;,</span><br><span class="line">                type: String</span><br><span class="line">            &#125;,</span><br><span class="line">            endPlaceholder: &#123;</span><br><span class="line">                default: &apos;结束日期&apos;,</span><br><span class="line">                type: String</span><br><span class="line">            &#125;,</span><br><span class="line">            valueFormat: &#123;</span><br><span class="line">                default: &apos;yyyy-MM-dd&apos;,</span><br><span class="line">                type: String</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                startDate: &apos;&apos;,</span><br><span class="line">                endDate: &apos;&apos;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch: &#123;</span><br><span class="line">            rangeDate(newValue, oldValue) &#123;</span><br><span class="line">                if (newValue.length &gt; 0) &#123;</span><br><span class="line">                    this.startDate = newValue[0]</span><br><span class="line">                    this.endDate = newValue[1]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            startOptions()&#123;   // 校验日期规则：开始日期不能必须小于等于结束日期</span><br><span class="line">                let _this = this</span><br><span class="line">                return &#123;</span><br><span class="line">                    disabledDate(time) &#123;</span><br><span class="line">                        return time.getTime() &gt; Math.min(Date.now(), +new Date(_this.endDate))</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            endOptions() &#123;</span><br><span class="line">                let _this = this</span><br><span class="line">                return &#123;</span><br><span class="line">                    disabledDate(time) &#123;</span><br><span class="line">                        return time.getTime() &gt; Date.now() || time.getTime() &lt; +new Date(_this.startDate)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            changeStart(value) &#123;</span><br><span class="line">                let start;</span><br><span class="line">                if (!value) &#123;</span><br><span class="line">                    start = &apos;&apos;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    start = dateformat(value, &apos;yyyy-MM-dd&apos;)</span><br><span class="line">                &#125;</span><br><span class="line">                this.startDate = start</span><br><span class="line">                this.$emit(&apos;change&apos;, [start, this.endDate])  // 这样写父组件@change函数中就可以把参数写成param,这样子基于之前的代码@change函数中就不用修改代码</span><br><span class="line">            &#125;,</span><br><span class="line">            changeEnd(value) &#123;</span><br><span class="line">                let end;</span><br><span class="line">                if (!value) &#123;</span><br><span class="line">                    end = &apos;&apos;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    end = dateformat(value, &apos;yyyy-MM-dd&apos;)</span><br><span class="line">                &#125;</span><br><span class="line">                this.endDate = end</span><br><span class="line">                this.$emit(&apos;change&apos;, [this.startDate, end])</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        mounted() &#123;</span><br><span class="line">            if (this.rangeDate.length &gt; 0) &#123;</span><br><span class="line">                this.startDate = this.rangeDate[0]</span><br><span class="line">                this.endDate = this.rangeDate[1]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>TypeScript 学习笔记</title>
    <url>/TypeScript%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="理解-ES5、ES6、JavaScript、TypeScript-的概念和关系"><a href="#理解-ES5、ES6、JavaScript、TypeScript-的概念和关系" class="headerlink" title="理解 ES5、ES6、JavaScript、TypeScript 的概念和关系"></a>理解 ES5、ES6、JavaScript、TypeScript 的概念和关系</h2><p>ES 是客户端脚本语言的规范，ES5、ES6 是这个规范下的不同版本，TypeScript 和 JavaScript 是两种客户端脚本语言，JavaScript 实现了 ES5 规范，TypeScript实现了 ES6 规范。</p>
<p>TypeScript 是 JavaScript 的超集(：包含了js的东西同时又拥有js没有的东西)，遵循最新的 ES6 的语法规范，TypeScript 扩展了 JavaScript 的语法。任何已经存在的JavaScript 的程序可以不加改动的在  TypeScript 环境下运行，TypeScript 只是在JavaScript 里加了一些遵循 ES6 的语法以及基于类的面向对象的一些特性。（Angular框架就是基于 TypeScript 上开发的），如今的TypeScript 是由微软和谷歌两大公司支持，基于此有理由认为在未来一段时间内 TypeScript 会成为前端主流开发。</p>
<h2 id="TypeScript-的优势"><a href="#TypeScript-的优势" class="headerlink" title="TypeScript 的优势"></a>TypeScript 的优势</h2><ul>
<li>是一门支持 ES6 规范的语言</li>
<li>有强大的 IDE 支持：体现在三个特性上：类型检查(静态类型)、语法提示、重构</li>
<li>是 Angular2 的开发语言</li>
</ul>
<h2 id="搭建-TypeScript-开发环境"><a href="#搭建-TypeScript-开发环境" class="headerlink" title="搭建 TypeScript 开发环境"></a>搭建 TypeScript 开发环境</h2><p>在线： <a href="https://www.typescriptlang.org/play?ts=4.0.2#code/G4QwTgBAtgngdiKBTAXBAzgFzASzgcwgF4IAiAGxwkz31IG4AoWBZCYiARgGYg" target="_blank" rel="noopener">TypeScript</a></p>
<p>本地：</p>
<ul>
<li>安装 TypeScript：cnpm install -g typescript</li>
<li>验证是否安装成功：tsc –version</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>全方位入门git</title>
    <url>/%E5%85%A8%E6%96%B9%E4%BD%8D%E5%85%A5%E9%97%A8git/</url>
    <content><![CDATA[<h2 id="git-gitLab-gitHub-的区别"><a href="#git-gitLab-gitHub-的区别" class="headerlink" title="git,gitLab,gitHub 的区别"></a>git,gitLab,gitHub 的区别</h2><p>git 是一个版本控制工具，通过git 命令实现。</p>
<p>gitHub 是一个基于git实现的在线代码仓库，包含一个网站界面，向互联网开放</p>
<p>gitLab 是一个基于git实现的在线代码仓库软件，你可以自己用gitLab搭建一个类似gitHub的一个系统，一般企业等内部网络搭建git私服</p>
<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>windows：下载<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a>安装包 =&gt; 按照提示的步骤完成后 =&gt; 在桌面空白区右键看下有没有Git GUI Here 和 Git Bush Here，有就成功了</p>
<p>mac：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a> =&gt; 选择mac版本进去如下图</p>
<p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/%E5%85%A8%E6%96%B9%E4%BD%8D%E5%85%A5%E9%97%A8Git/WechatIMG11.png" alt="cmd-markdown-logo"></p>
<p>选择第一种方式 brew install git 安装 =&gt; 要先去安装 brew =&gt; 然后执行 brew install git</p>
<p>查看版本，确认是否安装 git 成功：$ git –version</p>
<h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>克隆远程版本库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone url  // url 是仓库地址</span><br></pre></td></tr></table></figure>

<p>初始化本地版本库（在根目录下创建一个.git目录，用来保存版本信息）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置global级别的用户名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &apos;lzzhy&apos;</span><br></pre></td></tr></table></figure>

<p>配置global级别的邮箱：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.email &apos;liting513@aliyun.com&apos;</span><br></pre></td></tr></table></figure>

<p>查看global级别的配置列表（判断用户名和邮箱是否配置成功）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global -l</span><br></pre></td></tr></table></figure>

<h2 id="git-基本操作"><a href="#git-基本操作" class="headerlink" title="git 基本操作"></a>git 基本操作</h2><h3 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h3><p>git 通常情况下将我们的代码分为四个区：工作区(本地)，暂存区，本地仓库，远程仓库。而git的基础管理代码操作就是将本地代码存储到仓库中。（任何修改都是从进入暂存区才开始被版本控制），具体流程操作如下：</p>
<p>将本地代码提交到暂存区：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

<p>将暂存区的代码提交到本地仓库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m &apos;提交备注&apos;</span><br></pre></td></tr></table></figure>

<p>将本地仓库的代码提交到远程仓库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>

<h3 id="取消在本地修改了很多的文件"><a href="#取消在本地修改了很多的文件" class="headerlink" title="取消在本地修改了很多的文件"></a>取消在本地修改了很多的文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout .</span><br></pre></td></tr></table></figure>

<h3 id="文件已经进入到git版本管理中了怎么撤回"><a href="#文件已经进入到git版本管理中了怎么撤回" class="headerlink" title="文件已经进入到git版本管理中了怎么撤回"></a>文件已经进入到git版本管理中了怎么撤回</h3><p>文件已经提交到暂存区或者其他区怎么撤销git的版本管理：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 退出git版本管理回到本地 --&gt;</span><br><span class="line"></span><br><span class="line">git reset HEAD 文件名  // git reset HEAD src/index.vue</span><br></pre></td></tr></table></figure>

<h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>在还没上线项目中有时候会碰到代码需要回退到上一个版本或者某一个指定版本。</p>
<p>回退到上一个版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这条命令会返回上一个版本，并且本地代码也会变成上个版本的代码</p>
</blockquote>
<p>回退到指定版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 先拿到对应的版本id --&gt;</span><br><span class="line"></span><br><span class="line">git log  // 返回的commit后面的就是id</span><br><span class="line"></span><br><span class="line">&lt;!-- 回退到指定版本 --&gt;</span><br><span class="line"></span><br><span class="line">git reset --hard 版本id  // git reset --hard 47311111...</span><br></pre></td></tr></table></figure>

<h3 id="某个文件回退到某个版本时的代码"><a href="#某个文件回退到某个版本时的代码" class="headerlink" title="某个文件回退到某个版本时的代码"></a>某个文件回退到某个版本时的代码</h3><p>之前讲了整个项目回退版本，但是有时会碰到只想把某个文件回退：</p>
<p>先找到对应版本id：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>

<p>回退文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout 11111666 -- lzzhy.vue</span><br></pre></td></tr></table></figure>

<h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><p>创建分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch 分支  // git branch dev</span><br></pre></td></tr></table></figure>

<p>查看所有本地分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>

<p>切换本地分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout 分支  // git checkout dev</span><br></pre></td></tr></table></figure>

<p>创建并切换本地分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -b 想要创建的分支名  // git checkout -b dev</span><br></pre></td></tr></table></figure>

<p>删除本地分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch -d 分支   // git branch -d dev</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当前所在分支不能删除；当一个分支操作到commit时不能删除；</p>
</blockquote>
<p>那要是想删除已经commit过的本地分支呢：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch -D 分支  // -D 是强制删除</span><br></pre></td></tr></table></figure>

<p>删除远程仓库的分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin --delete 分支名：  // git push origin --delet lzzhy</span><br></pre></td></tr></table></figure>

<p>在自己仓库（lzzhy）下的dev-demand分支合并到自己仓库下的dev分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git merge dev-demand  // 自己本地项目所在的分支为dev</span><br></pre></td></tr></table></figure>

<p>合并分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 先切换到master分支上 --&gt;</span><br><span class="line"></span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line">&lt;!-- dev合并到master分支上 --&gt;</span><br><span class="line"></span><br><span class="line">git merge 需要合并的分支  // git merge dev</span><br></pre></td></tr></table></figure>

<h3 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h3><p>不管是在【合并分支】还是说【提交代码】时，都有可能会遇到代码冲突的问题。</p>
<p>当【合并分支】有冲突时如何正确的合并分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 当执行完 git merge 需要合并的分支 时，报代码冲突 --&gt;</span><br><span class="line"></span><br><span class="line">第1种方式： 需要自己去手动修改合并分支：修改&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;&gt;中的代码</span><br><span class="line"></span><br><span class="line">第2种方式： git merge -abort  // 忽略其他分支的代码保留当前分支的代码</span><br></pre></td></tr></table></figure>

<p>在同一分支修改代码有冲突时：直接手动修改代码 =&gt; 在提交修改后的代码</p>
<h2 id="其他一些-git-命令"><a href="#其他一些-git-命令" class="headerlink" title="其他一些 git 命令"></a>其他一些 git 命令</h2><p>初始化一个.git文件(要提交到仓库，就得先初始化)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>查看当前项目有哪些改动的或者是说查看文件的状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<p>查看之前所有的提交记录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure>

<p>查看某一个人的提交记录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log --author=&apos;名字&apos;  // git log --author=&apos;lzzhy&apos;</span><br></pre></td></tr></table></figure>

<p>删除某个文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rm 文件名  // git rm lzzhy.html</span><br></pre></td></tr></table></figure>

<p>给某个文件重命名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git mv 改动前的文件名 改动后的文件名  // git mv lzzhy1.html lzzhy2.html</span><br></pre></td></tr></table></figure>

<p>查看文件具体修改内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log -p 根目录名  // git log -p src/index.vue</span><br></pre></td></tr></table></figure>

<p>查看版本路线图(查看在每一个分支上究竟做了哪些事情)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log --oneline --graph</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>package.json 中的 npm 脚本(npm scripts)使用指南</title>
    <url>/package.json%20%E4%B8%AD%E7%9A%84%20npm%20%E8%84%9A%E6%9C%AC(npm%20scripts)%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>本文主要介绍 npm 脚本(npm scripts)</p>
<h3 id="什么是-npm-脚本"><a href="#什么是-npm-脚本" class="headerlink" title="什么是 npm 脚本"></a>什么是 npm 脚本</h3><p>定义在 package.json（npm init -y） 里面的脚本，就称之为 npm 脚本。使用 scripts 字段定义脚本命令。如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;serve&quot;: &quot;node build.js&quot;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">//  : 前面的是自己定义的，: 后面的是一些框架，库的语法，因此执行 npm run serve === node build.js</span><br></pre></td></tr></table></figure>

<p>npm 脚本的优点有很多：</p>
<ul>
<li>项目相关脚本，可以集中在一起</li>
<li>不同项目的脚本命令，只要功能相同，就可以有同样的对外接口。用户不需要知道怎么测试你的项目，只要运行npm run test即可</li>
<li>可以利用 npm 提供的很多辅助功能</li>
</ul>
<p>查看当前项目的所有 npm 脚本命令，可以使用不带任何参数的 npm run 命令</p>
<h3 id="npm-脚本原理"><a href="#npm-脚本原理" class="headerlink" title="npm 脚本原理"></a>npm 脚本原理</h3><p>每当执行 npm run，就会自动新建一个 Shell，在这个 Shell 里面执行脚本命令。因此，只要是 Shell(或者 Bash)可以执行的命令，都可以写在脚本中</p>
<p>比较特别的是，npm run 新建的 Shell，会将当前目录 node_modules/.bin 的子目录加入 PATH 变量，执行结束后，再把 PATH 恢复原样。<br>这就意味着，当前目录的node_modules/.bin子目录里面的所有脚本，都可以直接用脚本名调用，而不必加上路径。比如，当前项目的依赖里面有 Babel，只要直接写 Babel test就可以了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;test&quot;: &quot;Babel test&quot;</span><br></pre></td></tr></table></figure>

<p>而不用写成下面这样:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;test&quot;: &quot;./node_modules/.bin/Babel test&quot;</span><br></pre></td></tr></table></figure>

<h3 id="npm-脚本使用通配符"><a href="#npm-脚本使用通配符" class="headerlink" title="npm 脚本使用通配符"></a>npm 脚本使用通配符</h3><p>由于 npm 脚本就是 Shell 脚本，因此可以使用 Shell 通配符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- * 表示任意文件名，** 表示任意一层子目录 --&gt;</span><br><span class="line"></span><br><span class="line">&quot;lint&quot;: &quot;jshint *.js&quot;</span><br><span class="line">&quot;lint&quot;: &quot;jshint **/*.js&quot;</span><br></pre></td></tr></table></figure>

<p>如果要将通配符传入原始命令，防止被 Shell 转义，要将星号转义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;test&quot;: &quot;tap test/\*.js&quot;</span><br></pre></td></tr></table></figure>

<h3 id="npm-脚本传参"><a href="#npm-脚本传参" class="headerlink" title="npm 脚本传参"></a>npm 脚本传参</h3><p>向 npm 脚本传参，要使用 – 标明，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;lint&quot;: &quot;jshint **.js&quot;</span><br><span class="line"></span><br><span class="line">&lt;!-- 向上面这句传参 --&gt;</span><br><span class="line"></span><br><span class="line">npm run lint --  --reporter checkstyle &gt; checkstyle.xml</span><br></pre></td></tr></table></figure>

<p>也可以在 package.json 中封装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;lint&quot;: &quot;jshint **.js&quot;,</span><br><span class="line">&quot;lint:checkstyle&quot;: &quot;npm run lint -- --reporter checkstyle &gt; checkstyle.xml&quot;</span><br></pre></td></tr></table></figure>

<p>这两个是同一个意思</p>
<h3 id="npm-脚本执行顺序"><a href="#npm-脚本执行顺序" class="headerlink" title="npm 脚本执行顺序"></a>npm 脚本执行顺序</h3><p>如果在 npm 脚本中执行多个任务，那么需要明确他们的执行任务</p>
<p>如果是同时执行，可以用 &amp;：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run script1.js &amp; npm run script2.js</span><br></pre></td></tr></table></figure>

<p>如果是一个执行完才能执行下一个任务的话，就用 &amp;&amp;：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run script1.js &amp;&amp; npm run script2.js</span><br></pre></td></tr></table></figure>

<h3 id="常用脚本示栗："><a href="#常用脚本示栗：" class="headerlink" title="常用脚本示栗："></a>常用脚本示栗：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 删除目录</span><br><span class="line">&quot;clean&quot;: &quot;rimraf dist/*&quot;,</span><br><span class="line"></span><br><span class="line">// 本地搭建一个 HTTP 服务</span><br><span class="line">&quot;serve&quot;: &quot;http-server -p 9090 dist/&quot;,</span><br><span class="line"></span><br><span class="line">// 打开浏览器</span><br><span class="line">&quot;open:dev&quot;: &quot;opener http://localhost:9090&quot;,</span><br><span class="line"></span><br><span class="line">// 实时刷新</span><br><span class="line"> &quot;livereload&quot;: &quot;live-reload --port 9091 dist/&quot;,</span><br><span class="line"></span><br><span class="line">// 构建 HTML 文件</span><br><span class="line">&quot;build:html&quot;: &quot;jade index.jade &gt; dist/index.html&quot;,</span><br><span class="line"></span><br><span class="line">// 只要 CSS 文件有变动，就重新执行构建</span><br><span class="line">&quot;watch:css&quot;: &quot;watch &apos;npm run build:css&apos; assets/styles/&quot;,</span><br><span class="line"></span><br><span class="line">// 只要 HTML 文件有变动，就重新执行构建</span><br><span class="line">&quot;watch:html&quot;: &quot;watch &apos;npm run build:html&apos; assets/html&quot;,</span><br><span class="line"></span><br><span class="line">// 部署到 Amazon S3</span><br><span class="line">&quot;deploy:prod&quot;: &quot;s3-cli sync ./dist/ s3://example-com/prod-site/&quot;,</span><br><span class="line"></span><br><span class="line">// 构建 favicon</span><br><span class="line">&quot;build:favicon&quot;: &quot;node scripts/favicon.js&quot;,</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>初探 babel</title>
    <url>/%E5%88%9D%E6%8E%A2babel/</url>
    <content><![CDATA[<h2 id="报错过程"><a href="#报错过程" class="headerlink" title="报错过程"></a>报错过程</h2><p>在项目中局部安装 elem 时：</p>
<ul>
<li>npm install babel-plugin-component -D</li>
<li>创建 .babelrc，并添加：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [[&quot;es2015&quot;, &#123; &quot;modules&quot;: false &#125;]],</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    [</span><br><span class="line">      &quot;component&quot;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;libraryName&quot;: &quot;element-ui&quot;,</span><br><span class="line">        &quot;styleLibraryName&quot;: &quot;theme-chalk&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>走到这一步时报错：</p>
<p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/%E5%88%9D%E6%8E%A2%20babel/WechatIMG1.png" alt="cmd-markdown-logo"></p>
<p>经过排查，发现报错是因为 .babelrc 文件里的 presets 配置报错：</p>
<p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/%E5%88%9D%E6%8E%A2%20babel/WechatIMG2%201.png" alt="cmd-markdown-logo"></p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>安装 @babel/preset-env，并将 .babelrc 文件改成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;: [&quot;@babel/preset-env&quot;],</span><br><span class="line">    &quot;plugins&quot;: [</span><br><span class="line">      [</span><br><span class="line">        &quot;component&quot;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;libraryName&quot;: &quot;element-ui&quot;,</span><br><span class="line">          &quot;styleLibraryName&quot;: &quot;theme-chalk&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原因： 应该是因为版本问题。当前使用的 .babel 版本是7.8.0，而 elem 的 .babelrc 配置 中还是之前版本的”presets”: [[“es2015”, { “modules”: false }]]</p>
<h2 id="初探-babel-（babel-常用知识点整合）"><a href="#初探-babel-（babel-常用知识点整合）" class="headerlink" title="初探 babel （babel 常用知识点整合）"></a>初探 babel （babel 常用知识点整合）</h2><p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/%E5%88%9D%E6%8E%A2%20babel/WechatIMG8.png" alt="cmd-markdown-logo"><br><a href="https://www.babeljs.cn/docs/usage" target="_blank" rel="noopener">Babel</a> 是一个广泛使用的转码器，主要功能：</p>
<ul>
<li>语法转换（将 ES5 转换成 ES6，从而可以在现有环境执行）</li>
<li>通过 Polyfill 方式在目标环境中添加缺失的特性 (通过 @babel/polyfill 模块)</li>
<li>源码转换 (codemods)</li>
</ul>
<h3 id="babel【配置】详解"><a href="#babel【配置】详解" class="headerlink" title="babel【配置】详解"></a>babel【配置】详解</h3><p>对于前端来说 babel 主要使用的就是如何配置了。<a href="https://www.babeljs.cn/docs/configuration" target="_blank" rel="noopener">Babel</a> 左菜单中【指南】=&gt; 【使用指南】/【配置babel】，这两个菜单中是babel的基础配置，主要就是围绕 babel.config.js 和 .babelrc 这两个文件</p>
<h4 id="配置文件-babelrc"><a href="#配置文件-babelrc" class="headerlink" title="配置文件 .babelrc"></a>配置文件 .babelrc</h4><p>Babel 的配置文件是 .babelrc 和 babel.config.js。使用Babel 的第一步就是配置这个文件（二选一）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- .babelrc 该文件用来设置转码规则和插件，基本格式如下 --&gt;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [],</span><br><span class="line">  &quot;plugins&quot;: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>presets字段设定转码规则，官方提供的规则集(如：ES2015转码规则：npm install –save-dev babel-preset-es2015)，具体的可以在<a href="https://www.babeljs.cn/docs/plugins" target="_blank" rel="noopener">Babel插件</a> 中查询根据需要安装。</p>
<p>然后，将这些规则加入 .babelrc:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;: [</span><br><span class="line">      &quot;es2015&quot;,</span><br><span class="line">      &quot;react&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;plugins&quot;: []</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>注：babel.config.js 和 .babelrc 的区别： Babel 的两种并行的配置文件格式；babel.config.js 是针对项目范围的配置，针对第三方和自己的代码；而 .babelrc 是针对文件的配置；一般有了 babel.config.js 就不会去执行 .babelrc，并且要保留 .babelrc 的话就要把 babel.config.js 删除</p>
<h4 id="命令行转码-babel-cli"><a href="#命令行转码-babel-cli" class="headerlink" title="命令行转码 babel-cli"></a>命令行转码 babel-cli</h4><p>Babel 提供 babel-cli 工具，用于命令行转码。如果项目要运行，全局环境必须要有Babel,也就是说项目产生了对环境的依赖。因此要用Babel的话先得安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev babel-cli</span><br></pre></td></tr></table></figure>

<p>然后，改写 package.json: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;babel-cli&quot;: &quot;^6.0.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;babel src -d lib&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>转码的时候，就执行 npm run build</p>
<h4 id="babel-register"><a href="#babel-register" class="headerlink" title="babel-register"></a>babel-register</h4><p>babel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install --save-dev babel-register</span><br></pre></td></tr></table></figure>

<p>使用时，必须首先加载babel-register:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">require(&quot;babel-register&quot;);</span><br><span class="line">require(&quot;./index.js&quot;);</span><br></pre></td></tr></table></figure>

<p>然后，就不需要手动对index.js转码了。</p>
<p>需要注意的是，babel-register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在开发环境使用。</p>
<h4 id="babel-core"><a href="#babel-core" class="headerlink" title="babel-core"></a>babel-core</h4><p>babel-core 和 babel-cli 一样，也是使用 Babel 时必须要装的一个东西：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install babel-core --save</span><br></pre></td></tr></table></figure>

<p>使用示栗：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var es6Code = &apos;let x = n =&gt; n + 1&apos;;</span><br><span class="line">var es5Code = require(&apos;babel-core&apos;)</span><br><span class="line">  .transform(es6Code, &#123;</span><br><span class="line">    presets: [&apos;es2015&apos;]</span><br><span class="line">  &#125;)</span><br><span class="line">  .code;</span><br><span class="line">// &apos;&quot;use strict&quot;;\n\nvar x = function x(n) &#123;\n  return n + 1;\n&#125;;&apos;</span><br></pre></td></tr></table></figure>

<h4 id="babel-polyfill"><a href="#babel-polyfill" class="headerlink" title="babel-polyfill"></a>babel-polyfill</h4><p>babel-polyfill 是 Babel 的一个垫片。Babel 默认只转化新的 js 语法，而不转换新的API(如：Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法比如Object.assign）)</p>
<p>举例来说，比如ES6在Array对象上新增了Array.from方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install --save babel-polyfill</span><br></pre></td></tr></table></figure>

<p>然后，在脚本头部，加入如下一行代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;babel-polyfill&apos;;</span><br><span class="line">// 或者</span><br><span class="line">require(&apos;babel-polyfill&apos;);</span><br></pre></td></tr></table></figure>

<h3 id="插件-Plugins-的使用"><a href="#插件-Plugins-的使用" class="headerlink" title="插件 Plugins 的使用"></a>插件 Plugins 的使用</h3><p>在官方文档中：babel 插件的使用流程都是差不多的。下面用插件 @babel/plugin-transform-arrow-functions(这个插件是转化函数的) 来举个栗子：</p>
<ul>
<li><p>安装 babel 环境：yarn add -D @babel/core @babel/cli</p>
</li>
<li><p>安装插件：yarn add -D @babel/plugin-transform-arrow-functions</p>
</li>
<li><p>新建 src/index.js，输入<a href="https://www.babeljs.cn/docs/babel-plugin-transform-arrow-functions" target="_blank" rel="noopener">文档中@babel/plugin-transform-arrow-functions这段测试代码</a>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a = () =&gt; &#123;&#125;;</span><br><span class="line">var a = (b) =&gt; b;</span><br><span class="line"></span><br><span class="line">const double = [1,2,3].map((num) =&gt; num * 2);</span><br><span class="line">console.log(double); // [2,4,6]</span><br><span class="line"></span><br><span class="line">var bob = &#123;</span><br><span class="line">  _name: &quot;Bob&quot;,</span><br><span class="line">  _friends: [&quot;Sally&quot;, &quot;Tom&quot;],</span><br><span class="line">  printFriends() &#123;</span><br><span class="line">    this._friends.forEach(f =&gt;</span><br><span class="line">      console.log(this._name + &quot; knows &quot; + f));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">console.log(bob.printFriends());</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置脚本（可以使用 .babelrc 或者直接在 package.json 中配置）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 在 package.json 中配置 --&gt;</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build:test-arrow-function&quot;: &quot;babel --plugins @babel/plugin-transform-arrow-functions src -d dist&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 在 .babelrc 中配置 --&gt;</span><br><span class="line">&quot;plugins&quot;: [</span><br><span class="line">    &quot;@babel/plugin-transform-arrow-functions&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>直接执行 npm run build:test-arrow-function 就可以了，dist 下文件就是插件的效果</li>
</ul>
<h3 id="环境构建-举例使用-demo"><a href="#环境构建-举例使用-demo" class="headerlink" title="环境构建 举例使用 demo:"></a>环境构建 举例使用 demo:</h3><ul>
<li><p>安装 <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js 环境</a>  </p>
</li>
<li><p>进入项目，初始化 package.json：npm init -y</p>
</li>
<li><p>安装：npm install –save-dev babel-preset-env babel-cli</p>
</li>
<li><p>创建文件并配置：.babelrc</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;: [&quot;env&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>文件转化命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 将 src/index.js 文件转化成 dist/index.js --&gt;</span><br><span class="line">babel src/index.js -o dist/index.js</span><br><span class="line"></span><br><span class="line">&lt;!-- 文件夹转化 --&gt;</span><br><span class="line">babel src -d dist</span><br><span class="line"></span><br><span class="line">&lt;!-- 实时监控 --&gt;</span><br><span class="line">babel src -w -d dist</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="babel-结合-webpack-的使用"><a href="#babel-结合-webpack-的使用" class="headerlink" title="babel 结合 webpack 的使用"></a>babel 结合 webpack 的使用</h2><p>安装依赖： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add  babel-loader @babel/core @babel/preset-env @babel/plugin-transform-runtime -D</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add @babel/runtime -S  // -S 是提供生产环境</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>前端命名规范</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<p>在一个团队开发中代码规范是很有必要的，有时候一个好的代码规范可以省略很多的备注，可以让自己或其他小伙伴很快地了解你是怎么样写的。。。</p>
<h4 id="驼峰式命名"><a href="#驼峰式命名" class="headerlink" title="驼峰式命名"></a>驼峰式命名</h4><ul>
<li>Pascal Case 大驼峰式命名法：首字母大写。eg：StudentInfo、UserInfo</li>
<li>Camel Case 小驼峰式命名法：首字母小写。eg：studentInfo、userInfo</li>
</ul>
<h4 id="文件资源名称"><a href="#文件资源名称" class="headerlink" title="文件资源名称"></a>文件资源名称</h4><ul>
<li>文件名不含有空格</li>
<li>文件名小写，不使用大写字母（除非：某些说明文件的文件名，可以使用大写字母，比如README、LICENSE )</li>
<li>文件名包含多个单词时，单词之间使用半角的连词线 ( - ) 分隔</li>
</ul>
<h4 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h4><p>命名方式：使用小驼峰命名</p>
<p>命名规范：类型+对象描述，如果没有明确的类型，就可以使前缀为名词</p>
<table>
<thead>
<tr>
<th>类型</th>
<th align="right">小写字母</th>
</tr>
</thead>
<tbody><tr>
<td>array</td>
<td align="right">a</td>
</tr>
<tr>
<td>boolean</td>
<td align="right">b</td>
</tr>
<tr>
<td>function</td>
<td align="right">fn</td>
</tr>
<tr>
<td>int</td>
<td align="right">i</td>
</tr>
<tr>
<td>object</td>
<td align="right">o</td>
</tr>
<tr>
<td>string</td>
<td align="right">s</td>
</tr>
</tbody></table>
<p>推荐：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var tableTitle = &apos;titleTable&apos;</span><br></pre></td></tr></table></figure>

<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>命名方式： 小驼峰方式 ( 构造函数使用大驼峰命名法 )</p>
<p>命名规范： 前缀为动词</p>
<table>
<thead>
<tr>
<th>动词</th>
<th align="right">含义</th>
</tr>
</thead>
<tbody><tr>
<td>can</td>
<td align="right">判断是否可执行某个动作 ( 权限 )</td>
</tr>
<tr>
<td>has</td>
<td align="right">判断是否含有某个值</td>
</tr>
<tr>
<td>is</td>
<td align="right">判断是否为某个值</td>
</tr>
<tr>
<td>get</td>
<td align="right">获取某个值</td>
</tr>
<tr>
<td>set</td>
<td align="right">设置某个值</td>
</tr>
</tbody></table>
<p>推荐：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 是否可阅读</span><br><span class="line">function canRead() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取姓名</span><br><span class="line">function getName() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>命名方法 : 全部大写</p>
<p>命名规范 : 使用大写字母和下划线来组合命名，下划线用以分割单词。</p>
<p>推荐：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var MAX_COUNT = 10;</span><br><span class="line">var URL = &apos;http://www.baidu.com&apos;;</span><br></pre></td></tr></table></figure>

<h4 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h4><h5 id="单行"><a href="#单行" class="headerlink" title="单行"></a>单行</h5><ul>
<li>单独一行：//(双斜线)与注释文字之间保留一个空格</li>
<li>在代码后面添加注释：//(双斜线)与代码之间保留一个空格，并且//(双斜线)与注释文字之间保留一个空格。</li>
<li>注释代码：//(双斜线)与代码之间保留一个空格。</li>
</ul>
<p>推荐：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 调用了一个函数；1)单独在一行</span><br><span class="line">setTitle();</span><br><span class="line"></span><br><span class="line">var maxCount = 10; // 设置最大量；2)在代码后面注释</span><br><span class="line"></span><br><span class="line">// setName(); // 3)注释代码</span><br></pre></td></tr></table></figure>

<h5 id="多行"><a href="#多行" class="headerlink" title="多行"></a>多行</h5><ul>
<li>若开始(/<em>和结束(</em>/)都在一行，推荐采用单行注释</li>
<li>若至少三行注释时，第一行为/<em>，最后行为</em>/，其他行以<em>开始，并且注释文字与</em>保留一个空格。</li>
</ul>
<p>推荐：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">* 代码执行到这里后会调用setTitle()函数</span><br><span class="line">* setTitle()：设置title的值</span><br><span class="line">*/</span><br><span class="line">setTitle();</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>面试应对流程篇</title>
    <url>/%E9%9D%A2%E8%AF%95%E5%BA%94%E5%AF%B9%E6%B5%81%E7%A8%8B%E7%AF%87/</url>
    <content><![CDATA[<p>在面试中大概的一个流程大概会问到什么问题及如何来应对。</p>
<h3 id="自我提升规划"><a href="#自我提升规划" class="headerlink" title="自我提升规划"></a>自我提升规划</h3><ul>
<li>有自己的一个todoList</li>
<li>加入社区/写博客/组建团队，总结分享自己的知识</li>
<li>了解自己的学习进展进度，及时调整，抓重避轻</li>
<li>找一个志同道合的小伙伴</li>
<li>培养一点兴趣爱好，对自己好一点</li>
</ul>
<h3 id="如何写简历"><a href="#如何写简历" class="headerlink" title="如何写简历"></a>如何写简历</h3><ul>
<li>要写重要的基本信息（如 学历/联系方式/年龄/性别…）</li>
<li>专业技能不能太空泛（如：了解html,css,js，可以写成了解html渲染模式，dom结构…）</li>
<li>项目描述要具体（如：项目开始结束时间便于面试官判断你的能力，整个项目主要功能，自己在里面做了什么，收获了什么）</li>
</ul>
<h3 id="面试技巧"><a href="#面试技巧" class="headerlink" title="面试技巧"></a>面试技巧</h3><ul>
<li>针对具体公司具体职位修改自己的简历</li>
<li>学会总结，面试失败后可以询问面试官失败的原因哪些方面需要补足…</li>
<li>模拟面试（面试之前模拟面试提问）</li>
</ul>
<h3 id="可靠的渠道"><a href="#可靠的渠道" class="headerlink" title="可靠的渠道"></a>可靠的渠道</h3><ul>
<li>内推/校招/实习</li>
<li>同学/师兄(姐)/朋友关系介绍</li>
<li>职业猎头</li>
</ul>
<h3 id="基础技能准备"><a href="#基础技能准备" class="headerlink" title="基础技能准备"></a>基础技能准备</h3><ul>
<li>JS 基础 / 进阶相关</li>
<li>HTML /  CSS 相关，这方面问的真的很少了</li>
<li>浏览器 / 性能优化 / 工程相关</li>
<li>框架使用相关，也就是基础问题</li>
<li>框架原理相关，就算你没看过源码，你也得知道它的原理，当下的面试基本是不会原理就寸步难行</li>
<li>计科相关，比如算法 / 数据结构 / 网络，基本这三样，最多加个操作系统</li>
</ul>
<p>参考以下整理出来的面试题：<br><a href="https://lzzhy.github.io/%E9%9D%A2%E8%AF%95%E5%9F%BA%E7%A1%80%E6%8A%80%E8%83%BD%E7%AF%87-CSS,HTML,JS/">面试基础技能篇-CSS,HTML,JS</a></p>
<h3 id="面试如何请假、如何提出辞职"><a href="#面试如何请假、如何提出辞职" class="headerlink" title="面试如何请假、如何提出辞职"></a>面试如何请假、如何提出辞职</h3><p>其实真的没必要考虑我该如何请假才能让上级觉得我不是去面试的，当然实话实说请假是去面试的肯定也不行。既然要请假，那么就直接说家里有事、自己有事就行了，一般人不会那么事逼问你到底干嘛去的。<br>开口提辞职时先要有一个借口，比如什么通勤太远啦、加班太多啦等等的一些个人原因。然后再感激一下领导和公司这一段时间的栽培给自己带来了很大的成长，最后表示在离职之前会认真交接好所有的工作，希望领导能批准自己的离职申请。<br>这时领导可能会开始挽留你，记住一点：一旦决定辞职就别犹豫，上级挽留也一定不要留下来，因为在你辞职的那一刻起公司就认为你是个不稳定的因子，即使你被挽留下来也不大可能会有什么好的发展，同时也不要因为公司曾经带给了你成长所以犹豫到底要不要走。人往高处走，水往低处流，人生没有不散的宴席。</p>
<h3 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h3><p>自我介绍是用于让面试官快速了解你信息的一个环节，但是切记不要啰里啰嗦地说一大堆，准备以下几个环节即可：</p>
<ul>
<li>个人信息，就把简历里写的个人信息说一下，另外还可以附带一些个人的荣誉（社招的就不用去讲学校里获得的荣誉了，除非是有什么大赛得过奖）。</li>
<li>介绍匹配的技术栈。</li>
<li>挑一个个人认为最好的项目说一下，描述方式也是按照 Star 法则。这个项目如果是匹配用人方招聘需求的那就更好了。</li>
<li>自身亮点，比如平时有写文章或者维护的 Github 等等，提升面试官对你的好感。</li>
</ul>
<p>按照上述几个环节，大致可以整理出这样的格式：</p>
<blockquote>
<p>面试官你好，我叫 XXX，就读于 XX 学校 XX 专业，拥有 XX 年前端工作经验，获得过 ACM 省级金牌（介绍自己获得过有含金量的比赛名次），曾供职于 XX 公司（介绍先前工作过的一二线企业）。我在上家公司任职 XX 岗位，主要负责 XX 工作，擅长 XX 技术栈。其中在我负责的 XX 项目中，我完成了 XX 工作，实现了性能 XX% 的提升（这里就是按照 Star 法则去介绍一个自己负责的最佳项目）。另外我还坚持写作，在 XX 平台发表了 XX 文章，共计获得了 XX 点赞/阅读（这里就是介绍自身的亮点）。以上就是我的自我介绍，谢谢！</p>
</blockquote>
<h3 id="怎么谈做过的项目"><a href="#怎么谈做过的项目" class="headerlink" title="怎么谈做过的项目"></a>怎么谈做过的项目</h3><p>项目考察一是为了确认这个项目是否是你做过的，二是为了了解你的技术深度，是否做过就算不太记得还是会有自己的思考。考察的问题一般分为以下几点：</p>
<ul>
<li>项目基础相关的内容，比如涉及到的技术栈、功能、业务相关的问题。</li>
<li>项目具体的细节内容，比如说这个功能你是如何实现的，为什么这样做等等。</li>
<li>考察深度问题，比如说你做这个项目的时候有没有遇到过什么问题，是如何解决的，另外也可能会与上面的面试题结合起来问</li>
</ul>
<p>基于以上几点，你可以这样去准备项目问答：</p>
<blockquote>
<p>1.这个项目涉及的技术栈相关的内容，无论是基础的还是深度的，因为这里很可能会问到框架原理。<br>2.想想做这个项目的过程中是否有遇到过一些困难，最终是如何解决的，实在想不起来的话可以看看 Git Commit。<br>3.这个项目自己是否做过一些优化，包括代码、开发效率、性能、体验等等相关的领域。<br>4.这个项目当中存在的一些问题，可能的解决思路。<br>这个项目最终达成的成果。<br>5.这个项目带给你的成长是什么，当然别说让我学会了某某 API 这种没价值的内容。</p>
</blockquote>
<p>另外项目这块还要结合着简历来说，因为面试官问你项目肯定是从简历上得来的问题</p>
<h3 id="职业规划"><a href="#职业规划" class="headerlink" title="职业规划"></a>职业规划</h3><p>这个其实就是想了解你与公司发展的匹配程度如何。假如说你一个写代码的说过几年想做产品了、运营了、创业了，那么可能就有点危险了。只要你讲出符合自己职业的道路即可，比如说想晋级到高工 -&gt; 架构师等等。</p>
<h3 id="你的缺点"><a href="#你的缺点" class="headerlink" title="你的缺点"></a>你的缺点</h3><p>这个问题切记不能回答自己的性格缺陷、能力不行、沟通不好等等，可以说一些工作中遇到的问题。比如说在某次需求评审的时候因为自己没有坚持个人的想法，导致这个需求存在的问题没有解决掉，最后这个项目结果不好没有达到预期等等。</p>
<h3 id="为什么从上家公司离职"><a href="#为什么从上家公司离职" class="headerlink" title="为什么从上家公司离职"></a>为什么从上家公司离职</h3><p>这个问题无论如何都不能说上家公司的任何不好，不管是加班多、上下级问题、与同事之间的矛盾或者其他的情况。</p>
<p>一般就把问题归于自身就行，可以说考虑到自身的职业发展，想去一个更加适合自己成长的公司。</p>
<h3 id="你有什么想问我的"><a href="#你有什么想问我的" class="headerlink" title="你有什么想问我的"></a>你有什么想问我的</h3><p>这个问题确实不怎么好答，相信很多人都被这个问题困扰过,回答没什么想问的呢，可能会给面试官一个你并不想进公司的感觉,瞎问呢又怕惹得面试官不高兴了,其实这个问题问得好的话反而是一个能很好了解对方公司的一个渠道。</p>
<p>以下是一些笔者认为不错的提问，能够很好地了解到对方公司的一些东西，包括开发流程、职业晋升、公司发展等等。大家可以选择性地提出 2 - 3 个感兴趣的问题，这样不仅能帮助到自身了解到公司的一些情况，也能给予面试官一个不错的印象，以下问题针对于技术面：</p>
<ul>
<li>公司常用的技术栈是什么？</li>
<li>你们如何测试代码？</li>
<li>你们如何解决线上故障？</li>
<li>你们如何准备故障恢复？是否有完善的发布机制？</li>
<li>公司是否有技术分享交流活动？有的话，多久一次呢？<br>一次迭代的流程是怎么样的？从 PRD 评审开始到发布这一整个流程。</li>
<li>公司技术团队的架构和人员组成？</li>
<li>有公司级别的学习资源吗？比如电子书订阅或者在线课程？</li>
<li>你们认为和竞品相比有什么优势？</li>
</ul>
<h3 id="谈薪篇"><a href="#谈薪篇" class="headerlink" title="谈薪篇"></a>谈薪篇</h3><p>在面试之前首先要想好自己想要的薪资，假如说你当前薪资为 10K，那么涨幅在 3K 以上是正常的。如果只有 1K - 2K 的涨幅跳槽是没多大意义，毕竟换公司存在成本。另外很多 HR 会压低你的报价，毕竟公司都是有预算的，能省一点是一点，所以我们需要给出一个压价的空间。所以在具体报价的时候你可以给出 14 - 15K 的心理价位，如果对方接受了那么皆大欢喜，如果压价到自己的期望薪资的话也不差。</p>
<p>最后在和 HR 讨论待遇的时候，应该问清楚以下几点：</p>
<ul>
<li>具体的工资（也就是合同上签订的工资），不要杂七杂八什么绩效加起来的那种</li>
<li>五险一金缴纳的比例，这个在交满和不交满的情况下其实是很大一笔收益。交满虽然自己交的也多了，但是大头公积金是能取出来的，医疗保险看病也用得到，只有养老金稍微虚幻了一点</li>
<li>加班是否有加班工资或者调休</li>
<li>是否是 996，我个人很不推荐 996 的公司</li>
<li>加薪升职的情况</li>
<li>其他各种福利，比如餐补、房补、交通补、节假日福利、另外的保险等等，这个算是锦上添花</li>
<li>年终奖如何发放，员工平均能拿到几个月</li>
</ul>
<h3 id="选择-Offer-篇"><a href="#选择-Offer-篇" class="headerlink" title="选择 Offer 篇"></a>选择 Offer 篇</h3><h4 id="校招"><a href="#校招" class="headerlink" title="校招"></a>校招</h4><p>对于校招来说，平台 &gt; 团队 &gt; 其他。在平台差不多的情况下可以去选择更好的团队，但是在平台存在差距的情况下务必要选择平台更大的，职业生涯初期就职的平台越好那么将来也会更顺，即使好的平台工资给的低也不要紧，毕竟这段校招的经历不会长。</p>
<h4 id="社招"><a href="#社招" class="headerlink" title="社招"></a>社招</h4><p>对于社招来说，其实还是看自己缺什么去补什么的。假如说你缺钱，那么可能有更好的平台摆在你面前也会选择给更多钱的一方；假如说你想去个更大的平台，那么可能小平台开的价更高你也不想去；假如说你想通勤近点多陪陪家人，那么远的公司肯定也就不考虑了。</p>
<p>如果你觉得几个条件自己都不缺或者把握不好的，可以参考下笔者的思路：</p>
<ul>
<li>按照权重先这样选择：平台 | 薪资（两者看个人选择） &gt; 团队 &gt; 加班 &amp; 通勤。</li>
<li>钱多有时候不一定好。钱多如果加班也多，那肯定比不过薪资差点但是不加班的公司。另外 HR 和你谈的年终奖也不一定拿得到，说不到到了年终把你裁了呢~</li>
<li>去深入了解下具体要去的团队，可以加个未来上级的微信聊聊，同时也四处询问下这个团队是否靠谱。毕竟一个团队以及直属领导的好坏，会直接影响着你的绩效和晋升空间。</li>
<li>通勤时间，如果你已经有房了，那么通勤时间是需要考虑上的。如果每次通勤需要一小时以上外加公司还要加班的话，其实幸福感会蛮低的。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>面试基础技能篇-CSS,HTML,JS</title>
    <url>/%E9%9D%A2%E8%AF%95%E5%9F%BA%E7%A1%80%E6%8A%80%E8%83%BD%E7%AF%87-CSS,HTML,JS/</url>
    <content><![CDATA[<p>每次会去看红宝书，会去看人家的总结和视频…有时候觉得这些东西很重要，知道要记下来可是没多久就又忘记了。所以还是把它记录在我的博客中吧o(<em>￣︶￣</em>)o</p>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="超出则隐藏并显示省略号"><a href="#超出则隐藏并显示省略号" class="headerlink" title="超出则隐藏并显示省略号"></a>超出则隐藏并显示省略号</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一行：</span><br><span class="line">overflow: hidden;</span><br><span class="line">text-overflow: ellipsis;</span><br><span class="line">white-space: nowrap;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">多行：</span><br><span class="line">overflow: hidden;</span><br><span class="line">text-overflow: ellipsis;</span><br><span class="line">display: -webkit-box;</span><br><span class="line">-webkit-line-clamp: 3;</span><br><span class="line">-webkit-box-orient: vertical;</span><br></pre></td></tr></table></figure>

<h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><p>页面渲染时，dom元素所采用的<em>布局模型</em>,可通过<em>box-sizing</em>来设置，根据计算宽高的区域可分为：</p>
<ul>
<li>content-box (W3C 标准盒模型)</li>
<li>border-box (IE 盒模型)</li>
<li>padding-box</li>
<li>margin-box (浏览器未实现)</li>
</ul>
<h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h3><p><em>块级格式化上下文</em>是一个独立的渲染区域，让处于BFC内部的和外部的元素隔离，使内外元素的定位不会受到相互影响：</p>
<p>触发条件</p>
<ul>
<li>position: absolute/fixed</li>
<li>display: inline-block / table</li>
<li>float 元素</li>
<li>overflow !== visible</li>
</ul>
<p>规则</p>
<ul>
<li>属于同一个 BFC 的两个相邻 Box 垂直排列</li>
<li>属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠</li>
<li>BFC 中子元素的 margin box 的左边， 与包含块 (BFC) border box的左边相接触 (子元素 absolute 除外)</li>
<li>BFC 的区域不会与 float 的元素区域重叠</li>
<li>计算 BFC 的高度时，浮动子元素也参与计算</li>
<li>文字层不会被浮动层覆盖，环绕于周围</li>
</ul>
<p>应用</p>
<ul>
<li>阻止margin重叠</li>
<li>可以包含浮动元素 —— 清除内部浮动(清除浮动的原理是两个div都位于同一个 BFC 区域之中)</li>
<li>自适应两栏布局</li>
<li>可以阻止元素被浮动元素覆盖</li>
</ul>
<h3 id="层叠上下文"><a href="#层叠上下文" class="headerlink" title="层叠上下文"></a>层叠上下文</h3><p>元素提升为一个比较特殊的图层，在三维空间中 <strong>(Z轴)</strong> 高出普通元素：</p>
<p>触发条件</p>
<ul>
<li>html</li>
<li>position</li>
<li>css3属性（flex, transform, opacity, filter, overflow-scrolling）</li>
</ul>
<p>层叠等级：<em>在层叠上下文中</em> 层叠上下文在Z轴上的排序</p>
<p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93-css%E7%AF%87/WechatIMG3.jpeg" alt="cmd-markdown-logo"></p>
<h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><h4 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h4><ul>
<li>行内元素：text-align: center;</li>
<li>块级元素：margin: 0 auto; (宽度要固定);</li>
<li>absolute + transform: translateX(-50%)  left: 50%; (transform等是相对于元素本身;这个left right top bottom 使用百分比是相对于父元素)</li>
<li>flex + justify-content: center;</li>
<li>float + position (父：float + position:relative + left:50%, 子：position:relative +  left: -50%)</li>
<li>父：display:flex + margin:auto;</li>
</ul>
<h4 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h4><ul>
<li>line-height: height;</li>
<li>absolute + transform (left：参考水平居中)；</li>
<li>flex + align-items: center;</li>
<li>display:table-cell + vertical-align:middle</li>
</ul>
<h4 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h4><ul>
<li>absolute + transform;</li>
<li>flex + justify-content + align-items;</li>
<li>父：position:relative + 子：position:absolute;top:50%;left:50%;margin-top:-height/2;margin-left:-width/2;</li>
<li>position:absolute;top:0;left:0;bottom:0;right:0;+margin:auto;</li>
</ul>
<h3 id="两列布局：右边自适应左边固定（左边自适应右边固定float和position都不太适用了。所以还是使用BFC和Flex吧。）"><a href="#两列布局：右边自适应左边固定（左边自适应右边固定float和position都不太适用了。所以还是使用BFC和Flex吧。）" class="headerlink" title="两列布局：右边自适应左边固定（左边自适应右边固定float和position都不太适用了。所以还是使用BFC和Flex吧。）"></a>两列布局：右边自适应左边固定（左边自适应右边固定float和position都不太适用了。所以还是使用BFC和Flex吧。）</h3><h4 id="float"><a href="#float" class="headerlink" title="float:"></a>float:</h4><ul>
<li>子左width: 200px；float: left;</li>
<li>子右margin-left: 210px;</li>
</ul>
<h4 id="position-margin"><a href="#position-margin" class="headerlink" title="position+margin"></a>position+margin</h4><ul>
<li>父：position:relative;</li>
<li>子左：position: absolute;width: 200px;</li>
<li>子右：margin-left:210px;   </li>
</ul>
<h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h4><ul>
<li>父display:flex;</li>
<li>子左margin-right:10px;</li>
<li>子右flex:1;  </li>
</ul>
<h4 id="float-BFC"><a href="#float-BFC" class="headerlink" title="float+BFC"></a>float+BFC</h4><ul>
<li>子左margin-right: 10px;float: left;</li>
<li>子右overflow: hidden;（因为BFC区域不会与float box重叠,所以left这里为float box，使用overflow：hidden;来触发BFC，这样right就不会与left重叠啦）</li>
</ul>
<h3 id="左右两边固定中间自适应"><a href="#左右两边固定中间自适应" class="headerlink" title="左右两边固定中间自适应"></a>左右两边固定中间自适应</h3><h4 id="position-margin实现"><a href="#position-margin实现" class="headerlink" title="position + margin实现"></a>position + margin实现</h4><ul>
<li>父：position: relative;  </li>
<li>子中：margin:0px 210px;height: 200px;    </li>
<li>子左：width: 200px;height: 200px;position: absolute;top:0px;left:0px;   </li>
<li>子右：width: 200px;height: 200px;position: absolute;top:0px;right: 0px; </li>
</ul>
<h4 id="float-margin实现"><a href="#float-margin实现" class="headerlink" title="float + margin实现"></a>float + margin实现</h4><ul>
<li>html中：中间那一个div要放在左右两个盒子的后面      </li>
<li>自/子左：width: 200px;height: 200px; background-color:red;float:left;   </li>
<li>自/子右：width: 200px;height: 200px; background-color:red;float:right   </li>
<li>自/子中：margin: 0 210px;height: 200px; background-color: green;</li>
</ul>
<h4 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h4><ul>
<li>HTML：子中间的要放在左右两边的后面   </li>
<li>父：padding: 0 230px 0 190px;   </li>
<li>子中：float:left;width:100%;height:100px;   </li>
<li>子左：float: left; width: 190px;margin-left: -100%;position: relative;left: -190px;height: 100px;   </li>
<li>子右：float: left;width: 190px;margin-left: -230px;position: relative;right: -230px;background: green; height: 100px; </li>
</ul>
<h4 id="flex-1"><a href="#flex-1" class="headerlink" title="flex"></a>flex</h4><ul>
<li>html:center9要放中间   </li>
<li>父display: flex;   </li>
<li>子中：flex:1;height:100px;background: red;   </li>
<li>子左右width:60px;height: 100px;background: green; </li>
</ul>
<h4 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h4><ul>
<li>html:中间的main-content2用一个div class=”main2”抱起来    </li>
<li>中父：background: red;width:100%;height: 100px;float:left;    </li>
<li>子中margin-left:150px;height: 100%;margin-right:190px;    </li>
<li>子左：background: green;width:150px;height: 100px;float:left;margin-left:-100%;   </li>
<li>子右：background:green;width:190px;height: 100px;float:left;margin-left:-194px;</li>
</ul>
<h3 id="设为-flex-属性之后，子元素的哪些属性会失效"><a href="#设为-flex-属性之后，子元素的哪些属性会失效" class="headerlink" title="设为 flex 属性之后，子元素的哪些属性会失效"></a>设为 flex 属性之后，子元素的哪些属性会失效</h3><p>float、clear 和 vertical-align</p>
<h3 id="选择器优先级"><a href="#选择器优先级" class="headerlink" title="选择器优先级"></a>选择器优先级</h3><ul>
<li>!important &gt; 行内样式 &gt; #id &gt; .class &gt; tag &gt; * &gt; 继承 &gt; 默认</li>
<li>选择器 从右往左 解析</li>
</ul>
<h3 id="去除浮动影响，防止父级高度塌陷"><a href="#去除浮动影响，防止父级高度塌陷" class="headerlink" title="去除浮动影响，防止父级高度塌陷"></a>去除浮动影响，防止父级高度塌陷</h3><ul>
<li>父：clearfloat:after{display:block;clear:both;content:””;} clearfloat{zoom:1}   </li>
<li>平级添加空标签div:clear:both</li>
<li>父级设置高度</li>
<li>父： .div{width:98%;overflow:hidden} </li>
<li>创建父级BFC</li>
</ul>
<h3 id="link-和-import-的区别"><a href="#link-和-import-的区别" class="headerlink" title="link 和 @import 的区别"></a>link 和 @import 的区别</h3><ul>
<li>link功能较多，可以定义 RSS，定义 Rel 等作用，而@import只能用于加载 css</li>
<li>当解析到link时，页面会同步加载所引的 css，而@import所引用的 css 会等到页面加载完才被加载</li>
<li>@import需要 IE5 以上才能使用</li>
<li>link可以使用 js 动态引入，@import不行</li>
</ul>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul>
<li>Boolean</li>
<li>Number</li>
<li>String</li>
<li>Null</li>
<li>Undefined</li>
<li>Symbol (ECMAScript 6 新定义)</li>
<li>Object</li>
</ul>
<p>(ES6之前)其中5种为基本类型:string,number,boolean,null,undefined，ES6出来的Symbol也是原始数据类型(表示独一无二的值)。Object 为引用类型(范围挺大，也包括数组、函数)</p>
<h3 id="typeof-判断基本类型，-instanceof-判断引用类型"><a href="#typeof-判断基本类型，-instanceof-判断引用类型" class="headerlink" title="typeof 判断基本类型， instanceof 判断引用类型"></a>typeof 判断基本类型， instanceof 判断引用类型</h3><p>基本类型的判断 <code>typeof</code>：</p>
<ul>
<li><p>可以判断是哪种基本数据类型，null除外</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typeof(null) //object 这是浏览器的Bug</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以判断是否为函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typeof function()&#123;&#125; // &apos;function&apos;</span><br></pre></td></tr></table></figure>
</li>
<li><p>可以判断是否为引用类型</p>
</li>
</ul>
<p>引用类型的判断 <code>instanceof</code>(xxx instanceof Object),如：</p>
<p>数组：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1,2] instanceof Object // true</span><br></pre></td></tr></table></figure>

<p>null：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">null instanceof Object  // false</span><br></pre></td></tr></table></figure>

<p>使用typeof可以可以区别基本类型和引用类型，但是不太准确(如：typeof null 也为 Object),但是使用 instanceof 就不会了</p>
<h3 id="引用类型相等判断"><a href="#引用类型相等判断" class="headerlink" title="引用类型相等判断"></a>引用类型相等判断</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let obj1 = &#123;</span><br><span class="line">    name: &apos;lzzhy&apos;,</span><br><span class="line">    age: 18</span><br><span class="line">&#125;</span><br><span class="line">let obj2 = &#123;</span><br><span class="line">    name: &apos;lzzhy&apos;,</span><br><span class="line">    age: 18</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(obj1 == obj2)  // false</span><br></pre></td></tr></table></figure>

<p>敲黑板：因为引用类型的比较实际上是判断他们的引用地址是否相等</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let obj2 = obj1</span><br><span class="line">console.log(Object.is(obj1,obj2))  // true</span><br></pre></td></tr></table></figure>

<p>因为将obj1赋给了obj2，就相当于两个的地址相同了。</p>
<h3 id="undefined、null、NaN-特殊基础数据类型判断"><a href="#undefined、null、NaN-特殊基础数据类型判断" class="headerlink" title="undefined、null、NaN 特殊基础数据类型判断"></a>undefined、null、NaN 特殊基础数据类型判断</h3><p>null 和 undefined 的区别：</p>
<ul>
<li>null 转为数值时为0；undefined 转为数值时为NaN;</li>
<li>null 表示‘没有对象’，即该处不应该有值；undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义；</li>
</ul>
<p>判断 undefined:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let lzzhy = undefined;</span><br><span class="line">console.log(typeof(lzzhy) === &apos;undefined&apos;)  // true</span><br></pre></td></tr></table></figure>

<p>判断 null:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let lzzhy = null;</span><br><span class="line">console.log(lzzhy === null)  // true</span><br></pre></td></tr></table></figure>

<p>判断 NaN:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let lzzhy = NaN;</span><br><span class="line">console.log(isNaN(lzzhy))  // true</span><br><span class="line"></span><br><span class="line">&lt;!-- 因为 NaN 是 JavaScript 之中唯一不等于自身的值，所以也可以如下判断 --&gt;</span><br><span class="line"></span><br><span class="line">var aaa = NaN;</span><br><span class="line">console.log(aaa !== aaa);  // true</span><br><span class="line"></span><br><span class="line">&lt;!-- Object.is相当于==== --&gt;</span><br><span class="line"></span><br><span class="line">Object.is(NaN,NaN)  // true</span><br></pre></td></tr></table></figure>

<h3 id="隐式转换-变量转换成数字或者字符串"><a href="#隐式转换-变量转换成数字或者字符串" class="headerlink" title="隐式转换(变量转换成数字或者字符串)"></a>隐式转换(变量转换成数字或者字符串)</h3><p>变量 num 转换成数字：<code>num - 0</code></p>
<p>变量 num 转换成字符串：<code>num + &#39;&#39;</code></p>
<h3 id="基本数据类型和引用类型的区别"><a href="#基本数据类型和引用类型的区别" class="headerlink" title="基本数据类型和引用类型的区别"></a>基本数据类型和引用类型的区别</h3><p>在内存中的存储方式不同，原始数据类型在内存中是栈存储(栈（stack）为自动分配的内存空间，它由系统自动释放)，引用类型是堆存储(堆（heap）则是动态分配的内存，大小不定也不会自动释放)</p>
<p>原始数据类型是 传值 ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let a = 10</span><br><span class="line">let b = a</span><br><span class="line">a = 20</span><br><span class="line">console.log(b) // 20</span><br></pre></td></tr></table></figure>

<p>引用类型是 传地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let a = &#123;age: 12&#125;</span><br><span class="line">let b = a</span><br><span class="line">b.age = 20</span><br><span class="line">console.log(a.age) // 20</span><br></pre></td></tr></table></figure>

<h3 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h3><p>JSON：本质是一个字符串，形式<code>&#39;{&quot;a&quot;: &quot;hello&quot;,&quot;b&quot;:&quot;world&quot;}&#39;</code>。和对象的区别是：对象的key值不用引号。</p>
<p>浅拷贝：只复制某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。因此修改时原对象也会受到影响。</p>
<ul>
<li>Object.assign(当复制复杂的对象是会造成一些数据丢失，因为复制的只是地址，而不是内容)</li>
<li>展开运算符（…）</li>
</ul>
<p>深拷贝：会创造另一个一模一样的对象，新对象跟原来的对象不共享内存。因此修改时原对象不受到影响。</p>
<ul>
<li>JSON.parse(JSON.stringify(obj))(但是如果里面有 function 和 undefined 不可用)</li>
<li>lodash.cloneDeep（是个库，要使用的话得先引入）  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var objects = [&#123; &apos;a&apos;: 1 &#125;, &#123; &apos;b&apos;: 2 &#125;];</span><br><span class="line">var deep = lodash.cloneDeep(objects);</span><br><span class="line">console.log(deep[0] === objects[0]);  // =&gt; false</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="面向对象程序设计及其要素"><a href="#面向对象程序设计及其要素" class="headerlink" title="面向对象程序设计及其要素"></a>面向对象程序设计及其要素</h3><p>面向对象程序设计（Object-oriented programming，简称：OOP），维基百科给出的定义是：是一种程序设计泛型，同时也是一种程序开发的方法。对象指的是类的实例。它将对象作为程序的基本单元，将程序和数据封装其中，以提高软件的重用性、灵活性和扩展性。</p>
<p>继承、封装、多态、抽象</p>
<h3 id="能够简单的说明面向对象和面向过程的区别吗"><a href="#能够简单的说明面向对象和面向过程的区别吗" class="headerlink" title="能够简单的说明面向对象和面向过程的区别吗"></a>能够简单的说明面向对象和面向过程的区别吗</h3><p><code>面向过程</code>：就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。（比如：例如蛋炒饭，面向过程的设计思路就是首先分析问题的步骤：1、先放油，2、把鸡蛋搅拌，3、把鸡蛋倒进锅里炒熟，4、把鸡蛋盛起来，5、在倒油在锅里，6、把饭倒进去炒，7、把炒好的鸡蛋倒进去，8、放盐等其他作料，9、盛出来放到碗里。把上面每个步骤用分别的函数来实现，问题就解决了。），每一个步骤就是一个函数。</p>
<p><code>面向对象</code>：是以功能来划分问题，而不是步骤。（如：整个蛋炒饭可以分为 1、先把蛋炒好盛出来，2、把饭炒好，3、把蛋和饭放锅里搅拌。）每一个模块都可以看做是一个对象。如蛋炒饭的 炒蛋 对象，炒饭 对象，搅拌 对象。每一个对象都是为了完成一个功能，而每一个功能就是一个函数。</p>
<h3 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h3><p>根据维基百科给出的对于面向对象程序设计（Object-oriented programming，简称：OOP）的定义，其中指明：对象指的是类的实例，也就是：类（如：人）是对象（如：具体的某个人）的模板，定义了同一组对象共有的属性和方法</p>
<h3 id="一句话概括什么是promise"><a href="#一句话概括什么是promise" class="headerlink" title="一句话概括什么是promise"></a>一句话概括什么是promise</h3><p>Promise对象用于异步操作，它表示一个尚未完成且预计在未来完成的异步操作。</p>
<h3 id="执行上下文：可以简单理解为一个对象"><a href="#执行上下文：可以简单理解为一个对象" class="headerlink" title="执行上下文：可以简单理解为一个对象"></a>执行上下文：可以简单理解为一个对象</h3><p>包含三个部分：</p>
<ul>
<li>变量对象(VO)</li>
<li>作用域链(词法作用域)</li>
<li>this指向</li>
</ul>
<p>类型：</p>
<ul>
<li>全局执行上下文</li>
<li>函数执行上下文</li>
<li>eval执行上下文</li>
</ul>
<p>代码执行过程：</p>
<ul>
<li>创建全局上下文(global EC)</li>
<li>全局执行上下文 (caller) 逐行自上而下执行。遇到函数时，函数执行上下文被push到执行栈顶层</li>
<li>函数执行上下文被激活，成为 active EC, 开始执行函数中的代码，caller 被挂起</li>
<li>函数执行完后，callee 被pop移除出执行栈，控制权交还全局上下文 (caller)，继续执行</li>
</ul>
<h3 id="原型-构造函数-实例-三者之间的关系"><a href="#原型-构造函数-实例-三者之间的关系" class="headerlink" title="原型/构造函数/实例 三者之间的关系"></a>原型/构造函数/实例 三者之间的关系</h3><ul>
<li>原型（prototype）：我们创建的每一个函数，都可以有一个prototype属性，该属性指向一个对象。这个对象，就是原型。<br>  <code>特殊情况：原型并不是每个都有的，如假设通过let zzhy = Object.create(null)创建,并且传入的参数为null 那么该lzzhy上是没有原型的</code></li>
<li>构造函数：可以通过new来 新建一个对象 的函数,构造函数拥有一个prototype的属性指向原型</li>
<li>实例： 通过构造函数和new创建出来的对象，便是实例。 实例通过<strong>proto</strong>指向原型，通过constructor指向构造函数。</li>
</ul>
<p>以上是一个比较通俗的定义，可能有点懵逼，这里来举个栗子，以Object为例，我们常用的Object便是一个构造函数，因此我们可以通过它构建实例。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 实例</span><br><span class="line">const instance = new Object()</span><br></pre></td></tr></table></figure>

<p>则此时，实例为instance, 构造函数为Object，我们知道，构造函数拥有一个prototype的属性指向原型，因此原型为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 原型</span><br><span class="line">const prototype = Object.prototype</span><br></pre></td></tr></table></figure>

<p>这里我们可以来看出三者的关系:</p>
<ul>
<li>实例.<strong>proto</strong> === 原型</li>
<li>原型.constructor === 构造函数</li>
<li>构造函数.prototype === 原型</li>
<li>实例.constructor === 构造函数</li>
</ul>
<p>这条线其实是是基于原型进行获取的，可以理解成一条基于原型的映射线，例如: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const o = new Object()</span><br><span class="line">o.constructor === Object   --&gt; true</span><br><span class="line">o.__proto__ = null;  // 将原型设置为null</span><br><span class="line">o.constructor === Object   --&gt; false</span><br></pre></td></tr></table></figure>

<p>相关关系如下图：<br><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93-css%E7%AF%87/WechatIMG4.jpeg" alt="cmd-markdown-logo"></p>
<p>Object.prototype就是原型链上最顶端的,在上去就是null了，而原型链上的那些hasOwnProperty,valueOf,toString。。。这些方法就是在Object.prototype上的</p>
<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>原型链的访问跟作用域链有很大的相似之处，他们都是一次单向的查找过程：</p>
<ul>
<li>属性查找机制: 当查找对象的属性时，如果实例对象自身不存在该属性，则沿着原型链往上一级查找，找到时则输出，不存在时，则继续沿着原型链往上一级查找，直至最顶级的原型对象Object.prototype，如还是没找到，则输出undefined；</li>
<li>属性修改机制: 只会修改实例对象本身的属性，如果不存在，则进行添加该属性，如果需要修改原型的属性时，则可以用: 构造函数b.prototype.属性x = value值（但是这样会造成所有继承于该对象的实例的属性发生改变）；</li>
</ul>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>作用域可以理解为该上下文中声明的变量和声明的作用范围。可分为<code>块级作用域</code>和<code>函数作用域</code>。</p>
<p>特性</p>
<ul>
<li>声明提前: 一个声明在函数体内都是可见的, 函数优先于变量</li>
<li>非匿名自执行函数，函数变量为<em>只读</em>状态，无法修改</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let foo = function() &#123; console.log(1) &#125;;</span><br><span class="line">(function foo() &#123;</span><br><span class="line">    foo = 10  // 由于foo在函数中只为可读，因此赋值无效</span><br><span class="line">    console.log(foo)</span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line">// 结果打印：ƒ foo() &#123;</span><br><span class="line">    foo = 10  </span><br><span class="line">    console.log(foo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>作用域链的作用是保证执行环境里有权访问的变量和函数是有序的，作用域链的变量只能向上访问，变量访问到window对象即被终止，作用域链向下访问变量是不被允许的。</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>在ES5中继承有<code>原型链继承</code>和<code>Object create</code>两种继承方式，如有以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Person()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">function Student()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>原型链继承</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Student.prototype = new Person();    // 通过new继承</span><br></pre></td></tr></table></figure>

<p>缺点：<br>修改sub1.name后sub2.name也变了，因为来自原型对象的引用属性是所有实例共享的。</p>
<p><code>Object create</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Student.prototype = Object create(Person prototype)</span><br></pre></td></tr></table></figure>

<p>在ES6中实现类，并与通过类来实现继承：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 实现 People 父类 --&gt;</span><br><span class="line"></span><br><span class="line">class People &#123;  // class关键字定义类（只是个语法糖）</span><br><span class="line">    constructor(name, age) &#123;  // 构造函数 中写属性</span><br><span class="line">        this.name = name</span><br><span class="line">        this.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;!-- 对象的方法定义在下面 --&gt;</span><br><span class="line">    showName() &#123;</span><br><span class="line">        console.log(this.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 子类Coder 通过 extends 来继承父类 --&gt;</span><br><span class="line"></span><br><span class="line">class Coder extends People &#123;  // coder继承父类</span><br><span class="line">    constructor(name,age,company) &#123;</span><br><span class="line">        super(name,age)  // 通过super来继承属性</span><br><span class="line">        this.company = company</span><br><span class="line">    &#125;</span><br><span class="line">    showCompany() &#123;</span><br><span class="line">        console.log(&apos;1&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 使用类中的属性和方法 --&gt;</span><br><span class="line"></span><br><span class="line">let c1 = new Coder(&apos;lzzhy&apos;,18,&apos;bat&apos;)  // Coder &#123;name: &quot;lzzhy&quot;, age: 18, company: &quot;bat&quot;&#125;</span><br><span class="line">c1.showName()  // lzzhy 父类已经继承了</span><br><span class="line">c1.showCompany()  // 1 子类自己的方法也有</span><br></pre></td></tr></table></figure>

<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>指有权访问另一个函数作用域中的变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量。闭包本质还是函数，只不过这个函数绑定了上下文环境（函数内部引用的所有变量）</p>
<p>产生的问题：</p>
<ul>
<li>空间浪费</li>
<li>内存泄露</li>
<li>性能消耗</li>
</ul>
<p>三个特性：</p>
<ul>
<li>函数嵌套函数</li>
<li>函数内部可以引用外部的参数和变量</li>
<li>参数和变量不会被垃圾回收机制回收</li>
</ul>
<h3 id="call、apply、bind的区别"><a href="#call、apply、bind的区别" class="headerlink" title="call、apply、bind的区别"></a>call、apply、bind的区别</h3><ul>
<li><p>都是用来改变函数的this的指向的</p>
</li>
<li><p>通过bind可以实现<code>函数柯里化</code></p>
</li>
<li><p>第一个参数都是this要指向的对象，也就是想指定的上下文。如：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function foo(x,y) &#123;</span><br><span class="line">    console.log(x,y,this)</span><br><span class="line">&#125;</span><br><span class="line">foo.call(100,1,2)  // 1 2 Number &#123;100&#125;。 因为bind,call,apply的第一个参数都是指向this的对象，所以100是指向this的指向，1,2才是传入foo的x=1,y=2</span><br></pre></td></tr></table></figure>
</li>
<li><p>call 传入的参数数量不固定，第二部分参数要一个一个传，用‘，’隔开</p>
</li>
<li><p>apply 接受两个参数，第二个参数为一个带下标的集合，可以是数组、类数组</p>
</li>
<li><p>bind 是返回了一个改变上下文的函数副本，便于稍后调用（可以在后面加个括号变成立即执行函数）；apply,call则是立即调用</p>
</li>
</ul>
<h3 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h3><p>定义：是一种将使用多个参数的一个函数转换为一系列使用一个参数的函数的技术。通常可以在不入侵函数的前提下，为函数预置通用参数，供多次重复调用。</p>
<p>目的：减少代码冗余，以及提高代码可读性。</p>
<p>应用，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function sum(a,b,c)&#123;</span><br><span class="line">    return a+b+c;</span><br><span class="line">&#125;</span><br><span class="line">let func = add.bind(undefined,100)  // 使用bind的话第一个参数是改变this指向的对象，所以100才真正的参数所以a固定=100。</span><br><span class="line"></span><br><span class="line">func(1,2)  // 所以b=1,c=2  100+1+2=103</span><br><span class="line"></span><br><span class="line">let func2 = func.bind(undefined,200)  // 同理，但因为上面以及把100赋值给a了，所以这个200赋值给b,b固定=200</span><br><span class="line"></span><br><span class="line">func2(10) // 所以这个10是参数c  100+200+10=310</span><br></pre></td></tr></table></figure>

<h3 id="new运算符具体执行过程"><a href="#new运算符具体执行过程" class="headerlink" title="new运算符具体执行过程"></a>new运算符具体执行过程</h3><ul>
<li>创建一个新对象</li>
<li>链接到原型：obj.<em>proto</em>= Con.prototype</li>
<li>绑定this: apply</li>
<li>返回新对象（如果构造函数自己有return时，则返回该值）</li>
</ul>
<h3 id="代码复用"><a href="#代码复用" class="headerlink" title="代码复用"></a>代码复用</h3><p>当发现任何代码开始写第二遍时，就要开始考虑如何复用。一般有以下几种方式：</p>
<ul>
<li>函数封装</li>
<li>继承</li>
<li>复制 extend</li>
<li>混入 mixin</li>
<li>借用 apply/call</li>
</ul>
<h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><ul>
<li>new构造函数中：若函数中没有返回的话就指向里面的这个值，若有返回并且不是基础类型那么this指向这个基础值。（指向实例化对象）</li>
</ul>
<h3 id="防抖与节流"><a href="#防抖与节流" class="headerlink" title="防抖与节流"></a>防抖与节流</h3><p>防抖与节流函数是一种最常用的 <strong>高频触发优化方式，对性能</strong>有较大的帮助。</p>
<ul>
<li>防抖 (debounce): 一直触发但只会执行一次。通常使用的场景是：用户输入，只需再输入完成后做一次输入校验即可。 </li>
</ul>
<p>实现方式：每次触发事件时设置一个延迟调用方法，并且取消之前的延时调用方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function debounce(fn, wait, immediate) &#123;</span><br><span class="line">    let timer = null  // 创建一个标记用来存放定时器的返回值</span><br><span class="line"></span><br><span class="line">    return function() &#123;</span><br><span class="line">        let args = arguments</span><br><span class="line">        let context = this</span><br><span class="line"></span><br><span class="line">        if (immediate &amp;&amp; !timer) &#123;</span><br><span class="line">            fn.apply(context, args)</span><br><span class="line">        &#125;</span><br><span class="line">		// 每当用户输入的时候把前一个 setTimeout clear 掉</span><br><span class="line">        if (timer) clearTimeout(timer) </span><br><span class="line"></span><br><span class="line">		// 然后又创建一个新的 setTimeout, 这样就能保证interval 间隔内如果时间持续触发，就不会执行 fn 函</span><br><span class="line">        timer = setTimeout(() =&gt; &#123;</span><br><span class="line">            fn.apply(context, args)</span><br><span class="line">        &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>节流(throttle): 一直触发但是每隔一段时间执行一次。通常使用场景: 滚动条事件或者 resize 事件，通常每隔 100~500 ms执行一次即可。</li>
</ul>
<p>实现方式：每次触发事件时，如果当前有等待执行的延时函数，则直接return</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function throttle(fn, wait, immediate) &#123;</span><br><span class="line">    let timer = null</span><br><span class="line">    let callNow = immediate</span><br><span class="line">    </span><br><span class="line">    return function() &#123;</span><br><span class="line">        let context = this,</span><br><span class="line">            args = arguments</span><br><span class="line"></span><br><span class="line">        if (callNow) &#123;</span><br><span class="line">            fn.apply(context, args)</span><br><span class="line">            callNow = false</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!timer) &#123;</span><br><span class="line">            timer = setTimeout(() =&gt; &#123;</span><br><span class="line">                fn.apply(context, args)</span><br><span class="line">                timer = null</span><br><span class="line">            &#125;, wait)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组-array"><a href="#数组-array" class="headerlink" title="数组(array)"></a>数组(array)</h3><p>数组是值的有序集合，JS 中的数组是<code>弱类型</code>（其实javascript就是一门弱类型语言：弱类型指的是数据类型可以被忽略的语言。它与强类型语言相反，一个变量可以赋不同数据类型的值）的。</p>
<p>判断是否为数组 <code>Array.isArray</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let lzz = []</span><br><span class="line">Array.isArray(lzz)  // true</span><br></pre></td></tr></table></figure>

<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>filter：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const roleCode = this.roleListData.filter(item =&gt; item.rolename === this.addRoleForm.rolename)[0]  // this.roleListData：下拉列表的数据。this.addRoleForm.rolename：需要匹配的值。</span><br></pre></td></tr></table></figure>

<h4 id="操作数据"><a href="#操作数据" class="headerlink" title="操作数据"></a>操作数据</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 初始数据 --&gt;</span><br><span class="line"></span><br><span class="line">let arrs = []</span><br><span class="line">arrs[0] = 1</span><br><span class="line">arrs[1] = 9   // arrs：1，9</span><br></pre></td></tr></table></figure>

<p>在数组最前面插入 <code>unshift</code>(改变原数组)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arrs.unshift(8)  // arrs：8，1，9</span><br></pre></td></tr></table></figure>

<p>数组转化为字符串 <code>join</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arrs.join(&apos;,&apos;) // 输出结果为&quot;8,1,9&quot;，若括号中没写的话默认用 &apos;,&apos; 隔开</span><br></pre></td></tr></table></figure>

<p>将数组逆序倒过来 <code>reverse</code> (改变原数组)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arrs.reverse()  // 9,1</span><br></pre></td></tr></table></figure>

<p>排序<code>sort</code> (改变原数组)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arrs.sort()  // 1,9  sort是会先转成字符串在来排序</span><br></pre></td></tr></table></figure>

<p>数组合并<code>concat</code> (不修改原数组)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arrs.concat(7,8)  // [1,9,7,8]</span><br><span class="line"></span><br><span class="line">arrs.concat([19,21],16)  // [1, 9, 19, 21, 16] 会将数组铺平，但是只会铺平一次</span><br><span class="line"></span><br><span class="line">arrs.concat([2,3,[62,32]])  // [1, 9, 2, 3, [62,43]] 因为只会铺平一次所以这样</span><br></pre></td></tr></table></figure>

<p>数组拆解 <code>flat</code>: 如let arrs = [2,3,[62,32],[[1,2],66]]  // [2, 3, 62, 32, [1, 2], 66]  (和concat一样只会铺平一层)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Array.prototype.flat = function() &#123;</span><br><span class="line">    return this.toString().split(&apos;,&apos;).map(item =&gt; +item )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回部分数组 <code>slice</code>（不会修改原数组） ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slice 的第一个参数表示下标（可以取这个值），第二个参数为正数的话就从左开始数为负数就从右边开始数（但是不包括这个下标值）</span><br><span class="line">var lzzhy = [1,2,3,4,5]</span><br><span class="line">lzzhy.alice(1,3) // [2,3]   </span><br><span class="line">lzzhy.slice(1)  // [2,3,4,5]</span><br><span class="line">lzzhy.slice(1,-1)  // [2,3,4]</span><br><span class="line">lzzhy.slice(-4,-3)  // [2]</span><br></pre></td></tr></table></figure>

<p>拼接数组 <code>splice</code>(修改原数组) ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var aaa = [1,2,3,4,5]</span><br><span class="line"></span><br><span class="line">&lt;!-- 一个参数：指从这个下标开始的值都删除 --&gt;</span><br><span class="line">aaa.splice(2)  // [3,4,5]</span><br><span class="line">aaa  // [1,2]</span><br><span class="line"></span><br><span class="line">&lt;!-- 两个参数：第一个参数表示下标，第二个参数表示从第一个参数开始数要删除的个数 --&gt;</span><br><span class="line">aaa.splice(2,2)  // [3,4]</span><br><span class="line">aaa  // 1,2,5</span><br><span class="line"></span><br><span class="line">&lt;!-- 替换 --&gt;</span><br><span class="line">aaa.splice(1,1,&apos;a&apos;,&apos;b&apos;)  // aaa: [1,&apos;a&apos;,&apos;b&apos;,3,4,5]</span><br></pre></td></tr></table></figure>

<h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><p>BOM：(Brower Object Model)是指浏览器对象模型，是用于描述对象与对象之间层次关系的模型，浏览器模型提供了独立于内容的，可以与浏览器窗口进行互动的对象结构，BOM 由多个对象组成，其中代表浏览器窗口的 window 对象是 BOM 的顶层对象，其他对象都是给对象的子对象。</p>
<h3 id="比较-HTML-XML-XHTML-和-JSON"><a href="#比较-HTML-XML-XHTML-和-JSON" class="headerlink" title="比较 HTML XML XHTML 和 JSON"></a>比较 HTML XML XHTML 和 JSON</h3><ul>
<li>HTML（HyperText Markup Language / 超文本标记语言）：用来描述和定义 网络内容的标记语言，超文本的意思是说，除了能标 记本文还能标记 图片，视频，链接 等其他内容</li>
<li>XML（Extensible Markup Language / 可扩展标记语言）：表现就是给一堆文档加上标签，说明里面的数据是什么意思，方便存储、传输、分享数据，常用作配置文件。和 HTML 的区别是 HTML 的标签是预定义的，XML 是可扩展的 。XHTML: Extensible Hypertext Markup Language / 可扩展超文本标记语，其实就是 HTML 的严格语法形式，约定了 属性名必需小写，空元素必需关闭，元素名小写，属性名必需加引号，布尔类型必需加属性值。</li>
<li>JSON（Javascript Object Notation）：比较轻量级的数据交换格式，由键值对组成，数据格式比较简单, 易于读写, 格式都是压缩的, 占用带宽小。用于 AJAX 传输数据</li>
</ul>
<h3 id="浏览器架构"><a href="#浏览器架构" class="headerlink" title="浏览器架构"></a>浏览器架构</h3><ul>
<li>用户界面</li>
<li>主进程</li>
<li>内核<ul>
<li>渲染引擎</li>
<li>JS引擎<ul>
<li>执行栈</li>
</ul>
</li>
<li>事件触发线程<ul>
<li>消息队列<ul>
<li>微任务</li>
<li>宏任务</li>
</ul>
</li>
</ul>
</li>
<li>网络异步线程</li>
<li>定时器线程</li>
</ul>
</li>
</ul>
<h3 id="浏览器下事件循环-Event-Loop"><a href="#浏览器下事件循环-Event-Loop" class="headerlink" title="浏览器下事件循环(Event Loop)"></a>浏览器下事件循环(Event Loop)</h3><p>正确的一次 Event Loop 是这样的：</p>
<ul>
<li>执行同步代码，这属于宏任务</li>
<li>执行栈为空，查询是否有微任务需要执行</li>
<li>执行所以微任务</li>
<li>必要的话渲染UI</li>
<li>然后开始下一轮的 Event Loop，执行宏任务中的异步代码</li>
</ul>
<p>微任务 microtask(jobs): promise，process.nextTick</p>
<p>宏任务 macrotask(task): script，setTimout， setInterval</p>
<h3 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h3><p>前端路由：指不同路由获取不同的文件资源</p>
<p>包括两种方式：hash模式，history模式</p>
<ul>
<li>hash模式：通过监听 hashchange 来实现</li>
<li>history模式：通过监听 pushStatus,popStatus,replaceStatus 来实现</li>
</ul>
<h3 id="DNS-解析过程"><a href="#DNS-解析过程" class="headerlink" title="DNS 解析过程"></a>DNS 解析过程</h3><p>获取流程：DNS是应用层协议，事实上他是为其他应用层协议工作的，包括不限于HTTP和SMTP以及FTP，用于将用户提供的主机名解析为ip地址。<br>具体过程如下：</p>
<ul>
<li>用户主机上运行着DNS的客户端，就是我们的PC机或者手机客户端运行着DNS客户端了</li>
<li>浏览器将接收到的url中抽取出域名字段，就是访问的主机名，比如<br><a href="http://www.baidu.com/" target="_blank" rel="noopener">http://www.baidu.com/</a><br>, 并将这个主机名传送给DNS应用的客户端</li>
<li>DNS客户机端向DNS服务器端发送一份查询报文，报文中包含着要访问的主机名字段（中间包括一些列缓存查询以及分布式DNS集群的工作）</li>
<li>该DNS客户机最终会收到一份回答报文，其中包含有该主机名对应的IP地址</li>
<li>一旦该浏览器收到来自DNS的IP地址，就可以向该IP地址定位的HTTP服务器发起TCP连接</li>
</ul>
<h3 id="三次握手，四次挥手"><a href="#三次握手，四次挥手" class="headerlink" title="三次握手，四次挥手"></a>三次握手，四次挥手</h3><p>三次握手：建立连接前，客户端和服务端需要通过握手来确认对方:</p>
<ul>
<li>客户端发送 syn(同步序列编号) 请求，进入 syn_send 状态，等待确认</li>
<li>服务端接收并确认 syn 包后发送 syn+ack 包，进入 syn_recv 状态</li>
<li>客户端接收 syn+ack 包后，发送 ack 包，双方进入 established 状态</li>
</ul>
<p>四次挥手：</p>
<ul>
<li>客户端 – FIN –&gt; 服务端， FIN—WAIT</li>
<li>服务端 – ACK –&gt; 客户端， CLOSE-WAIT</li>
<li>服务端 – ACK,FIN –&gt; 客户端， LAST-ACK</li>
<li>客户端 – ACK –&gt; 服务端，CLOSED</li>
</ul>
<h3 id="从输入-url-到展示的过程"><a href="#从输入-url-到展示的过程" class="headerlink" title="从输入 url 到展示的过程"></a>从输入 url 到展示的过程</h3><ul>
<li>DNS 解析</li>
<li>TCP三次握手</li>
<li>发送请求，分析url，设置请求报文（头，主体）</li>
<li>服务器返回请求的文件（html）</li>
<li>浏览器渲染<ul>
<li>HTML =&gt; DOM<ul>
<li>标计划算法，进行元素状态的标记</li>
<li>dom 树构建</li>
</ul>
</li>
<li>CSS =&gt; Style tree<ul>
<li>解析css代码，生成样式树</li>
</ul>
</li>
<li>attachment =&gt; Render Tree<ul>
<li>结合dom树和style树，生成渲染树</li>
</ul>
</li>
<li>布局</li>
<li>像素绘制页面</li>
</ul>
</li>
</ul>
<h3 id="重绘与回流"><a href="#重绘与回流" class="headerlink" title="重绘与回流"></a>重绘与回流</h3><p>重绘： 当元素样式的改变不影响布局时，浏览器将使用重绘对元素进行更新，此时只需对UI层面进行绘制更新。因此损耗较少。</p>
<p>回流： 当元素的尺寸、结构会触发某些属性时，浏览器会重新渲染页面，成为回流。此时浏览器需要进行重新计算，计算后还要重新布局页面，因此是较重的操作，会触发回流的操作如下：</p>
<ul>
<li>页面初次渲染</li>
<li>浏览器窗口大小改变</li>
<li>元素尺寸，位置，内容发生变化</li>
<li>元素字体大小的变化</li>
<li>添加或者删除可见的 dom 元素</li>
<li>激活 CSS 伪类（例如：:hover）</li>
<li>查询某些属性或调用某些方法（egg: clientWidth,offsetWidth,scrollWidth…）</li>
</ul>
<p>回流必定触发重绘，重绘不一定触发回流，重绘开销少，回流代价高。</p>
<p>最佳实践：</p>
<ul>
<li>CSS <ul>
<li>避免使用table布局</li>
<li>将动画效果应用到position属性为absolute或fixed的元素上</li>
</ul>
</li>
<li>JS<ul>
<li>避免频繁操作样式，可汇总后统一 一次修改</li>
<li>尽量使用class进行样式修改</li>
<li>减少dom的增删次数，可使用字符串或documentFragment一次插入</li>
<li>极限优化时，修改样式可将其display: none后修改</li>
<li>避免多次触发上面提到的那些会触发回流的方法，可以的话尽量用 变量存住</li>
</ul>
</li>
</ul>
<h3 id="存储（sessionStorage，localStorage，cookie）"><a href="#存储（sessionStorage，localStorage，cookie）" class="headerlink" title="存储（sessionStorage，localStorage，cookie）"></a>存储（sessionStorage，localStorage，cookie）</h3><ul>
<li>短暂性存储： 我们只需要将数据存在内存中，只在运行时可用</li>
<li>持久性存储： 可以分为 浏览器端 与 服务器端<ul>
<li>浏览器： <ul>
<li>cookie: 通常用于存储用户身份，登录状态等(http 中自动携带， 体积上限为 4K， 可自行设置过期时间)</li>
<li>localStorage / sessionStorage: 长久储存/窗口关闭删除， 体积限制为 4~5M</li>
<li>indexDB</li>
</ul>
</li>
<li>服务端：<ul>
<li>分布式缓存 redis</li>
<li>数据库</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="服务端与网络"><a href="#服务端与网络" class="headerlink" title="服务端与网络"></a>服务端与网络</h2><h3 id="http-https协议"><a href="#http-https协议" class="headerlink" title="http/https协议"></a>http/https协议</h3><ul>
<li><p>1.0 协议缺陷：</p>
<ul>
<li>无法复用链接完成即断开，重新慢启动和 TCP 3次握手。</li>
<li>head of line blocking: 线头阻塞，导致请求之间互相影响</li>
</ul>
</li>
<li><p>1.1改进</p>
<ul>
<li>长连接(默认 keep-alive)，复用</li>
<li>host 字段指定对应的虚拟站点</li>
<li>新增功能:<ul>
<li>断点续传</li>
<li>身份认证</li>
<li>状态管理</li>
<li>cache 缓存<ul>
<li>Cache-Control</li>
<li>Expires</li>
<li>Last-Modified</li>
<li>Etag</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>2.0</p>
<ul>
<li>多路复用</li>
<li>二进制分帧层: 应用层和传输层之间</li>
<li>首部压缩</li>
<li>服务端推送</li>
</ul>
</li>
<li><p>https: 较为安全的网络传输协议</p>
<ul>
<li>证书(公钥)</li>
<li>SSL 加密</li>
<li>端口 443</li>
</ul>
</li>
<li><p>TCP:</p>
<ul>
<li>三次握手</li>
<li>四次挥手</li>
<li>滑动窗口: 流量控制</li>
<li>拥塞处理<ul>
<li>慢开始</li>
<li>拥塞避免</li>
<li>快速重传</li>
<li>快速恢复</li>
</ul>
</li>
</ul>
</li>
<li><p>缓存策略: 可分为 强缓存 和 协商缓存</p>
<ul>
<li>Cache-Control/Expires: 浏览器判断缓存是否过期，未过期时，直接使用强缓存，Cache-Control的 max-age 优先级高于 Expires</li>
<li>当缓存已经过期时，使用协商缓存<ul>
<li>唯一标识方案: Etag(response 携带) &amp; If-None-Match(request携带，上一次返回的 Etag): 服务器判断资源是否被修改，</li>
<li>最后一次修改时间: Last-Modified(response) &amp; If-Modified-Since (request，上一次返回的Last-Modified)<ul>
<li>如果一致，则直接返回 304 通知浏览器使用缓存</li>
<li>如不一致，则服务端返回新的资源</li>
</ul>
</li>
</ul>
</li>
<li>Last-Modified 缺点：<ul>
<li>周期性修改，但内容未变时，会导致缓存失效</li>
<li>最小粒度只到 s， s 以内的改动无法检测到</li>
</ul>
</li>
<li>Etag 的优先级高于 Last-Modified</li>
</ul>
</li>
</ul>
<h3 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h3><ul>
<li>1xx: 接受，继续处理</li>
<li>200: 成功，并返回数据</li>
<li>201: 已创建</li>
<li>202: 已接受</li>
<li>203: 成为，但未授权</li>
<li>204: 成功，无内容</li>
<li>205: 成功，重置内容</li>
<li>206: 成功，部分内容</li>
<li>301: 永久移动，重定向</li>
<li>302: 临时移动，可使用原有URI</li>
<li>304: 资源未修改，可使用缓存</li>
<li>305: 需代理访问</li>
<li>400: 请求语法错误</li>
<li>401: 要求身份认证</li>
<li>403: 拒绝请求</li>
<li>404: 资源不存在</li>
<li>500: 服务器错误</li>
</ul>
<h3 id="你所接触的前端领域的通讯有哪些"><a href="#你所接触的前端领域的通讯有哪些" class="headerlink" title="你所接触的前端领域的通讯有哪些"></a>你所接触的前端领域的通讯有哪些</h3><ul>
<li>前端和后端</li>
<li>前端和移动端</li>
<li>前端 父页面 和 iframe 之间</li>
<li>浏览器各个 tab 之间</li>
<li>web workers 线程通信</li>
<li>路由间的通信</li>
<li>vue 父子组件</li>
</ul>
<h3 id="通信的要点和目的"><a href="#通信的要点和目的" class="headerlink" title="通信的要点和目的"></a>通信的要点和目的</h3><ul>
<li>要点：1. 发送者和接收者 2. 传输媒介 3. 传输的数据 4. 传输格式（协议）</li>
<li>目的：1. 同步数据 2. 传递指令(执行的方法)</li>
</ul>
<h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><h3 id="vue-的生命周期"><a href="#vue-的生命周期" class="headerlink" title="vue 的生命周期"></a>vue 的生命周期</h3><p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/%E9%9D%A2%E8%AF%95%E5%9F%BA%E7%A1%80%E6%8A%80%E8%83%BD%E7%AF%87-css%2Chtml%2Cjs/WechatIMG3.png" alt="cmd-markdown-logo"></p>
<h3 id="vue-的实现原理"><a href="#vue-的实现原理" class="headerlink" title="vue 的实现原理"></a>vue 的实现原理</h3><ul>
<li>在 vue 中磨板边缘过程中的指令或者数据绑定都会实例化一个 watcher 实例，实例化过程中会触发 get() 将自身指向 Dep.target。</li>
<li>data 在 Observer 时执行 getter 会触发 dep.depend() 进行依赖收集：1.data 在 Observer 的闭包的 dep 实例的 subs 添加观察他的 watcher 实例；2.watcher 的deps 中添加观察对象 Observer 时的闭包dep。</li>
<li>当 data 中被 Observer 的某个对象值变化后，触发 subs 中观察他的 watcher 执行 updata() 方法，最后实际上就是调用 watcher 的回调函数 cb,进而进行视图更新。</li>
</ul>
<h3 id="Vue-的-template-模板编译是怎么转变成浏览器可以识别的"><a href="#Vue-的-template-模板编译是怎么转变成浏览器可以识别的" class="headerlink" title="Vue 的 template 模板编译是怎么转变成浏览器可以识别的"></a>Vue 的 template 模板编译是怎么转变成浏览器可以识别的</h3><ul>
<li>template =&gt; AST render(compiler 解析 template)</li>
<li>AST render =&gt; vNode(render 方法运行)</li>
<li>vNode =&gt; DOM(vdom.patch)</li>
</ul>
<h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的<code>状态管理模式</code>，它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生改变。</p>
<p>这个状态自管理应用包含以下几个部分：</p>
<p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/%E9%9D%A2%E8%AF%95%E5%9F%BA%E7%A1%80%E6%8A%80%E8%83%BD%E7%AF%87-css%2Chtml%2Cjs/WechatIMG2.jpeg" alt="cmd-markdown-logo"></p>
<ul>
<li>state：驱动应用的数据源</li>
<li>view：以声明的方式将 state 映射到视图</li>
<li>actions：响应在 view 上的用户输入导致的状态变化</li>
</ul>
<p>过程：</p>
<p>在view上dispatch一个action，在action里面进行一些逻辑处理（比如请求），然后交给mutation去更新state，最后作用到view上，一个循环的结构。</p>
<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p><a href="https://lzzhy.github.io/webpack%E5%B7%A5%E7%A8%8B%E5%8C%96/">webpack 工程化</a></p>
<p>关于 webpack ，对于初级前端，基本上只需要可以 cli 将项目起来，知道 loader 和 plugin 的区别以及常用的 loader、plugin 个人觉得就差不多了，但是对于 高级前端及以上，最好还是了解下 webpack 相关的原理</p>
]]></content>
  </entry>
  <entry>
    <title>工作笔记-权限分配</title>
    <url>/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0-%E6%9D%83%E9%99%90%E5%88%86%E9%85%8D/</url>
    <content><![CDATA[<p>基于Vue下的权限配置功能！！！fighting</p>
<p>这是两层结构的。</p>
<h3 id="需求：添加-编辑-查看权限功能"><a href="#需求：添加-编辑-查看权限功能" class="headerlink" title="需求：添加/编辑/查看权限功能"></a>需求：添加/编辑/查看权限功能</h3><p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE/WechatIMG3.png" alt="cmd-markdown-logo"></p>
<h3 id="添加实现步骤"><a href="#添加实现步骤" class="headerlink" title="添加实现步骤"></a>添加实现步骤</h3><h4 id="请求到整个的权限数据，并对数据进行整理-将菜单名单和可选菜单分开"><a href="#请求到整个的权限数据，并对数据进行整理-将菜单名单和可选菜单分开" class="headerlink" title="请求到整个的权限数据，并对数据进行整理(将菜单名单和可选菜单分开)"></a>请求到整个的权限数据，并对数据进行整理(将菜单名单和可选菜单分开)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 获取整个角色菜单</span><br><span class="line">listMenuInfoToRole().then((res) =&gt; &#123;</span><br><span class="line">    if (res.data.code === 1000) &#123;</span><br><span class="line">        let data = res.data.data; //获取到的是整个没有规律的数据</span><br><span class="line">        if(this.$route.query.id) &#123;</span><br><span class="line">            this.fetchSearchBackstageUser();</span><br><span class="line">        &#125; </span><br><span class="line">        //对数据进行处理，根据parent和id将数据区分开</span><br><span class="line">        var menulist = [];</span><br><span class="line">        for (let i = 0, l = data.length; i &lt; l; i++) &#123;</span><br><span class="line">            let obj = &#123;</span><br><span class="line">                parent: &apos;&apos;,</span><br><span class="line">                child: []</span><br><span class="line">            &#125;;</span><br><span class="line">            if (data[i].parentId === 0) &#123;</span><br><span class="line">                obj.parent = data[i];</span><br><span class="line">                menulist.push(obj); //menulist 已经将数据层级区分开了</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (let i = 0, l = data.length; i &lt; l; i++) &#123;</span><br><span class="line">            for (let j = 0, jl = menulist.length; j &lt; jl; j++) &#123;</span><br><span class="line">                if (data[i].parentId === menulist[j].parent.id) &#123;</span><br><span class="line">                    menulist[j].child.push(data[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        this.rolemenu = menulist; // 处理后的数据</span><br><span class="line">        this.menuList = data; //没处理过的原数据</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, (err) =&gt; &#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如下图:<br><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0-%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE/WechatIMG4.png" alt="cmd-markdown-logo"></p>
<h4 id="将数据展示在页面上"><a href="#将数据展示在页面上" class="headerlink" title="将数据展示在页面上"></a>将数据展示在页面上</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 结果</span><br><span class="line">&lt;div class=&quot;rolemenu-box&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;rolemenu&quot; v-for=&quot;(item, index) in rolemenu&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;parent-name&quot;&gt;&#123;&#123;item.parent.menuName&#125;&#125;&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;list-mid&quot;&gt;</span><br><span class="line">                &lt;el-checkbox</span><br><span class="line">                    v-model=&quot;roleAuth[item.parent.id]&quot;</span><br><span class="line">                    @change=&quot;checked =&gt; handleChecked(checked, item.parent.id, &apos;all&apos;)&quot;</span><br><span class="line">                    :disabled=&quot;disableEdit&quot;</span><br><span class="line">                &gt;全选&lt;/el-checkbox&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;roleMenu-right&quot;&gt;</span><br><span class="line">                &lt;el-checkbox</span><br><span class="line">                    v-for=&quot;(role) in item.child&quot;</span><br><span class="line">                    :key=&quot;role.id&quot;</span><br><span class="line">                    :label=&quot;role.id&quot;</span><br><span class="line">                    v-model=&quot;roleAuth[role.id]&quot;</span><br><span class="line">                    @change=&quot;checked =&gt; handleChecked(checked, role.id)&quot;</span><br><span class="line">                    :disabled=&quot;disableEdit&quot;</span><br><span class="line">                &gt;&#123;&#123;role.menuName&#125;&#125;&lt;/el-checkbox&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 样式</span><br><span class="line">.rolemenu-box &#123;</span><br><span class="line">    border-bottom: 1px solid rgb(228, 232, 237);</span><br><span class="line">    border-left: 1px solid rgb(228, 232, 237);</span><br><span class="line">    border-right: 1px solid rgb(228, 232, 237);</span><br><span class="line">    .rolemenu &#123;</span><br><span class="line">        display: -webkit-box;</span><br><span class="line">        display: -ms-flexbox;</span><br><span class="line">        display: flex;</span><br><span class="line">        border: 1px solid #e4e8ed;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        color: #333;</span><br><span class="line">        background: #fafafa;</span><br><span class="line">        .el-checkbox &#123;</span><br><span class="line">            text-align: left;</span><br><span class="line">        &#125;</span><br><span class="line">        .parent-name &#123;</span><br><span class="line">            padding-left: 40px;</span><br><span class="line">            height: 70px;</span><br><span class="line">            line-height: 70px;</span><br><span class="line">            width: 107px;</span><br><span class="line">        &#125;</span><br><span class="line">        .list-mid &#123;</span><br><span class="line">            padding-left: 30px;</span><br><span class="line">            height: 70px;</span><br><span class="line">            line-height: 70px;</span><br><span class="line">            width: 80px;</span><br><span class="line">        &#125;</span><br><span class="line">        .roleMenu-right &#123;</span><br><span class="line">            flex: 1;</span><br><span class="line">            padding-left: 30px;</span><br><span class="line">            text-align: left;</span><br><span class="line">            height: 70px;</span><br><span class="line">            line-height: 70px;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">            color: rgb(153, 153, 153);</span><br><span class="line">            .el-checkbox-group &#123;</span><br><span class="line">                display: inline-block;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="获取选中的id"><a href="#获取选中的id" class="headerlink" title="获取选中的id"></a>获取选中的id</h4><p>1.先对原始数据<strong>this.result</strong>进行处理：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    permissionData() &#123;</span><br><span class="line">        const result = &#123;&#125;;</span><br><span class="line">        this.menuList.forEach(item =&gt; &#123;</span><br><span class="line">            if (item.parentId === 0) &#123;</span><br><span class="line">                if (!result[item.id]) &#123;</span><br><span class="line">                    result[item.id] = [];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if (result[item.parentId]) &#123;</span><br><span class="line">                    result[item.parentId] = [...result[item.parentId], item];</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    result[item.parentId] = [item]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>2.@change绑定的函数<strong>handleChecked</strong>函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">handleChecked(val, checkId, allFlag) &#123;</span><br><span class="line">    const parentId = this.menuList.filter(item =&gt; item.id == checkId)[0].parentId;</span><br><span class="line">    if (allFlag) &#123;</span><br><span class="line">        if(parentId == 0) &#123;</span><br><span class="line">            this.permissionData[checkId].forEach(item =&gt; &#123;</span><br><span class="line">                this.$set(this.roleAuth, item.id, val)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            const groupArr = this.permissionData[parentId];</span><br><span class="line">            const checkGroup = groupArr.filter(item =&gt; this.roleAuth[item] &amp;&amp; !!this.roleAuth[item]);</span><br><span class="line">            if (checkGroup.length === groupArr.length) &#123;</span><br><span class="line">                this.$set(this.roleAuth, parentId, true)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                this.$set(this.roleAuth, parentId, false)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        if (parentId == 0) &#123;</span><br><span class="line">            this.permissionData[checkId].forEach(item =&gt; &#123;</span><br><span class="line">                this.$set(this.roleAuth, item.id, val)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            const checkGroup = this.permissionData[parentId].filter(item =&gt; this.roleAuth[item.id] &amp;&amp; !!this.roleAuth[item.id]);</span><br><span class="line">            if (checkGroup.length === this.permissionData[parentId].length) &#123;</span><br><span class="line">                this.$set(this.roleAuth, parentId, true)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                this.$set(this.roleAuth, parentId, false)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h4><p><strong>menuIds</strong>：选中的id,包括parentId</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let result = Object.keys(this.roleAuth).filter(item =&gt; !!this.roleAuth[item]);</span><br><span class="line">let resultId, midResultId;</span><br><span class="line">if (result.length &gt; 0) &#123;</span><br><span class="line">    let tempLength = result.length</span><br><span class="line">    for (let i = 0; i &lt; tempLength; i++) &#123;</span><br><span class="line">        resultId = this.menuList.filter((item) =&gt; item.id == result[i])</span><br><span class="line">        for (let j = 0; j &lt; resultId.length; j++) &#123;</span><br><span class="line">            resultId.length &gt; 0 &amp;&amp; result.push(resultId[j].parentId);</span><br><span class="line">        &#125;</span><br><span class="line">        // 带入用户管理层id</span><br><span class="line">        for (let m = 0; m &lt; resultId.length; m++) &#123;</span><br><span class="line">            if (resultId[m].parentId) &#123;</span><br><span class="line">                midResultId = this.menuList.filter((item) =&gt; item.id == resultId[m].parentId);  // 匹配选中的父级</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let resultNumber = [];</span><br><span class="line">for (var i = 0; i &lt; result.length; i++) &#123;</span><br><span class="line">    resultNumber.push(parseInt(result[i]));</span><br><span class="line">&#125;</span><br><span class="line">let roleNum = [];</span><br><span class="line">for (var i = 0; i &lt; resultNumber.length; i++) &#123;</span><br><span class="line">    if (resultNumber[i] !== 0) &#123;</span><br><span class="line">        roleNum.push(resultNumber[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let roleAuth = new Set(roleNum);</span><br><span class="line">const menuIds = Array.from(roleAuth); // menuIds就是要传给后端的所有选中的id</span><br></pre></td></tr></table></figure>

<h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>回填时展示页面显示的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">searchBackstageUser(&#123;userId: this.$route.query.id&#125;).then(res =&gt; &#123;</span><br><span class="line">    var ArrayMenuInfos = res.data.data.menuInfos.split(&apos;,&apos;);</span><br><span class="line">    ArrayMenuInfos.forEach(item =&gt; &#123;</span><br><span class="line">        const parentIds = Object.keys(this.permissionData);</span><br><span class="line">        if (parentIds.includes(String(item))) &#123;</span><br><span class="line">            const child = this.permissionData[item];</span><br><span class="line">            const check = child.filter(c =&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">        this.$set(this.roleAuth, item, true);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        this.$set(this.roleAuth, item, true);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>zepto源码解析</title>
    <url>/zepto%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>学习笔记：参考自<a href="http://www.zeptojs.cn/#download" target="_blank" rel="noopener">zepto官方文档</a>，<a href="https://www.kancloud.cn/wangfupeng/zepto-design-srouce/173691" target="_blank" rel="noopener">zepto对象思想与源码解析</a></p>
<h3 id="为什么要看zepto源码"><a href="#为什么要看zepto源码" class="headerlink" title="为什么要看zepto源码"></a>为什么要看zepto源码</h3><p>js相当于造房子的砖头，而Vue,react…则是人家造好了的轮子。在工作中一直用的是人家造好的轮子，大家都知道的是前端中轮子变化是很快的，但js是‘不会变的’。所以只有自己会造轮子了才能在前端这条道路上走得更远。并且，个人觉得读完源码后：真正留在自己脑子里的，是框架的设计思想。<strong>总之，一直觉得js和设计思想在前端中是最最最最重要的。</strong></p>
<h3 id="需要先了解一下原型和原型链的相关知识"><a href="#需要先了解一下原型和原型链的相关知识" class="headerlink" title="需要先了解一下原型和原型链的相关知识"></a>需要先了解一下原型和原型链的相关知识</h3><p>1.每个函数都有一个prototype属性，无论是自定义的还是系统内置的<br>2.所以通过函数new出来的东西，这个东西都有一个<strong>proto</strong>指向这个函数的prototype<br>3.当你想要使用一个对象（或一个数组）的某个功能时：如果该对象本身具有这个功能，则直接使用，如果没有就去<strong>proto</strong>中找</p>
<h3 id="怎么读zepto源码"><a href="#怎么读zepto源码" class="headerlink" title="怎么读zepto源码"></a>怎么读zepto源码</h3><h4 id="解读zepto的设计"><a href="#解读zepto的设计" class="headerlink" title="解读zepto的设计"></a>解读zepto的设计</h4><p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/zepto%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/WechatIMG3.png" alt="cmd-markdown-logo"><br>上面这张图解析：arr具有push属性，因此可以直接使用。但是arr不具备lzzhyAddName属性，因此需要通过arr._proto = {lzzhyAddName: function(){console.log(‘my name is lzzhy’)}}来添加这个属性后才能用。</p>
<p>流程图解析：<br><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/zepto%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/WechatIMG4%201.png" alt="cmd-markdown-logo"></p>
<p>PS:源码在设计的时候并不像上面代码那样简单只不过原理是一样的，源码具体实现方式还是得边读边理解。</p>
<h4 id="zepto源码结构"><a href="#zepto源码结构" class="headerlink" title="zepto源码结构"></a>zepto源码结构</h4><p>第一步，先整个悦读源码，从大到小以宏观看微观的想法。因此，先将整个大体的结构弄懂：</p>
<p>总结来说，整个结构可以简单抽离成这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var zepto = (function()&#123;</span><br><span class="line">    var $, zepto = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    // ...省略N行代码</span><br><span class="line"></span><br><span class="line">    $ = function(selector,context) &#123;</span><br><span class="line">        return zepto.init(selector,context)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // ...省略N行代码</span><br><span class="line"></span><br><span class="line">    return $</span><br><span class="line">&#125;)()</span><br><span class="line">window.zepto = zepto</span><br><span class="line">window.$ === undefined &amp;&amp; (window.$ = zepto)</span><br></pre></td></tr></table></figure>

<p>在这里我们可以看到:平常我们$(‘p’)使用zepto的时候，最终会顺藤摸瓜到 $ = function(selector,context) {}这个函数中（其中内容在这一步可不深究），而p选择器也会传递给selector参数。因此经过剥离之后，我们发现下一步需要探究的是$ = function(selector,context) {return zepto.init(selector,context)} 这个函数return出来的zepto.init函数</p>
<h4 id="zepto-init函数"><a href="#zepto-init函数" class="headerlink" title="zepto.init函数"></a>zepto.init函数</h4><p>在上一步“zepto源码结构”中我们已经剖析到zepto.init函数了。</p>
<p>函数如下：</p>
<p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/zepto%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/WechatIMG6%201.png" alt="cmd-markdown-logo"></p>
<p>我们可以看到zepto.init函数大约有几十行，把中间那if…else…操作去掉(其中大致分为四种情况)，剩下的就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zepto.init = function(selector, context) &#123;</span><br><span class="line">    var dom</span><br><span class="line"></span><br><span class="line">    // ...此处省略N行...</span><br><span class="line"></span><br><span class="line">    // 分情况对dom赋值：</span><br><span class="line">    // 1.selector为空</span><br><span class="line">    // 2.selector是字符串，其中又分好几种情况</span><br><span class="line">    // 3.selector是函数</span><br><span class="line">    // 4.其他情况，如selector是数组、对象等</span><br><span class="line"></span><br><span class="line">    return zepto.Z(dom,elector)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个函数中，if…else…判断之后，最终 return到zepto.Z函数</p>
<h4 id="zepto-Z函数"><a href="#zepto-Z函数" class="headerlink" title="zepto.Z函数"></a>zepto.Z函数</h4><p>在上一步“zepto.init函数”中我们已经剖析到zepto.Z函数了。</p>
<p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/zepto%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/WechatIMG8.png" alt="cmd-markdown-logo"></p>
<p>其中dom指的是数组,$.fn指的是一个包含很多属性的一个对象{……}<br>371行：把数组或者空数组赋值给 dom<br>372行：把$.fn赋值给dom._proto隐私原型<br>373行：把字符串或者空字符串赋值给 dom.selector</p>
<p>下图是$.fn函数部分截图：<br><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/zepto%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/WechatIMG9.png" alt="cmd-markdown-logo"></p>
<ul>
<li>其中774-779行相对应的’:’后的可以转换(如：emptyArray.forEach相当于[].forEach又相当于Array.prototype.forEach); </li>
<li>其中map,slice,ready…函数都是重新定义的，也就是官方文档中我们用到的那些对象函数API如：<br><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/zepto%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/WechatIMG10.png" alt="cmd-markdown-logo"></li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上整个分析过程是从大到小将一个个函数分割出来，其中解读了比较重要的几个函数。   </p>
<p>源码分析到这里了，那么就用一个简单的代码结构对之前的做个总结。并且根据这个结构，将zepto的初始对象的过程在捋一捋。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var zepto = (function()&#123;</span><br><span class="line">    var $, zepto = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    // ...省略N行代码</span><br><span class="line"></span><br><span class="line">    zepto.Z = function(dom,selector)&#123;</span><br><span class="line">        dom = dom || []</span><br><span class="line">        dom._proto = $.fn</span><br><span class="line">        dom.selector = selector || &apos;&apos;</span><br><span class="line">        return dom</span><br><span class="line">    &#125;</span><br><span class="line">    $ = function(selector,context) &#123;</span><br><span class="line">        return zepto.init(selector,context)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // ...省略N行代码</span><br><span class="line"></span><br><span class="line">    zepto.init = function(selector, context) &#123;</span><br><span class="line">        var dom </span><br><span class="line"></span><br><span class="line">        // ...针对不同情况分别赋值</span><br><span class="line"></span><br><span class="line">        return zepto.Z(dom,elector)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $.fn = &#123;</span><br><span class="line">        // 里面N个重新定义的zepto的API</span><br><span class="line">    &#125;</span><br><span class="line">    return $</span><br><span class="line">&#125;)()</span><br><span class="line">window.zepto = zepto</span><br><span class="line">window.$ === undefined &amp;&amp; (window.$ = zepto)</span><br></pre></td></tr></table></figure>

<p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/zepto%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/WechatIMG11.png" alt="cmd-markdown-logo"></p>
<p>大致就是这张图的流程，最后的dom是挂载在$.fn上。<code>dom._proto = $.fn</code></p>
]]></content>
  </entry>
  <entry>
    <title>webpack工程化</title>
    <url>/webpack%E5%B7%A5%E7%A8%8B%E5%8C%96/</url>
    <content><![CDATA[<h3 id="webpack是什么"><a href="#webpack是什么" class="headerlink" title="webpack是什么"></a>webpack是什么</h3><p>webpack可以看作是一个模块打包机，功能就是通过一个入口将所有的依赖关系(像.jade,.less,.png等)通过webpack打包器打包成我们所谓的前端静态资源(像js,css,png等)。(module模块 =&gt; webpack =&gt; 静态资源)。</p>
<h3 id="webpack的最终目的"><a href="#webpack的最终目的" class="headerlink" title="webpack的最终目的"></a>webpack的最终目的</h3><p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/webpack%E5%B7%A5%E7%A8%8B%E5%8C%96/WechatIMG3.png" alt="cmd-markdown-logo"></p>
<p>将开发环境的代码（如：.vue文件和.less文件在开发时所使用的的文件，不能被浏览器直接识别的代码）打包编译成生产环境的代码（能直接被浏览器所识别的代码）。</p>
<h3 id="为什么要用它，它可以做什么"><a href="#为什么要用它，它可以做什么" class="headerlink" title="为什么要用它，它可以做什么"></a>为什么要用它，它可以做什么</h3><p>在webpack之前也有很多打包工具，如grunt,gulp…但是这些打包工具功能单一，只能完成特定任务。但一个web前端工程是复杂的，一个webapp的业务代码可能有很多，如想按需加载，首屏加载时间减少，需集成一些第三方库…<br>webpack 的出现正是为了解决这些问题，在 webpack 中，提供了一下这些功能：</p>
<ul>
<li>代码转换：比如将es6转化成es5,将less,sass转化成css</li>
<li>文件优化：比如压缩代码体积</li>
<li>代码分割：比如公共模块的分离，路由懒加载</li>
<li>模块合并：比如按照功能将多个模块合并成一个模块</li>
<li>自动刷新：热更新</li>
<li>代码校验：校验代码是否符合规范</li>
<li>自动发布</li>
</ul>
<h3 id="使用webpack有什么优势"><a href="#使用webpack有什么优势" class="headerlink" title="使用webpack有什么优势"></a>使用webpack有什么优势</h3><p><strong>1.万物皆模块：</strong> 在 webpack 的世界中，除了 Javascript，其他任何资源都可以当做模块的方式引用。<br><strong>2.按需加载：</strong> webapp 的优化关键在于代码体积，当应用体积增大，实现代码的按需加载是必需，这也是 webpack 出现的根本原因。<br><strong>3.可定制化：</strong> 任何一个工具都不可能解决所有问题，提供解决方案才是最可行的，webpack 基于可定制化的理念构建，通过插件系统，配置文件，可以实现大型项目的定制需求。</p>
<h3 id="webpack-核心概念及其配置："><a href="#webpack-核心概念及其配置：" class="headerlink" title="webpack 核心概念及其配置："></a>webpack 核心概念及其配置：</h3><p>以下都是单页面配置webpack</p>
<p>目录结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── src // 根目录</span><br><span class="line">│   ├── index.js  // 手动添加入口文件</span><br><span class="line">│</span><br><span class="line">│──├── webpack.config.js  // webpack配置文件，手动添加</span><br></pre></td></tr></table></figure>

<h4 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h4><p>webpack.config.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const config = &#123;</span><br><span class="line">  entry: &apos;./src/index.js&apos;  // 入口文件的相对路径</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">module.exports = config;</span><br></pre></td></tr></table></figure>

<p>index.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(&apos;hello webpack，i am coming&apos;);</span><br></pre></td></tr></table></figure>

<p>生成dist文件夹： </p>
<ul>
<li><p>全局安装webpack和webpack-cli：npm i webpack webpack-cli -D</p>
</li>
<li><p>在package.json(npm init生成)脚本中设置：”build”: “webpack”</p>
</li>
<li><p>执行npm run build</p>
</li>
</ul>
<h4 id="出口"><a href="#出口" class="headerlink" title="出口"></a>出口</h4><p>webpack.config.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const path = require(&apos;path&apos;)  // node 内置的模块</span><br><span class="line"></span><br><span class="line">const config = &#123;</span><br><span class="line">  entry: &apos;./src/index.js&apos;,  // 入口文件的相对路径</span><br><span class="line">  output: &#123;</span><br><span class="line">      filename: &apos;bundle.js&apos;,  // 可以自定义的出口文件名称</span><br><span class="line">      path: path.join(__dirname,&apos;./dist1&apos;)  // 绝对路径</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在运行npm run build，就会生成如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── dist1 // 打包生成的dist1文件夹，自己在path中定义的</span><br><span class="line">    ├── bundle.js  // 自定义的出口文件</span><br></pre></td></tr></table></figure>

<p>注意：由于输出路径需要绝对路径，因此使用了 path(<a href="https://www.runoob.com/nodejs/nodejs-path-module.html" target="_blank" rel="noopener">Node.js Path 模块
</a>)，__dirname 会输出绝对路径</p>
<h4 id="Loader：处理的是webpack不能处理的文件（除了js以外的文件：因为webpack本身就是js写的），将其转化为webpack可以处理的文件"><a href="#Loader：处理的是webpack不能处理的文件（除了js以外的文件：因为webpack本身就是js写的），将其转化为webpack可以处理的文件" class="headerlink" title="Loader：处理的是webpack不能处理的文件（除了js以外的文件：因为webpack本身就是js写的），将其转化为webpack可以处理的文件"></a>Loader：处理的是webpack不能处理的文件（除了js以外的文件：因为webpack本身就是js写的），将其转化为webpack可以处理的文件</h4><p>安装需要的loader：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add css-loader style-loader -D</span><br></pre></td></tr></table></figure>

<p>修改webpack.config.js：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const config = &#123;</span><br><span class="line">    entry: ...</span><br><span class="line">    output: ...</span><br><span class="line">    module: &#123;  // 配置loader</span><br><span class="line">       rules: [&#123;</span><br><span class="line">           test: /\.css$/,</span><br><span class="line">           use: [&apos;style-loader&apos;,&apos;css-loader&apos;]</span><br><span class="line">       &#125; ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在src下添加index.css文件，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    background-color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在src/index.js中引入index.css文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">require(&apos;./index.css&apos;)</span><br></pre></td></tr></table></figure>

<p>然后，在npm run build打包该项目，会发现在dist/bundle.js中可以搜索到index.css文件中的background-color: red样式。</p>
<p>这样样式打包就成功了。。。</p>
<p>那如何使用打包出来的dist文件呢？在dist下新增index.html文件，引入想要打包出来的dist文件就可以了：</p>
<p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/webpack%E5%B7%A5%E7%A8%8B%E5%8C%96/WechatIMG1.png" alt="cmd-markdown-logo"></p>
<p>当需要处理除css之外的sass,scss之类的样式就需要loader来处理了：</p>
<p>先安装sass-loader：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add sass-loader -D</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const config = &#123;</span><br><span class="line">    entry: ...</span><br><span class="line">    output: ...</span><br><span class="line">    module: &#123;  // 配置sass-loader,node-sass 来处理scss或者sass</span><br><span class="line">       rules: [&#123;</span><br><span class="line">           test: /\.(scss|sass)$/,</span><br><span class="line">           use: [&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;sass-loader&apos;]</span><br><span class="line">       &#125; ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>具体的图片，字体等其他资源管理详见<a href="https://www.webpackjs.com/guides/asset-management/#%E5%AE%89%E8%A3%85" target="_blank" rel="noopener">webpack管理资源
</a></p>
<h4 id="插件：插件使用范围比Loader大，Loader不能做到的就可以使用插件"><a href="#插件：插件使用范围比Loader大，Loader不能做到的就可以使用插件" class="headerlink" title="插件：插件使用范围比Loader大，Loader不能做到的就可以使用插件"></a>插件：插件使用范围比Loader大，Loader不能做到的就可以使用插件</h4><h5 id="模块热替换-webpack自带的热更新（只会监听代码变化，但是并不会刷新页面）"><a href="#模块热替换-webpack自带的热更新（只会监听代码变化，但是并不会刷新页面）" class="headerlink" title="模块热替换 webpack自带的热更新（只会监听代码变化，但是并不会刷新页面）"></a>模块热替换 webpack自带的热更新（只会监听代码变化，但是并不会刷新页面）</h5><p>package.json：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;watch&quot;: &quot;webpack --watch&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h5 id="webpack-dev-server-热更新：会监听代码变化也会自动刷新页面"><a href="#webpack-dev-server-热更新：会监听代码变化也会自动刷新页面" class="headerlink" title="webpack-dev-server(热更新：会监听代码变化也会自动刷新页面)"></a>webpack-dev-server(热更新：会监听代码变化也会自动刷新页面)</h5><p>安装插件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add webpack-dev-server -D</span><br></pre></td></tr></table></figure>

<p>webpack.config.js：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;hot&quot;: &quot;webpack-dev-server&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>webpack.config.js：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const webpack = require(&apos;webpack&apos;)</span><br><span class="line">const config = &#123;</span><br><span class="line">    entry: ...</span><br><span class="line">    output: ...</span><br><span class="line">    module: ...</span><br><span class="line">    plugins: [</span><br><span class="line">        xxx,</span><br><span class="line">        new webpack.HotModuleReplacementPlugin()</span><br><span class="line">    ],</span><br><span class="line">    devServer: &#123;  // 热更新 webpack-dev-server</span><br><span class="line">        hot: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这样热更新配置就好了，在执行npm run hot(package.json中配置的脚本)，再在浏览器打开默认的8080端口号就ok了。。。</p>
<h4 id="模式-兼容性"><a href="#模式-兼容性" class="headerlink" title="模式/兼容性"></a>模式/兼容性</h4><p>有mode: ‘development’/‘production’两种，分别代表不同的环境，为production时dist文件会压缩的体积比较小。</p>
<h5 id="NODE-ENV使用场景"><a href="#NODE-ENV使用场景" class="headerlink" title="NODE_ENV使用场景"></a>NODE_ENV使用场景</h5><p>NODE_ENV在项目中的使用场景一般是作为环境变量来匹配当时的环境的。以下来介绍下最基础的process.env.NODE_ENV</p>
<p>webpack.config.js：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const config = &#123;</span><br><span class="line">    mode: &apos;production&apos;,  // 模式, 还有 development</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>src/index.js：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(process.env.NODE_ENV === &apos;production&apos;) &#123;   // NODE_ENV的使用场景</span><br><span class="line">    console.log(&apos;我不是localhost&apos;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    console.log(&apos;我是localhost&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在去npm run build打包，在用浏览器打开dist/index.html文件。此时src/index.js：配置的process.env.NODE_ENV就会去跟mode中的值相匹配</p>
<p>了解了webpack的一个大致情况后，那我们要怎么去用它呢？</p>
<h3 id="webpack基础配置（怎么写）"><a href="#webpack基础配置（怎么写）" class="headerlink" title="webpack基础配置（怎么写）"></a>webpack基础配置（怎么写）</h3><h4 id="安装本地webpack"><a href="#安装本地webpack" class="headerlink" title="安装本地webpack"></a>安装本地webpack</h4><p>在此之前你应该已经安装过node，安装相关webpack所需要的如： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install webpack webpack-cli -g</span><br><span class="line">npm install webpack-dev-server -g</span><br></pre></td></tr></table></figure>

<h4 id="配置文件的使用"><a href="#配置文件的使用" class="headerlink" title="配置文件的使用"></a>配置文件的使用</h4><p>在package.json中配置脚本”build”: “webpack”，执行npm run build就会生成dist文件夹了。在项目目录下创建 webpack.config.js如下，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- webpack 是node写出来的 node的写法 --&gt;</span><br><span class="line"></span><br><span class="line">var webpack = require(&apos;webpack&apos;)</span><br><span class="line">let path = require(&apos;path&apos;)</span><br><span class="line">module.export = &#123;</span><br><span class="line">    mode: &apos;development&apos;, // 模式 默认两种proction development</span><br><span class="line">    entry: &apos;./src/index.js&apos;, //入口</span><br><span class="line">    output: &#123;  // 输出 出口</span><br><span class="line">        filename: &apos;bundle.js&apos;, //打包后的文件名</span><br><span class="line">        path: path.resolve(__dirname,&apos;dist&apos;) //路径必须是一个绝对路径, _dirname指相对该路径下</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.js[x]?$/,</span><br><span class="line">                exclude: /node_modules/,</span><br><span class="line">                loader: &apos;babel-loader&apos;,  //处理.js或.jsx文件loader</span><br><span class="line">                query: &#123;</span><br><span class="line">                    presets: [&apos;env&apos;]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.css$/,</span><br><span class="line">                loader: &quot;style-loader!css-loader&quot;   //处理.css文件loader</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.(png|jpg)$/,</span><br><span class="line">                loader: &apos;url-loader?limit=8192&apos;    //处理图片loader</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="babel-搭配"><a href="#babel-搭配" class="headerlink" title="babel 搭配"></a>babel 搭配</h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.webpackjs.com/concepts/#%E5%87%BA%E5%8F%A3-output-" target="_blank" rel="noopener">《webpack官方文档》</a></p>
]]></content>
  </entry>
  <entry>
    <title>HTTP系列之HTTPS</title>
    <url>/HTTP%E7%B3%BB%E5%88%97%E4%B9%8BHTTPS/</url>
    <content><![CDATA[<p>HTTP、HTTP2、HTTPS三者之间的关系：HTTP包括1.x、HTTP2(现在常用版本)、HTTP3(少)，HTTP2是HTTP的一个版本；HTTP和HTTPS区别在于HTTPS加密而HTTP不加密是明文传送；HTTP2解决了HTTP1.1的一些缺陷(线头阻塞，二进制传输、帧和流,头部压缩，主动推送)，最主要是解决了线头阻塞的问题（多路复用的流）。</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>HTTPS （全称：Hyper Text Transfer Protocol over SecureSocket Layer），是以安全为目标的HTTP通道，在HTTP的基础上通过传输加密和身份认证保证了传输过程的安全性。HTTPS在HTTP的基础下加入SSL层，HTTPS的安全基础是 SSL，因此加密的详细内容就需要SSL。</p>
<h3 id="密码学基础"><a href="#密码学基础" class="headerlink" title="密码学基础"></a>密码学基础</h3><p><font face="微软雅黑" size="3" color="Green">明文</font>：未被加密过的原始数据。<br><font face="微软雅黑" size="3" color="Green">密文</font>：明文被某种加密算法加密之后，会变成密文，从而确保原始数据的安全。密文也可以被解密，得到原始的明文。<br><font face="微软雅黑" size="3" color="Green">密钥</font>：一种参数，是在明文转换为密文或将密文转换为明文的算法中输入的。分为对称密钥与非对称密钥，分别应用在对称加密和非对称加密上。 </p>
<h3 id="HTTPS加密原理"><a href="#HTTPS加密原理" class="headerlink" title="HTTPS加密原理"></a>HTTPS加密原理</h3><p>HTTPS为了兼顾安全与效率，同时使用了对称加密和非对称加密</p>
<h4 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h4><p>又叫做私钥加密，即信息的发送方和接收方使用同一个密钥去加密和解密数据。特点是算法公开、加密和解密速度快，适合于对大数据量进行加密，常见的对称加密算法有DES、3DES、TDEA、Blowfish、RC5和IDEA。<br>加密过程：明文 + 加密算法 + 私钥 =&gt; 密文<br>解密过程：密文 + 解密算法 + 私钥 =&gt; 明文<br>称之为“对称”的原因：<br>其中使用到的密钥叫做私钥，即个人所有不能被泄露。加密过程中的私钥与解密过程中用到的私钥是同一个密钥。<br>缺点：密钥安全管理困难。由于对称加密的算法是公开的，所以一旦私钥被泄露，那么密文就很容易被破解。</p>
<h4 id="非对称加密算法："><a href="#非对称加密算法：" class="headerlink" title="非对称加密算法："></a>非对称加密算法：</h4><p>又叫公钥加密。使用一对密钥，即公钥和私钥，且二者成对出现。私钥自己保存，不能对外泄露。公钥则任何人都可以获得该密钥。用公钥或私钥中的任何一个进行加密，用另一个进行解密。<br>被公钥加密过的密文只能被私钥解密，过程如下：<br>明文 + 加密算法 + 公钥 =&gt; 密文， 密文 + 解密算法 + 私钥 =&gt; 明文<br>被私钥加密过的密文只能被公钥解密，过程如下：<br>明文 + 加密算法 + 私钥 =&gt; 密文， 密文 + 解密算法 + 公钥 =&gt; 明文<br>缺点：加密和解密花费时间长、速度慢，只适合对少量数据进行加密。 </p>
<h4 id="确认身份-——-数字证书"><a href="#确认身份-——-数字证书" class="headerlink" title="确认身份 —— 数字证书"></a>确认身份 —— 数字证书</h4><p>在<em>非对称加密时</em>，首先需要将 A 的公钥给 B ，那么在这个过程中，安全是没有保障的，中间人可以拦截到 A 的公钥，就可以对拦截到的公钥进行篡改（如，本来 A 应该给 B 传：110，但是被中间人拦截了，所以 B 最后收到的可能不是110）。</p>
<p>那怎么确认 A 给 B 的公钥确实是正确的没有被修改的呢？</p>
<p>这个时候就需要数字签名了（数字签名也就是相当于公证处在公证书上盖章），数字签名和原始信息合在一起称为<em>数字证书</em>。</p>
<p>在拿到数字证书之后，就用 Hash 算法，再次生成消息摘要。然后用 CA 的公钥对数字签名解密，得到CA创建的消息摘要。两者一比，就知道有没有人篡改了！</p>
<h3 id="HTTPS访问过程"><a href="#HTTPS访问过程" class="headerlink" title="HTTPS访问过程"></a>HTTPS访问过程</h3><p>客户端生成的随机密钥，用来进行对称加密</p>
<p>服务器端的公钥和私钥，用来进行非对称加密</p>
<p>1.浏览器将支持的加密信息发送给网站服务器；<br>2.服务器会选择出一套加密算法和哈希算法，将验证身份的信息以证书（证书发布CA机构、证书有效期、公钥、证书所有者、签名等）的形式发送给浏览器；<br>3.浏览器收到证书之后需要验证证书的合法性，当证书受信之后，浏览器会随机生成一串密码，并使用证书中的公钥加密。之后就是使用约定好的哈希算法握手消息，并生成随机数对消息进行加密，再将生成的信息发送给服务器；<br>4.当服务器接收到浏览器发送过来的数据后，会使用服务器本身的私钥将信息解密确定密码，然后通过密码解密浏览器发送过来的握手信息，并验证哈希是否与浏览器一致。然后服务器会使用密码加密新的握手信息，发送给浏览器；<br>5.最后浏览器解密并计算经过哈希算法加密的握手消息，如果与服务发送过来的哈希一致，则此握手过程结束后，服务器与浏览器会使用之前浏览器生成的随机密码和对称加密算法进行加密交换数据。</p>
]]></content>
  </entry>
  <entry>
    <title>HTTP系列之HTTP2</title>
    <url>/HTTP%E7%B3%BB%E5%88%97%E4%B9%8BHTTP2/</url>
    <content><![CDATA[<p>HTTP、HTTP2、HTTPS三者之间的关系：HTTP包括1.x、HTTP2(现在常用版本)、HTTP3(少)，HTTP2是HTTP的一个版本；HTTP和HTTPS区别在于HTTPS加密而HTTP不加密是明文传送；HTTP2解决了HTTP1.1的一些缺陷(线头阻塞，二进制传输、帧和流,头部压缩，主动推送)，最主要是解决了线头阻塞的问题（多路复用的流）。<br>(在开放互联网上HTTP 2.0将只用于 http:// 网址，而 http:// 网址将继续使用 HTTP/1，目的是在开放互联网上增加使用加密技术，以提供强有力的保护去遏制主动攻击。)</p>
<h3 id="HTTP-1-x存在的问题"><a href="#HTTP-1-x存在的问题" class="headerlink" title="HTTP/1.x存在的问题"></a>HTTP/1.x存在的问题</h3><ul>
<li><font face="微软雅黑" size="3" color="Green">线头阻塞</font>：TCP连接上只能发送一个请求，前面的请求未完成前，后续的请求都在排队等待。   </li>
<li><font face="微软雅黑" size="3" color="Green">多个TCP连接</font>：虽然HTTP/1.1管线化可以支持请求并发，但是浏览器很难实现，chrome、firefox等都禁用了管线化。所以1.1版本请求并发依赖于多个TCP连接，建立TCP连接成本很高，还会存在慢启动的问题。   </li>
<li><font face="微软雅黑" size="3" color="Green">头部冗余，采用文本格式</font>：HTTP/1.X版本是采用文本格式，首部未压缩，而且每一个请求都会带上cookie、user-agent等完全相同的首部。   </li>
<li><font face="微软雅黑" size="3" color="Green">客户端需要主动请求</font></li>
</ul>
<p>既然HTTP/2是为了解决HTTP/1的问题，那么HTTP/2到底做了哪些改变呢？</p>
<h3 id="HTTP-2做的改变"><a href="#HTTP-2做的改变" class="headerlink" title="HTTP/2做的改变"></a>HTTP/2做的改变</h3><h4 id="二进制分帧层"><a href="#二进制分帧层" class="headerlink" title="二进制分帧层"></a>二进制分帧层</h4><ul>
<li>帧：HTTP/2数据通信的最小单位消息（收到流量控制）：指 HTTP/2 中逻辑上的 HTTP 消息。例如请求和响应等。</li>
<li>流：存在于连接中的一个虚拟通道。流可以承载双向消息，每个流都有一个唯一的整数ID。</li>
<li>消息：一个完整的HTTP请求或响应，由一个或多个帧组成。特定消息的帧在同一个流上发送，这意味着一个HTTP请求或响应只能在一个流上发送。    </li>
</ul>
<p>HTTP/2 性能提升的核心就在于二进制分帧层。HTTP2是二进制协议，解析起来更高效。HTTP/2 将请求和响应数据分割为更小的帧，并且它们采用二进制编码。<br>HTTP/2 中，同域名下所有通信都在单个连接上完成，该连接可以承载任意数量的双向数据流。每个数据流都以消息的形式发送，而消息又由一个或多个帧组成。多个帧之间可以乱序发送，根据帧首部的流标识可以重新组装。</p>
<h4 id="线头阻塞（多路复用的流）"><a href="#线头阻塞（多路复用的流）" class="headerlink" title="线头阻塞（多路复用的流）"></a>线头阻塞（多路复用的流）</h4><p>每个帧都关联到一个流，流是一个独立的，双向的帧序列可以通过一个http2的连接在服务端与客户端之间不断的交换数据。<br>每个单独的http2连接都可以包含多个并发的流，这些流中交错的包含着来自两端的帧。流既可以被客户端/服务器端单方面的建立和使用，也可以被双方共享，或者被任意一边关闭。在流里面，每一帧发送的顺序非常关键。接收方会按照收到帧的顺序来进行处理。<br><em>流的多路复用意味着在同一连接中来自各个流的数据包会被混合在一起。就好像两个（或者更多）独立的“数据列车”被拼凑到了一辆列车上，但它们最终会在终点站被分开。</em>   </p>
<h4 id="头部压缩"><a href="#头部压缩" class="headerlink" title="头部压缩"></a>头部压缩</h4><p><font face="微软雅黑" size="3" color="Green">原因</font>：HTTP是一种无状态的协议。这意味着每个请求必须要携带服务器需要的所有细节，而不是让服务器保存住之前请求的元数据。(因为http2并没有改变这个范式，所以它也以同样原理工作,这也保证了HTTP可重复性)。当一个客户端从同一服务器请求了大量资源（例如页面的图片）的时候，所有这些请求看起来几乎都是一致的，而这些大量一致的东西则正好值得被压缩；<br>当每个页面资源的个数上升的时候，cookies和请求的大小都会增加。cookies需要被包含在所有请求中，且他们在多个请求中经常是一模一样的；<br>HTTP 1.1请求的大小正变得越来越大，有时甚至会大于TCP窗口的初始大小，这会严重拖累发送请求的速度。因为它们需要等待带着ACK的响应回来以后，才能继续被发送；</p>
<p><font face="微软雅黑" size="3" color="Green">解决</font>：HTTP/2为此对消息头采用HPACK（专为HTTP/2头部设计的压缩格式）进行压缩传输，能够节省消息头占用的网络的流量。头部压缩需要在浏览器和服务器端之间：</p>
<ul>
<li>维护一份相同的静态字典，包含常见的头部名称，以及常见的头部名称和值的组合</li>
<li>维护一份相同的动态字典，可以动态的添加内容</li>
<li>通过静态Huffman编码对传输的首部字段进行编码</li>
</ul>
<h4 id="服务器推送"><a href="#服务器推送" class="headerlink" title="服务器推送"></a>服务器推送</h4><p>又叫缓存推送。主要的思想是：当一个客户端请求资源X，而服务器知道它很可能也需要资源Z的情况下，服务器可以在客户端发送请求前，主动将资源Z推送给客户端。这个功能帮助客户端将Z放进缓存以备将来之需。但客户端依然能自主选择是否需要中断该推送的流。如果不需要的话，客户端可以通过发送一个RST_STREAM帧来中止。</p>
<h4 id="重置（后悔药）"><a href="#重置（后悔药）" class="headerlink" title="重置（后悔药）"></a>重置（后悔药）</h4><p>HTTP/1缺点：当一个含有确切值的Content-Length的HTTP消息被送出之后，你就很难中断它了。当然可以断开整个TCP链接（但也不总是可以这样），这样导致的代价就是需要通过三次握手来重新建立一个新的TCP连接。<br>HTTP/2改进：我们可以通过发送RST_STREAM帧来实现只终止当前传输的消息并重新发送一个新的，从而避免浪费带宽和中断已有的连接。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://ye11ow.gitbooks.io/http2-explained/content/part2.html" target="_blank" rel="noopener">《http2》</a></p>
]]></content>
  </entry>
  <entry>
    <title>HTTP系列之HTTP</title>
    <url>/HTTP%E7%B3%BB%E5%88%97%E4%B9%8BHTTP/</url>
    <content><![CDATA[<p>前言：网络方面的知识是前端同学必不可少的了。加强基本功的修炼，才能在日常开发中快速定位到错误，和后端同学更有效率的合作。</p>
<h3 id="HTTP、HTTP2、HTTPS三者之间的关系：HTTP包括1-0、1-1、HTTP2-现在常用版本-、HTTP3-少-，HTTP2是HTTP的一个版本；HTTP和HTTPS区别在于HTTPS加密而HTTP不加密是明文传送；HTTP2解决了HTTP1-1的一些缺陷-线头阻塞，二进制传输、帧和流-头部压缩，主动推送-，最主要是解决了线头阻塞的问题。"><a href="#HTTP、HTTP2、HTTPS三者之间的关系：HTTP包括1-0、1-1、HTTP2-现在常用版本-、HTTP3-少-，HTTP2是HTTP的一个版本；HTTP和HTTPS区别在于HTTPS加密而HTTP不加密是明文传送；HTTP2解决了HTTP1-1的一些缺陷-线头阻塞，二进制传输、帧和流-头部压缩，主动推送-，最主要是解决了线头阻塞的问题。" class="headerlink" title="HTTP、HTTP2、HTTPS三者之间的关系：HTTP包括1.0、1.1、HTTP2(现在常用版本)、HTTP3(少)，HTTP2是HTTP的一个版本；HTTP和HTTPS区别在于HTTPS加密而HTTP不加密是明文传送；HTTP2解决了HTTP1.1的一些缺陷(线头阻塞，二进制传输、帧和流,头部压缩，主动推送)，最主要是解决了线头阻塞的问题。"></a>HTTP、HTTP2、HTTPS三者之间的关系：HTTP包括1.0、1.1、HTTP2(现在常用版本)、HTTP3(少)，HTTP2是HTTP的一个版本；HTTP和HTTPS区别在于HTTPS加密而HTTP不加密是明文传送；HTTP2解决了HTTP1.1的一些缺陷(线头阻塞，二进制传输、帧和流,头部压缩，主动推送)，最主要是解决了线头阻塞的问题。</h3><h3 id="不止一种握手"><a href="#不止一种握手" class="headerlink" title="不止一种握手"></a>不止一种握手</h3><ul>
<li>TCP 三次握手，归 HTTP</li>
<li>TLS 握手，归 HTTPS</li>
<li>WebSocket 握手，基于 TCP 协议，都能用</li>
</ul>
<h3 id="定义：-超文本传输协议，是一个应用层协议。"><a href="#定义：-超文本传输协议，是一个应用层协议。" class="headerlink" title="定义：   超文本传输协议，是一个应用层协议。"></a>定义：   超文本传输协议，是一个应用层协议。</h3><p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/%E6%B5%85%E8%AF%BBHTTP%E5%92%8CHTTPS/WechatIMG2.png" alt="cmd-markdown-logo"></p>
<h3 id="HTTP的作用："><a href="#HTTP的作用：" class="headerlink" title="HTTP的作用："></a>HTTP的作用：</h3><p>认证控制，同源控制，缓存控制，传输控制，会话控制</p>
<h3 id="HTTP的特点："><a href="#HTTP的特点：" class="headerlink" title="HTTP的特点："></a>HTTP的特点：</h3><ul>
<li>无状态的协议。无状态就是客户端的每次请求都没有关系，它们是独立的。</li>
<li>只能是客户端发起请求，服务器响应。服务器不能主动向客户端传递消息。</li>
<li>底层是基于TCP实现的。</li>
</ul>
<h3 id="HTTP传输过程详解："><a href="#HTTP传输过程详解：" class="headerlink" title="HTTP传输过程详解："></a>HTTP传输过程详解：</h3><ul>
<li>HTTP协议就是基于TCP/IP协议模型来传输信息的   </li>
<li>TCP三次握手(目的是同步连接双方的序列号和确认号并交换 TCP窗口大小信息)<br>客户端发送一个SYN段，并指明客户端的初始序列号，即ISN(c) <font face="微软雅黑" size="3" color="Green">=&gt;</font> 务端发送自己的SYN段作为应答，同样指明自己的ISN(s) <font face="微软雅黑" size="3" color="Green">=&gt;</font> 为了确认服务器端的SYN，客户端将ISN(s)+1作为返回的ACK数值</li>
<li>TCP四次挥手(当客户端和服务器通过三次握手建立了TCP连接以后，当数据传送完毕，肯定是要断开TCP连接的啊)<br><font face="微软雅黑" size="3" color="Green">第一次分手</font>：主机1（可以使客户端，也可以是服务器端），设置Sequence Number，向主机2发送一个FIN报文段；此时，主机1进入FIN_WAIT_1状态；这表示主机1没有数据要发送给主机2了；<br><font face="微软雅黑" size="3" color="Green">第二次分手</font>：主机2收到了主机1发送的FIN报文段，向主机1回一个ACK报文段，Acknowledgment Number为Sequence Number加1；主机1进入FIN_WAIT_2状态；主机2告诉主机1，我“同意”你的关闭请求；<br><font face="微软雅黑" size="3" color="Green">第三次分手</font>：主机2向主机1发送FIN报文段，请求关闭连接，同时主机2进入LAST_ACK状态；<br><font face="微软雅黑" size="3" color="Green">第四次分手</font>：主机1收到主机2发送的FIN报文段，向主机2发送ACK报文段，然后主机1进入TIME_WAIT状态；主机2收到主机1的ACK报文段以后，就关闭连接；此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。 </li>
</ul>
<h3 id="URL详解："><a href="#URL详解：" class="headerlink" title="URL详解："></a>URL详解：</h3><blockquote>
<p>url大体结构如下:<a href="http://www.temas.com/myBlog/file/date.php?name=yuchao&amp;age=26#modfiled" target="_blank" rel="noopener">http://www.temas.com/myBlog/file/date.php?name=yuchao&amp;age=26#modfiled</a><br><font face="微软雅黑" size="3" color="Green">这个url分为几个部分：</font><br>http：表示底层使用的协议（如http、https、ftp）<br><a href="http://www.temas.com：表示服务器域名（或者是ip地址）" target="_blank" rel="noopener">www.temas.com：表示服务器域名（或者是ip地址）</a><br>/myBlog/file/date.php：表示资源路径<br>?name=yuchao&amp;age=26：发送给服务器数据<br>#modfiled：锚点</p>
</blockquote>
<h3 id="HTTP消息结构："><a href="#HTTP消息结构：" class="headerlink" title="HTTP消息结构："></a>HTTP消息结构：</h3><p>整个http消息结构分为request以及response两部分：</p>
<p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/%E6%B5%85%E8%AF%BBHTTP%E5%92%8CHTTPS/WechatIMG4.png" alt="cmd-markdown-logo"></p>
<p>上面第一部分是请求资源地址以及请求方式属于request部分.<br>第二部分是返回状态码，属于response部分.<br>第三部分是request部分，第四部分是response部分.<br>总体来说整个请求分为两个部分我们来分析里面主要的结构如下.   </p>
<p><font face="微软雅黑" size="3" color="Green">request部分分析：</font>  </p>
<ul>
<li><font face="微软雅黑" size="3" color="Green">请求的url</font>即我们地址栏输入的url或者ajax请求的那个参数url。</li>
<li><font face="微软雅黑" size="3" color="Green">请求方式</font>：常用的有get、post以及head请求：   </li>
<li><font face="微软雅黑" size="3" color="Green">Accept</font>：表示浏览器可以接受的类型，一般浏览器都会发给服务器*表示通配所有类型。text/html类型就表示我们常说的html文档。</li>
<li><font face="微软雅黑" size="3" color="Green">Accept-Encoding</font>：浏览器自身声明接受的编码方式，通常是压缩方法；</li>
<li><font face="微软雅黑" size="3" color="Green">Accept-Language</font>：浏览器自身声明可以接受的语言例如中文：zh-CN；</li>
<li><font face="微软雅黑" size="3" color="Green">Cache-Control</font>：浏览器缓存机制，一般会有max-age值，或者no-cache或者public、private；</li>
<li><font face="微软雅黑" size="3" color="Green">Connection</font>：可选keep-alive、close</li>
<li><font face="微软雅黑" size="3" color="Green">cookie</font><br>:将cookie数据发送给服务器   </li>
<li><font face="微软雅黑" size="3" color="Green">User-Agent</font>：客户端使用的浏览器以及操作系统</li>
<li><font face="微软雅黑" size="3" color="Green">If-Modified-Since</font>：和 last-modified 一起工作浏览器缓存内容最后修改时间;</li>
<li><font face="微软雅黑" size="3" color="Green">if-None-Match</font><br>:和ETag一起工作，比较两者值 获取内容是否改变。</li>
</ul>
<p><font face="微软雅黑" size="3" color="Green">response部分分析：</font> </p>
<ul>
<li><font face="微软雅黑" size="3" color="Green">Keep-Alive:</font> 长连接设置的值，有timeout以及max两个值，只有当connection为keep-alive并且服务端支持时候才会生效</li>
<li><font face="微软雅黑" size="3" color="Green">Content-Length</font> 表示返回实体内容长度大小，一般应用在返回静态页面或者一张图片并且数据量不大时候被设置；大小为bite字节</li>
<li><font face="微软雅黑" size="3" color="Green">Transfer-Encoding</font>即服务器端不是一个已知的固定的返回实体时候，服务器会一边产生数据，一边发送给客户端，这时候服务器就需要用Transfer-Encoding。</li>
<li><font face="微软雅黑" size="3" color="Green">Date</font>：服务器返回数据时间，我经常就用这个值来取得服务器时间</li>
<li><font face="微软雅黑" size="3" color="Green">Etag</font>与if-none-match配合使用；</li>
<li><font face="微软雅黑" size="3" color="Green">Last-Modified:</font>用于指示资源的最后修改日期和时间。一般都用来处理缓存，</li>
<li><font face="微软雅黑" size="3" color="Green">Content-Type</font>WEB服务器告诉浏览器自己响应的对象的类型和字符集,例如:Content-Type: text/html; charset=UTF-8，Content-Type: image/jpeg</li>
<li><font face="微软雅黑" size="3" color="Green">server</font>：指明服务器软件版本；</li>
<li><font face="微软雅黑" size="3" color="Green">Referer</font>：告诉服务器该请求是在哪个链接发过来的，据此可以统计从某个页面跳转过来次数；</li>
<li><font face="微软雅黑" size="3" color="Green">X-powered0by</font>：表示该网站开发技术<br><font face="微软雅黑" size="3" color="Green">常见状态码：</font> </li>
<li>200：客户端请求成功。 </li>
<li>304：使用的缓存文件  </li>
<li>400：客户端请求有语法错误，不能被服务器所理解。   </li>
<li>401：请求未经授权，这个状态码必须和WWW-Authntiate报头域一起使用。   </li>
<li>403：服务器收到请求，但拒绝提供服务。   </li>
<li>404：请求资源不存在，如：输入了错误的URL。   </li>
<li>500：服务器报错。   </li>
<li>503：服务器当前不能处理客户端的请求，一段时间后可恢复正常。</li>
</ul>
<h3 id="HTTP和HTTPS的区别："><a href="#HTTP和HTTPS的区别：" class="headerlink" title="HTTP和HTTPS的区别："></a>HTTP和HTTPS的区别：</h3><blockquote>
<ul>
<li><font face="微软雅黑" size="3" color="Green">开头：</font>HTTP:以http:// 开头；HTTPS: 以https:// 开头。</li>
<li><font face="微软雅黑" size="3" color="Green">传输信息安全性不同：</font>HTTP:无法加密,信息是明文传输,不安全；HTTPS:具有SSL加密传输协议，更加安全。</li>
<li><font face="微软雅黑" size="3" color="Green">证书申请方式不同：</font>HTTP:无需证书或者可以免费申请，HTTPS:需要CA机构wosign的颁发的SSL证书。</li>
<li><font face="微软雅黑" size="3" color="Green">端口不同：</font>HTTP:标准端口8080，HTTPS:标准端口443。</li>
<li><font face="微软雅黑" size="3" color="Green">连接方式不同：</font>HTTP:连接很简单，是无状态的；HTTPS:是由SSL＋HTTP协议构建的可进行加密传输、身份认证的网络协议。<br><font face="微软雅黑" size="3" color="Green">总结：</font>HTTPS=HTTP+SSL(SSL协议是在客户端与服务器端建立SSL安全通道)如下图：<br><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/%E6%B5%85%E8%AF%BBHTTP%E5%92%8CHTTPS/WechatIMG1%201.png" alt="cmd-markdown-logo"></li>
</ul>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Node.js刷博客访问量</title>
    <url>/Node-js%E5%88%B7%E5%8D%9A%E5%AE%A2%E8%AE%BF%E9%97%AE%E9%87%8F/</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>之前总是会碰到需要点赞的或者看文章会有阅读量的，就想着要是可以自动点就好了。正好上篇文章把博客的阅读量设置了，想想现在可以写个脚本让他自动刷阅读量了。。。。嘻嘻😬(有点子小开心!)</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>1.新建一个文件夹<strong>js</strong>,在这个文件夹下新建一个<strong>count.js</strong>文件，在这个文件中把以下代码复制进去：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const puppeteer = require(&apos;puppeteer&apos;);</span><br><span class="line"></span><br><span class="line">// 延时器</span><br><span class="line">let timeout = function (delay) &#123;</span><br><span class="line">  console.log(&apos;延迟函数：&apos;, `延迟 $&#123;delay&#125; 毫秒`)</span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        resolve(1)</span><br><span class="line">      &#125; catch (error) &#123;</span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Traffic &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    // 最大数量</span><br><span class="line">    this.maxIndex = 40</span><br><span class="line">    // 初始化</span><br><span class="line">    this.init()</span><br><span class="line">  &#125;</span><br><span class="line">  // 初始化函数</span><br><span class="line">  async init() &#123;</span><br><span class="line">    console.log(&apos;正在启动浏览器...&apos;)</span><br><span class="line">    this.browser = await puppeteer.launch(&#123;</span><br><span class="line">      // executablePath: &apos;C:\\Users\\S\\Desktop\\chrome-win32\\chrome.exe&apos;, // chromium安装路径</span><br><span class="line">      headless: false, // 是否隐藏浏览器</span><br><span class="line">    &#125;);</span><br><span class="line">    this.page = await this.browser.newPage();</span><br><span class="line">    // 顺序爬取页面</span><br><span class="line">    for (let i = 30; i &lt; this.maxIndex; i++) &#123;</span><br><span class="line">      await this.gotoPage()</span><br><span class="line">    &#125;</span><br><span class="line">    // this.closeBrowser()</span><br><span class="line">  &#125;</span><br><span class="line">  // 抓取页面内容</span><br><span class="line">  async gotoPage() &#123;</span><br><span class="line">    // 延时 1000 毫秒</span><br><span class="line">    await timeout(1000);</span><br><span class="line">    console.log(&apos;正在打开新页面...&apos;)</span><br><span class="line">    await this.page.goto(&apos;需刷的页面地址&apos;, &#123;</span><br><span class="line">      timeout: 0</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  // 关闭浏览器</span><br><span class="line">  async closeBrowser() &#123;</span><br><span class="line">    console.log(&apos;正在关闭浏览器...&apos;)</span><br><span class="line">    await this.browser.close()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 启用爬虫</span><br><span class="line">new Traffic()</span><br></pre></td></tr></table></figure>

<p>记得要安装<code>puppeteer</code></p>
<p>2.进入<code>js</code>文件夹，运行命令行<code>node count.js</code>这样就能看到一个新开的窗口在自动刷访问量了。如下图：(由于自己的博客图片出不来刷新一次需要时间太长，用脚本刷的时候会报错，因此偷偷地用老大的博客来试验一下。。。嘿嘿😝)<br><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/fangwen01.png" alt="cmd-markdown-logo"></p>
<p>不过博客的本意还是为了巩固记录自己所学的东西，同时也可以分享给别人，让有同样需求的小伙伴可以少走点弯路。因此还是不建议去刷浏览量的啦！！！！</p>
]]></content>
  </entry>
  <entry>
    <title>Vue 组件通信</title>
    <url>/Vue%20%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h2 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h2><h3 id="props-和-emit"><a href="#props-和-emit" class="headerlink" title="props 和 $emit"></a>props 和 $emit</h3><p>props: 父 =&gt; 子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">父：</span><br><span class="line"></span><br><span class="line">&lt;child :message=&quot;‘需要传的东西’&quot;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">子：</span><br><span class="line"></span><br><span class="line">props: &#123;</span><br><span class="line">    message: &#123;</span><br><span class="line">        type: string</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>$emit:<br>子 =&gt; 父</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">父：</span><br><span class="line"></span><br><span class="line">&lt;child @HHH=&apos;hhh&apos;&gt;&lt;/child&gt;</span><br><span class="line"></span><br><span class="line">hhh(val)&#123;</span><br><span class="line">    console.log(val) // 123</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">子：</span><br><span class="line"></span><br><span class="line">&lt;div @click=childClick()&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">childClick()&#123;</span><br><span class="line">    this.$emit(&apos;HHH&apos;,123)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="子组件要修改父组件-sync"><a href="#子组件要修改父组件-sync" class="headerlink" title="子组件要修改父组件 sync"></a>子组件要修改父组件 sync</h3><p>sync 是一个语法糖。其实就是 $emit 中使用的一个简写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">子：</span><br><span class="line"></span><br><span class="line">fn() &#123;</span><br><span class="line">    this.$emit(&apos;updata:money&apos;,100)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">父：</span><br><span class="line"></span><br><span class="line">&lt;demo :money=&quot;money&quot; @updata:money=&quot;fn&quot;&gt; // 原本的写法</span><br><span class="line"></span><br><span class="line">&lt;demo :money.sync=&quot;money&quot;&gt;  // sync的写法</span><br></pre></td></tr></table></figure>

<p>总结： 当父组件中有类似 :money=”money” @updata:money=”fn” 这种写法的时候，就可以直接改成 :money.sync=”money” 这种写法</p>
<h3 id="refs-和-this-parent"><a href="#refs-和-this-parent" class="headerlink" title="$refs 和 this.$parent"></a>$refs 和 this.$parent</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">父：</span><br><span class="line"></span><br><span class="line">&lt;child $ref=&apos;lzzhyChild&apos;&gt;&lt;/child&gt;</span><br><span class="line"></span><br><span class="line">methods里面，可以通过操作this.$refs.lzzhyChild.xxx来操作子组件</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">子：</span><br><span class="line"></span><br><span class="line">methods里面，可以通过操作this.$parent.xxx来操作父组件</span><br></pre></td></tr></table></figure>

<p>总结：通过this.$refs.lzzhyChild.xxx和this.$parent.xxx可以分别操作父子中的任何东西(比如方法：this.$refs.lzzhyChild.xxx(),弹框flagDialog：this.$refs.lzzhyChild.xxx) ，就跟在本页面一样操作,调用方法需要()。</p>
]]></content>
  </entry>
  <entry>
    <title>学习笔记-代码技巧</title>
    <url>/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>每个程序员都有一个同样的学习过程：实现业务代码 -&gt; 提高代码可读性。</p>
<h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><p>1。 可返回某个指定的字符串值在字符串中首次出现的位置<br>stringObject.indexOf(‘规定需检索的字符串值’,’规定在字符串中开始检索的位置,合法取值 0 到 stringObject.length - 1’)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var aaa = &apos;hello lzzhy&apos;;</span><br><span class="line">aaa.indexOf(&apos;o&apos;); // 4</span><br></pre></td></tr></table></figure>

<p>2。 检查字符串中是否包含指定的子字符串,没找到 该值 则返回 -1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bad:</span><br><span class="line">if (this.$route.path.indexOf(&apos;/reports/&apos;) != -1) &#123; &#125;</span><br></pre></td></tr></table></figure>

<p>因为 &gt;=0 和 ==-1 这样的写法称为“抽象渗漏”，暴露了底层的细节。而~和indexOf()一起可以将结果强制类型转换为真/假</p>
<h3 id><a href="#" class="headerlink" title="~"></a>~</h3><p>1。 一个 ~ 是强制转化为布尔值。跟 !! 很像。</p>
<p>~ 的用处：~ 和 indexOf() 一起可以将结果强制类型转换为真/假</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">good: </span><br><span class="line">if ( ~this.$route.path.indexOf(&apos;/reports/&apos;)) &#123;  &#125;</span><br></pre></td></tr></table></figure>

<p>如果 indexOf(..) 返回 -1 ，~ 将值转化为假值 0，其他情况一律转为真</p>
<p>2。 2个 ~ 是强制转换为数字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a=123.36896335 或 var a=‘123.368’</span><br><span class="line">~~a;  //123</span><br></pre></td></tr></table></figure>

<h3 id="显式强制转化为布尔值"><a href="#显式强制转化为布尔值" class="headerlink" title="!! 显式强制转化为布尔值"></a>!! 显式强制转化为布尔值</h3><p>一元运算符 ! 显式的将值强制类型转化为布尔值(真 转 假，或 假 转 真)。因此最常用的是 !! ,因为第二个 ! 会将结果转化为原值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a = &quot;0&quot;;</span><br><span class="line">Boolean(a);  // true</span><br><span class="line">!a;  // false</span><br><span class="line">!!a;  // true</span><br></pre></td></tr></table></figure>

<h3 id="字符串转数字"><a href="#字符串转数字" class="headerlink" title="字符串转数字"></a>字符串转数字</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a=123.36896335 或 var a=‘123.36896335’</span><br><span class="line">+a;    //123.37   </span><br><span class="line">a|0;  //123    </span><br><span class="line">~~a;  //123</span><br></pre></td></tr></table></figure>

<h2 id="和"><a href="#和" class="headerlink" title="== 和 ==="></a>== 和 ===</h2><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul>
<li>除了0之外的所有数字，转换为布尔型都为true。</li>
<li>除了“ ”之外的所有字符，转换为布尔型都为true。</li>
<li>null和undefined转换为布尔型为false。</li>
</ul>
<p>总结： 0, “”, undefined, null 转换为布尔值都为 false</p>
<h3 id="什么时候使用-，什么时候使用"><a href="#什么时候使用-，什么时候使用" class="headerlink" title="什么时候使用===，什么时候使用=="></a>什么时候使用===，什么时候使用==</h3><ul>
<li>除了==null外，其他地方用===<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const obj = &#123; a: 1 &#125;</span><br><span class="line"></span><br><span class="line">if(obj.b == null) &#123;&#125;</span><br><span class="line">// 相当于</span><br><span class="line">if(obj.b === null || obj.b === undefined) &#123;&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="两种模式取代-if…else…"><a href="#两种模式取代-if…else…" class="headerlink" title="两种模式取代 if…else…"></a>两种模式取代 if…else…</h2><h3 id="-1"><a href="#-1" class="headerlink" title></a></h3>]]></content>
  </entry>
  <entry>
    <title>工作笔记-常用功能</title>
    <url>/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0-%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>在实际项目过程中有很多基本的功能经常会遇到，因此统一收集一下可以更好地进行理解。</p>
<h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><h3 id="链接跳转传参（单页面）"><a href="#链接跳转传参（单页面）" class="headerlink" title="链接跳转传参（单页面）"></a>链接跳转传参（单页面）</h3><blockquote>
<p><font face="微软雅黑" size="3" color="Green">法一（带问号的）：</font><br>传：this.$router.push({path: ‘’, query: { 参数名：参数值}})<br>收：this.$route.query.参数名<br><font face="微软雅黑" size="3" color="Green">法二（不带问号的）：</font><br>传：this.$router.push({path:’/xx/xx’ + val.vv})<br>收：this.$route.path.split(‘/‘).reverse()[0]<br>this.$router.push():跳转到不同的url，但这个方法回向history栈添加一个记录，点击后退会返回到上一个页面<br><font face="微软雅黑" size="3" color="Green">法三/四：</font><br>this.$router.replace():不会有记录<br>this.$router.go(n):n可为正数可为负数。正数返回上一个页面,类似 window.history.go(n)</p>
</blockquote>
<h3 id="跳转新打开一个窗口-在函数中写法"><a href="#跳转新打开一个窗口-在函数中写法" class="headerlink" title="跳转新打开一个窗口(在函数中写法)"></a>跳转新打开一个窗口(在函数中写法)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const a = document.createElement(&apos;a&apos;)</span><br><span class="line">a.href = &apos;https://www.baidu.com&apos;</span><br><span class="line">a.target = &apos;_blank&apos;</span><br><span class="line">a.rel = &apos;noopener noreferrer&apos;  // a 标签新增了这个</span><br><span class="line">document.body.appendChild(a)</span><br><span class="line">a.click()</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    document.body.removeChild(a)</span><br><span class="line">&#125;, 500)</span><br></pre></td></tr></table></figure>

<h2 id="函数封装："><a href="#函数封装：" class="headerlink" title="函数封装："></a>函数封装：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const xxx = (phone) =&gt; &#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 调用</span><br><span class="line">xxx(phone)</span><br></pre></td></tr></table></figure>

<h2 id="域名环境配置：修改单个接口的域名-智慧庭审wis"><a href="#域名环境配置：修改单个接口的域名-智慧庭审wis" class="headerlink" title="域名环境配置：修改单个接口的域名(智慧庭审wis..)"></a>域名环境配置：修改单个接口的域名(智慧庭审wis..)</h2><p>在 api 文件夹下新建一个 .js文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import http from &apos;@/config/httpServer.js&apos;</span><br><span class="line"></span><br><span class="line">let baseURL, protocol = &apos;https://&apos;,</span><br><span class="line">    hostName = &apos;&apos;;</span><br><span class="line">if (process.env.NODE_ENV === &apos;development&apos;) &#123;</span><br><span class="line">    hostName = &apos;自己需要的域名&apos;</span><br><span class="line">&#125; else if (process.env.NODE_ENV === &apos;production&apos;) &#123;</span><br><span class="line">    if (process.env.VUE_APP_TYPE === &quot;test&quot;) &#123;</span><br><span class="line">        hostName = &apos;自己需要的域名&apos;</span><br><span class="line">    &#125; else if (process.env.VUE_APP_TYPE === &quot;dev&quot;) &#123;</span><br><span class="line">        hostName = &apos;自己需要的域名&apos;</span><br><span class="line">    &#125; else if (process.env.VUE_APP_TYPE === &apos;prod&apos;) &#123;</span><br><span class="line">        hostName = &apos;自己需要的域名&apos;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        hostName = &apos;自己需要的域名&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">baseURL = protocol + hostName</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export const encryptRefer = (data) =&gt; &#123;</span><br><span class="line">    return http(&#123;</span><br><span class="line">        url: &apos;/encrypt&apos;,</span><br><span class="line">        baseURL   // 修改后需要的域名</span><br><span class="line">    &#125;, data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="登录功能时，账号密码自动填充"><a href="#登录功能时，账号密码自动填充" class="headerlink" title="登录功能时，账号密码自动填充"></a>登录功能时，账号密码自动填充</h2><blockquote>
<p><font face="微软雅黑" size="3" color="Green">在同域名下，chrome会进行自动填充？</font><br>当input = “password”的时候，会自动将前一个input默认为<font face="微软雅黑" size="3" color="green">账号</font>而填充:  </p>
</blockquote>
<p>解决： </p>
<ul>
<li>autoComplate = “off” 或者 autoComplate = “new-password”</li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;el-input  </span><br><span class="line">    readonly</span><br><span class="line">    @focus=&quot;handleFocusEvent&quot;</span><br><span class="line">&gt;&lt;/el-input&gt;</span><br><span class="line"></span><br><span class="line">handleFocusEvent(event) &#123;</span><br><span class="line">    event.target &amp;&amp; event.target.removeAttribute(&apos;readonly&apos;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="SessionStorage存取使用："><a href="#SessionStorage存取使用：" class="headerlink" title="SessionStorage存取使用："></a>SessionStorage存取使用：</h2><blockquote>
<p>存：sessionStorage.user = Json.stringify(res)<br>取：JSON.parse(sessionStorage.getItem(‘user’))<br>清除：sessionStorage.removeItem(‘user’)<br><font face="微软雅黑" size="3" color="Green">注：其中 user是可改的，res是存的数据 </font></p>
</blockquote>
<h2 id="Tab切换："><a href="#Tab切换：" class="headerlink" title="Tab切换："></a>Tab切换：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive&gt;  //减少性能消耗</span><br><span class="line">    &lt;div class=&quot;tabs&quot;&gt;</span><br><span class="line">        &lt;span v-for=&quot;(item,index) in tabItems&quot;</span><br><span class="line">            :class=&quot;&#123;&apos;on&apos;:currentTab === index&#125;&quot;</span><br><span class="line">            @click=&quot;changeTab(item,index)</span><br><span class="line">            :key=&quot;index&quot;&gt;&#123;&#123;item.name&#125;&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line"></span><br><span class="line">data() &#123;</span><br><span class="line">    tabItems: [&#123;&#125;,&#123;&#125;],</span><br><span class="line">    currentTab: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changeTab(item,index) &#123;</span><br><span class="line">    this.currentTab = index</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="el-date-picker-日期控件"><a href="#el-date-picker-日期控件" class="headerlink" title="el-date-picker 日期控件"></a>el-date-picker 日期控件</h2><h3 id="默认时间为昨天"><a href="#默认时间为昨天" class="headerlink" title="默认时间为昨天"></a>默认时间为昨天</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var timestamp = (new Date()).getTime()-24*60*60*1000;</span><br><span class="line">let yesterday = dateformat(new Date(timestamp),&apos;yyyy-MM-dd&apos;);</span><br></pre></td></tr></table></figure>

<h3 id="下拉默认可选展示当前月和上个月"><a href="#下拉默认可选展示当前月和上个月" class="headerlink" title="下拉默认可选展示当前月和上个月"></a>下拉默认可选展示当前月和上个月</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;el-date-picker</span><br><span class="line">:default-value=&quot;defaultValue&quot;&gt;</span><br><span class="line">&lt;/el-date-picker&gt;</span><br><span class="line"></span><br><span class="line">return &#123;</span><br><span class="line">    defaultValue: new Date().getTime() - 3600 * 1000 * 24 * 30,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="EChart"><a href="#EChart" class="headerlink" title="EChart"></a>EChart</h2><p>过程：</p>
<ul>
<li><p>cnpm install echarts –save</p>
</li>
<li><p>cnpm install –save resize -detector (这个是控制伸缩的，没有这个需求可以不安装)</p>
</li>
<li><p>import Echarts from ‘./ECharts’ =&gt; 要去复制ECharts这里的东西，路径要根据具体的位置修改</p>
</li>
<li><p>import ‘echarts/lib/chart/bar’</p>
</li>
<li><p>import ‘echarts/lib/component/tooltip’  //柱状</p>
</li>
<li><p>import ‘echarts/lib/chart/pie’</p>
</li>
<li><p>import ‘echarts/lib/component/legend’</p>
</li>
<li><p>import ‘echarts/lib/chart/line’</p>
</li>
<li><p>import ‘echarts/lib/chart/bar’</p>
</li>
<li><p>再根据不同的echart图去配置不同的，具体参考 环资:resourceCerter =&gt; plateformStatistics</p>
</li>
</ul>
<h2 id="与表单相关"><a href="#与表单相关" class="headerlink" title="与表单相关"></a>与表单相关</h2><h3 id="当el-radio使用v-for循环时，要使其中一个el-radio不可点击"><a href="#当el-radio使用v-for循环时，要使其中一个el-radio不可点击" class="headerlink" title="当el-radio使用v-for循环时，要使其中一个el-radio不可点击"></a>当el-radio使用v-for循环时，要使其中一个el-radio不可点击</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;el-radio-group v-model=&quot;typeform.type&quot;&gt;</span><br><span class="line">    &lt;el-radio</span><br><span class="line">        v-for=&quot;(item, index) in typeList&quot;</span><br><span class="line">        :key=&quot;index&quot;</span><br><span class="line">        :label=&quot;item.code&quot;</span><br><span class="line">        :disabled=&quot;item.dis&quot;&gt;</span><br><span class="line">            &#123;&#123;item.name&#125;&#125;</span><br><span class="line">    &lt;/el-radio&gt;</span><br><span class="line">&lt;/el-radio-group&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typeList:[</span><br><span class="line">    &#123;</span><br><span class="line">        name:&quot;联席会议&quot;,</span><br><span class="line">        code:&quot;MEETING_JOINT&quot;,</span><br><span class="line">        dis: false</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        name:&quot;磋商会议&quot;,</span><br><span class="line">        code:&quot;MEETING_ONLINE&quot;,</span><br><span class="line">        dis: false</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        name:&quot;在线庭审&quot;,</span><br><span class="line">        code:&quot;MEETING_COURT&quot;,</span><br><span class="line">        dis: this.$route.query.activeName == &apos;first&apos; ? true : false  // 判断为MEETING_COURT时这个不可点</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="表单整个校验流程"><a href="#表单整个校验流程" class="headerlink" title="表单整个校验流程"></a>表单整个校验流程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;el-form</span><br><span class="line">	:rules=&quot;rules&quot;</span><br><span class="line">	ref=&quot;basicform&quot;</span><br><span class="line">	:model=&quot;basicform&quot;</span><br><span class="line">&gt;</span><br><span class="line">    &lt;el-form-item label=&quot;身份证号：&quot; prop=&quot;idcard&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;basicform.idcard&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">    &lt;/el-form-item&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br><span class="line"></span><br><span class="line">data() &#123;</span><br><span class="line">    // 身份证号</span><br><span class="line">    var validateId = (rule, value, callback) =&gt; &#123;</span><br><span class="line">        var myreg = /^(\d&#123;6&#125;)(\d&#123;4&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)(\d&#123;3&#125;)([0-9]|X)$/;</span><br><span class="line">        if(value) &#123;</span><br><span class="line">            if (!myreg.test(value)) &#123;</span><br><span class="line">                callback(new Error(&apos;身份证格式不正确&apos;))</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                callback();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            callback();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    return &#123;</span><br><span class="line">        basicform: &#123;</span><br><span class="line">            idcard: &quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rules: &#123;</span><br><span class="line">    // required: true 是表示必填，加了这个才有必填的红星</span><br><span class="line">    idcard: [&#123;required: true, validator: validateId, trigger: &quot;blur&quot; &#125;],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 提交时校验</span><br><span class="line">methods: &#123;</span><br><span class="line">    addservicesave() &#123;</span><br><span class="line">        let valiflag = true;</span><br><span class="line">        this.$refs[&quot;basicform&quot;].validate((valid) =&gt; &#123;</span><br><span class="line">			if (!valid) &#123;</span><br><span class="line">                valiflag = false;</span><br><span class="line">				return false;  // 这个是校验不通过时对应输入框出现红框</span><br><span class="line">			&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        if (!valiflag) &#123;</span><br><span class="line">            return;  // 这个是校验不通过时return false,不执行下面的操作</span><br><span class="line">        &#125;</span><br><span class="line">        // 以下可以写接口请求等各种</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="表单提交："><a href="#表单提交：" class="headerlink" title="表单提交："></a>表单提交：</h3><ol>
<li>确认添加成功时使用以下两个：清空:this.addRoleForm = Object.assign({},{})，重置必填的校验:this.$refs[‘addRoleForm’].resetFields()。写在请求成功后的里面。</li>
<li>:label为展示在页面的数据，也是v-model对应的。</li>
<li>获取下拉列表几个值的方法：<br> (1).filter(const roleCode = this.下拉列表数据.filter(item =&gt; item =&gt; item.xxx == this.想匹配的数据.bbb))[0]。<br> (2). 在el-select中加 @change=”xxx”&gt;<pre><code>xxx(val){
    clg(val)
}</code></pre></li>
</ol>
<h2 id="与表格相关"><a href="#与表格相关" class="headerlink" title="与表格相关"></a>与表格相关</h2><h3 id="表格自定义内容："><a href="#表格自定义内容：" class="headerlink" title="表格自定义内容："></a>表格自定义内容：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;el-table </span><br><span class="line">  :header-cell-style=&quot;&#123;background:&apos;#f2f4f6&apos;, color:&apos;#333333&apos;, &apos;text-align&apos;:&apos;center&apos;,&apos;font-size&apos;:&apos;14px&apos;&#125;&quot;</span><br><span class="line">  v-loading=&quot;loading&quot;</span><br><span class="line">&gt;</span><br><span class="line">    &lt;el-table-column label = &quot;序号&quot; fixed&gt;</span><br><span class="line">        &lt;template slot-scope = &quot;scoped&quot;&gt;</span><br><span class="line">            &lt;span&gt;&#123;&#123;scope.$index + (tableList.pagination.startRow + 1)&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/el-table-column&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-table-column label = &quot;日期&quot;&gt;</span><br><span class="line">        &lt;template slot-scope = &quot;scoped&quot;&gt;</span><br><span class="line">            &lt;span&gt;&#123;&#123;scope.row.createTime&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/el-table-column&gt;</span><br><span class="line">&lt;/el-table&gt;</span><br></pre></td></tr></table></figure>

<h3 id="分页："><a href="#分页：" class="headerlink" title="分页："></a>分页：</h3><h4 id="后端分页"><a href="#后端分页" class="headerlink" title="后端分页:"></a>后端分页:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;el-pagination</span><br><span class="line">    background</span><br><span class="line">    layout=&quot;prev,pager,next&quot;</span><br><span class="line">    :total=&quot;tableList.pagination.totalRows&quot;</span><br><span class="line">    @current-change=&quot;changePage&quot;</span><br><span class="line">    :current-page=&quot;tableList.pagination.pageIndex || 0&quot;</span><br><span class="line">    :page-size=&quot;tableList.pagination.pageSize&quot;</span><br><span class="line">    :page-count= &quot;tableList.pagination.totalPage || 0&quot;</span><br><span class="line">&gt;</span><br><span class="line">&lt;/el-pagination&gt;</span><br><span class="line"></span><br><span class="line">tableList:&#123;</span><br><span class="line">    backStageUserList: [],</span><br><span class="line">    pagination:&#123;&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">userList(param) &#123;</span><br><span class="line">    let params = &#123;</span><br><span class="line">        &quot;pageIndex&quot;: 1,</span><br><span class="line">        &quot;pageSize&quot;: 10,</span><br><span class="line">        ...param</span><br><span class="line">    &#125;</span><br><span class="line">    userList(params).then((res) =&gt; &#123;</span><br><span class="line">        if(res.data.code === 1000) &#123;</span><br><span class="line">            const &#123; pageIndex,pageSize,startRow,totalPages,totalRows,list&#125; = res.data.data;</span><br><span class="line">            this.tableList.backStageUserList = list;</span><br><span class="line">            this.tableList.pagination = &#123; pageIndex,pageSize,startRow,totalPages,totalRows &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,(err) =&gt; &#123;</span><br><span class="line">        this.$message.error(err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changePage(page) &#123;</span><br><span class="line">    this.userList(&#123;pageIndex: page&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="前端分页，后端只返回总数据-就是拿到后端返回的所有数据通过分页将数据进行分割，再将分割好了之后的数据放入表格中通过表格展示。-可参考vue-ele前端处理数据做分页"><a href="#前端分页，后端只返回总数据-就是拿到后端返回的所有数据通过分页将数据进行分割，再将分割好了之后的数据放入表格中通过表格展示。-可参考vue-ele前端处理数据做分页" class="headerlink" title="前端分页，后端只返回总数据:(就是拿到后端返回的所有数据通过分页将数据进行分割，再将分割好了之后的数据放入表格中通过表格展示。)可参考vue+ele前端处理数据做分页"></a>前端分页，后端只返回总数据:(就是拿到后端返回的所有数据通过分页将数据进行分割，再将分割好了之后的数据放入表格中通过表格展示。)可参考<a href="https://blog.csdn.net/Ms_alinda/article/details/99696296" target="_blank" rel="noopener">vue+ele前端处理数据做分页</a></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;el-table :data=&quot;newOrgListData&quot;&gt;</span><br><span class="line">&lt;/el-table&gt;</span><br><span class="line"></span><br><span class="line">&lt;el-pagination</span><br><span class="line">    background</span><br><span class="line">    layout=&quot;prev, pager, next&quot;</span><br><span class="line">    :total=&quot;orgListData.length&quot;</span><br><span class="line">    :page-size=&quot;5&quot;</span><br><span class="line">    :current-page.sync=&quot;currentPage&quot;</span><br><span class="line">    @current-change=&quot;handleCurrentChange&quot;</span><br><span class="line">    prev-text=&quot;上一页&quot;</span><br><span class="line">    next-text=&quot;下一页&quot;</span><br><span class="line">&gt;&lt;/el-pagination&gt;</span><br><span class="line"></span><br><span class="line">data() &#123;</span><br><span class="line">    currentPage: 1,</span><br><span class="line">    newOrgListData: [],</span><br><span class="line">    orgListData: []</span><br><span class="line">&#125;</span><br><span class="line">xxx().then((res) =&gt; &#123;</span><br><span class="line">    if(res.data.code === 1000) &#123;</span><br><span class="line">        this.orgListData = res.data.data</span><br><span class="line">        this.handleCurrentChange(1)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">handleCurrentChange(index) &#123;   //currentPage变动时触发，index值为当前页</span><br><span class="line">      this.currentpageOrg = index</span><br><span class="line">      this.newOrgListData = this.orgListData.slice((index - 1) * 5, index * 5) //根据每页5条将初始数据orgListData进行裁剪赋值给新数组newOrgListData</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<h2 id="地址联动"><a href="#地址联动" class="headerlink" title="地址联动"></a>地址联动</h2><h3 id="一排或一列-下拉形式联动"><a href="#一排或一列-下拉形式联动" class="headerlink" title="(一排或一列)下拉形式联动"></a>(一排或一列)下拉形式联动</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;el-form-item label=&quot;现居地址：&quot;&gt;</span><br><span class="line">    &lt;el-select</span><br><span class="line">        v-model=&quot;ruleForm.codeprovince&quot;</span><br><span class="line">        @change=&quot;changearea(&apos;province&apos;)&quot;</span><br><span class="line">        placeholder=&quot;请选择省&quot;</span><br><span class="line">        :disabled=&quot;disabledFlag&quot;</span><br><span class="line">    &gt;</span><br><span class="line">        &lt;el-option</span><br><span class="line">            v-for=&quot;(item, index) in selectarea.province&quot;</span><br><span class="line">            :label=&quot;item.name&quot;</span><br><span class="line">            :value=&quot;item.code&quot;</span><br><span class="line">            :key=&quot;index&quot;</span><br><span class="line">        &gt;&lt;/el-option&gt;</span><br><span class="line">    &lt;/el-select&gt;</span><br><span class="line">    &lt;el-select</span><br><span class="line">        v-model=&quot;ruleForm.codecity&quot;</span><br><span class="line">        @change=&quot;changearea(&apos;city&apos;)&quot;</span><br><span class="line">        placeholder=&quot;请选择市&quot;</span><br><span class="line">        :disabled=&quot;disabledFlag&quot;</span><br><span class="line">    &gt;</span><br><span class="line">        &lt;el-option</span><br><span class="line">            v-for=&quot;(item, index) in selectarea.city&quot;</span><br><span class="line">            :label=&quot;item.name&quot;</span><br><span class="line">            :value=&quot;item.code&quot;</span><br><span class="line">            :key=&quot;index&quot;</span><br><span class="line">        &gt;&lt;/el-option&gt;</span><br><span class="line">    &lt;/el-select&gt;</span><br><span class="line">    &lt;el-select</span><br><span class="line">        v-model=&quot;ruleForm.codetown&quot;</span><br><span class="line">        @change=&quot;changearea(&apos;town&apos;)&quot;</span><br><span class="line">        placeholder=&quot;请选择区/镇&quot;</span><br><span class="line">        :disabled=&quot;disabledFlag&quot;</span><br><span class="line">    &gt;</span><br><span class="line">        &lt;el-option</span><br><span class="line">            v-for=&quot;(item, index) in selectarea.town&quot;</span><br><span class="line">            :label=&quot;item.name&quot;</span><br><span class="line">            :value=&quot;item.code&quot;</span><br><span class="line">            :key=&quot;index&quot;</span><br><span class="line">        &gt;&lt;/el-option&gt;</span><br><span class="line">    &lt;/el-select&gt;</span><br><span class="line">    &lt;el-select</span><br><span class="line">        v-model=&quot;ruleForm.codestreet&quot;</span><br><span class="line">        @change=&quot;changearea(&apos;street&apos;)&quot;</span><br><span class="line">        placeholder=&quot;请选择街道&quot;</span><br><span class="line">        :disabled=&quot;disabledFlag&quot;</span><br><span class="line">    &gt;</span><br><span class="line">        &lt;el-option</span><br><span class="line">            v-for=&quot;(item, index) in selectarea.street&quot;</span><br><span class="line">            :label=&quot;item.name&quot;</span><br><span class="line">            :value=&quot;item.code&quot;</span><br><span class="line">            :key=&quot;index&quot;</span><br><span class="line">        &gt;&lt;/el-option&gt;</span><br><span class="line">    &lt;/el-select&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br><span class="line"></span><br><span class="line">selectarea: &#123;</span><br><span class="line">    province: [],</span><br><span class="line">    city: [],</span><br><span class="line">    town: [],</span><br><span class="line">    street: []</span><br><span class="line">&#125;,</span><br><span class="line">ruleForm: &#123;</span><br><span class="line">    codeprovince: &apos;&apos;,</span><br><span class="line">    codecity: &apos;&apos;,</span><br><span class="line">    codetown: &apos;&apos;,</span><br><span class="line">    codestreet: &apos;&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mounted() &#123;</span><br><span class="line">    // 省份列表</span><br><span class="line">    searchAreasInfo(&#123;</span><br><span class="line">        level: 1,</span><br><span class="line">    &#125;).then((res) =&gt; &#123;</span><br><span class="line">        if (res.data.code === 1000) &#123;</span><br><span class="line">            this.selectarea.province = res.data.data;</span><br><span class="line">            this.selectareaRegister.province = res.data.data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, (err) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">changearea(type) &#123;</span><br><span class="line">    let params = &#123;</span><br><span class="line">        level: &apos;&apos;,</span><br><span class="line">        parentCode: &apos;&apos;</span><br><span class="line">    &#125;;</span><br><span class="line">    switch (type) &#123;</span><br><span class="line">        case &apos;province&apos;:</span><br><span class="line">            params.level = 2;</span><br><span class="line">            params.parentCode = this.ruleForm.codeprovince;</span><br><span class="line">            this.ruleForm.codecity = &apos;&apos;;</span><br><span class="line">            this.ruleForm.codetown = &apos;&apos;;</span><br><span class="line">            this.ruleForm.codestreet = &apos;&apos;;</span><br><span class="line">            break;</span><br><span class="line">        case &apos;city&apos;:</span><br><span class="line">            params.level = 3;</span><br><span class="line">            params.parentCode = this.ruleForm.codecity;</span><br><span class="line">            this.ruleForm.codetown = &apos;&apos;;</span><br><span class="line">            this.ruleForm.codestreet = &apos;&apos;;</span><br><span class="line">            break;</span><br><span class="line">        case &apos;town&apos;:</span><br><span class="line">            params.level = 4;</span><br><span class="line">            params.parentCode = this.ruleForm.codetown;</span><br><span class="line">            this.ruleForm.codestreet = &apos;&apos;;</span><br><span class="line">            break;</span><br><span class="line">        case &apos;street&apos;:</span><br><span class="line">            params.level = 5;</span><br><span class="line">            params.parentCode = this.ruleForm.codestreet;</span><br><span class="line">            break;</span><br><span class="line">            default: ;</span><br><span class="line">        &#125;</span><br><span class="line">        searchAreasInfo(params).then((res) =&gt; &#123;</span><br><span class="line">            if (res.data.code === 1000) &#123;</span><br><span class="line">                switch (type) &#123;</span><br><span class="line">                    case &apos;province&apos;:</span><br><span class="line">                        this.selectarea.city = res.data.data;</span><br><span class="line">                        this.selectarea.town = [];</span><br><span class="line">                        this.selectarea.street = [];</span><br><span class="line">                        break;</span><br><span class="line">                    case &apos;city&apos;:</span><br><span class="line">                        this.selectarea.town = res.data.data;</span><br><span class="line">                        this.selectarea.street = [];</span><br><span class="line">                        break;</span><br><span class="line">                    case &apos;town&apos;:</span><br><span class="line">                        this.selectarea.street = res.data.data;</span><br><span class="line">                        break;</span><br><span class="line">                    default: ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, (err) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>// 获取对应参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const provDate = this.selectarea.province.filter(item =&gt; item.code === this.ruleForm.codeprovince)</span><br><span class="line">const cityDate = this.selectarea.city.filter(item =&gt; item.code === this.ruleForm.codecity)</span><br><span class="line">const areaDate = this.selectarea.town.filter(item =&gt; item.code === this.ruleForm.codetown)</span><br><span class="line">const streetDate = this.selectarea.street.filter(item =&gt; item.code === this.ruleForm.codestreet)</span><br><span class="line">const params = &#123;</span><br><span class="line">    provinceCode: this.ruleForm.codeprovince,</span><br><span class="line">    provinceName: provDate[0] ? provDate[0].name : &apos;&apos;,</span><br><span class="line">    cityCode: this.ruleForm.codecity,</span><br><span class="line">    cityName: cityDate[0] ? cityDate[0].name : &apos;&apos;,</span><br><span class="line">    areaCode: this.ruleForm.codetown,</span><br><span class="line">    areaName: areaDate[0] ? areaDate[0].name : &apos;&apos;,</span><br><span class="line">    streetCode: this.ruleForm.codestreet,</span><br><span class="line">    streetName: streetDate[0] ? streetDate[0].name : &apos;&apos;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="弹框（输入框）式联动"><a href="#弹框（输入框）式联动" class="headerlink" title="弹框（输入框）式联动"></a>弹框（输入框）式联动</h3><p>areaSearch 组件在 SJSODR 河北ODR代码中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;area-search v-if=&quot;isReturnAdr&quot; :level=&quot;4&quot; :comtransmit=&quot;&#123;&apos;index&apos;: &apos;1&apos;,&apos;type&apos;:&apos;app&apos;&#125;&quot; :step1data=&quot;step3Adr&quot; @addressData=&quot;addressFn3&quot; v-model=&quot;permane3Adr&quot;&gt;&lt;/area-search&gt;  // :areaSearchDatas=&quot;saasconfig.areaSearchDatas&quot; 只展示对应省的</span><br><span class="line"></span><br><span class="line">import areaSearch from &apos;@/module/index/components/areaSearch&apos;</span><br><span class="line">import &#123;  searchCommonUser &#125; from &apos;@/publicResource/api/apiUser&apos;</span><br><span class="line"></span><br><span class="line">components: &#123;</span><br><span class="line">    areaSearch</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">isReturnAdr:false,</span><br><span class="line">permane3Adr: [],</span><br><span class="line">step3Adr:[],</span><br><span class="line">permane3Adr: &#123;</span><br><span class="line">    provCode: currentAddress.provinceCode,</span><br><span class="line">    cityCode: currentAddress.cityCode,</span><br><span class="line">    areaCode: currentAddress.areaCode,</span><br><span class="line">    streetCode: currentAddress.streetCode,</span><br><span class="line">    provName:currentAddress.provinceName,</span><br><span class="line">    cityName:currentAddress.cityName,</span><br><span class="line">    areaName:currentAddress.areaName,</span><br><span class="line">    streetName:currentAddress.streetName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mounted() &#123;</span><br><span class="line">    this.searchCommonUser() </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">searchCommonUser() &#123;</span><br><span class="line">    searchCommonUser().then((res)=&gt;&#123;</span><br><span class="line">        if(res.data.code === 1000) &#123;</span><br><span class="line">            let userDatas = res.data.data</span><br><span class="line">            let current = res.data.data.currentAddress</span><br><span class="line">            let permanent = res.data.data.permanentAddress</span><br><span class="line">            this.isReturnAdr=true</span><br><span class="line">            var applyUser3 = &#123;</span><br><span class="line">                provName: permanent.provinceName,</span><br><span class="line">                provCode: permanent.provinceCode,</span><br><span class="line">                cityName: permanent.cityName,</span><br><span class="line">                cityCode: permanent.cityCode,</span><br><span class="line">                areaName: permanent.areaName,</span><br><span class="line">                areaCode: permanent.areaCode,</span><br><span class="line">                streetCode: permanent.streetCode,</span><br><span class="line">                streetName: permanent.streetName,</span><br><span class="line">            &#125;</span><br><span class="line">            this.step3Adr.push(applyUser3)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,(error)=&gt;&#123;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addressFn3(val) &#123;</span><br><span class="line">    //获取省市区数据</span><br><span class="line">    this.permanentAddressS =  &#123;</span><br><span class="line">    addressType: &quot;PERMANENT_ADDRESS&quot;,</span><br><span class="line">    provinceCode: val.code[0],</span><br><span class="line">    provinceName: val.names[0],</span><br><span class="line">    cityCode: val.code[1],</span><br><span class="line">    cityName: val.names[1],</span><br><span class="line">    areaCode: val.code[2],</span><br><span class="line">    areaName: val.names[2],</span><br><span class="line">    streetCode: val.code[3],</span><br><span class="line">    streetName: val.names[3]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">// 获取选中的地区值</span><br><span class="line">this.permanentAddressS</span><br></pre></td></tr></table></figure>

<p>回填</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.isReturnAdr=true</span><br><span class="line">const permane3Adr = &#123;</span><br><span class="line">    provCode: currentAddress.provinceCode,</span><br><span class="line">    cityCode: currentAddress.cityCode,</span><br><span class="line">    areaCode: currentAddress.areaCode,</span><br><span class="line">    streetCode: currentAddress.streetCode,</span><br><span class="line">    provName:currentAddress.provinceName,</span><br><span class="line">    cityName:currentAddress.cityName,</span><br><span class="line">    areaName:currentAddress.areaName,</span><br><span class="line">    streetName:currentAddress.streetName,</span><br><span class="line">    communityCode:currentAddress.communityCode,</span><br><span class="line">    communityName:currentAddress.communityName,</span><br><span class="line">&#125;</span><br><span class="line">this.step3Adr.push(permane3Adr)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>学习笔记-数据处理</title>
    <url>/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h3 id="Object-keys-Object-values"><a href="#Object-keys-Object-values" class="headerlink" title="Object.keys || Object.values"></a>Object.keys || Object.values</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fileMap: &#123;</span><br><span class="line">    335: [</span><br><span class="line">        &#123;</span><br><span class="line">            fileId: &quot;=.jpeg&quot;</span><br><span class="line">            fileName: &quot;5.26-2.jpeg&quot;</span><br><span class="line">            previewUrl: &quot;.jpeg&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            fileId: &quot;=.jpeg&quot;</span><br><span class="line">            fileName: &quot;5.26-2.jpeg&quot;</span><br><span class="line">            previewUrl: &quot;.jpeg&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    337: [</span><br><span class="line">        &#123;</span><br><span class="line">            fileId: &quot;=.jpeg&quot;</span><br><span class="line">            fileName: &quot;5.26-2.jpeg&quot;</span><br><span class="line">            previewUrl: &quot;.jpeg&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Object.keys(fileMap)  // fileMap:[“335”,”337”]<br>Object.values(fileMap)  // fileMap:[{335的数据}],[{337的数据}]</p>
<h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><blockquote>
<p>[…new Set([2,”12”,2,12,1,2,1,6,12,13,6])]<br>//  [2, “12”, 12, 1, 6, 13]</p>
</blockquote>
<h3 id="数组对象平摊-多层数组平摊成一层"><a href="#数组对象平摊-多层数组平摊成一层" class="headerlink" title="数组对象平摊 / 多层数组平摊成一层"></a>数组对象平摊 / 多层数组平摊成一层</h3><p>var arr = [{name:’11’},[{name:’11’}]]<br>arr.flat(Infinity)</p>
<h3 id="数组对象过滤掉不符合条件的那个对象"><a href="#数组对象过滤掉不符合条件的那个对象" class="headerlink" title="数组对象过滤掉不符合条件的那个对象"></a>数组对象过滤掉不符合条件的那个对象</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.xxx = 对象数组.filter(item =&gt; &#123;</span><br><span class="line">    return item.name !== &apos;行政&apos;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="往数组中添加对象"><a href="#往数组中添加对象" class="headerlink" title="往数组中添加对象"></a>往数组中添加对象</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bad:</span><br><span class="line"></span><br><span class="line">const lzzhyArr = [];</span><br><span class="line">const lzzhyObj = &#123;&#125;;</span><br><span class="line">this.xxx.forEach(element =&gt; &#123;</span><br><span class="line">    lzzhyObj.name = element.name;</span><br><span class="line">    lzzhyObj.sex = element.sex;</span><br><span class="line">&#125;)</span><br><span class="line">lzzhyArr.push(lzzhyObj) // 不确定是不是放这</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">good:</span><br><span class="line"></span><br><span class="line">let lzzhyArr = [];</span><br><span class="line">this.xxx.forEach(element =&gt; &#123;</span><br><span class="line">    lzzhyArr.push(&#123;</span><br><span class="line">        fileName: element.name,</span><br><span class="line">        fileId: element.response.data.fileId</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="深拷贝数组-给数组对象新增一个对象"><a href="#深拷贝数组-给数组对象新增一个对象" class="headerlink" title="深拷贝数组(给数组对象新增一个对象)"></a>深拷贝数组(给数组对象新增一个对象)</h3><blockquote>
<p>法一：<br>var arr=[{a:1,b:2},{a:3,b:4}]<br>var newArr2=JSON.parse(JSON.stringify(arr));<br>console.log(arr[0]) // {a:1,b:2}<br>newArr2[3]={a:12,b:34}<br>console.log(arr[0]) // {a:1,b:2}<br>console.log(newArr2) //[{a:1,b:1},{a:3,b:4},{a:12,b:34}]<br>法二：<br>var arr1=[{a:1,b:2}],arr2=[{a:4,b:9}];<br>arr1.push.apply(arr1,arr2);<br>console.log(arr1) // [{a:1,b:2},{a:4,b:9}]   </p>
</blockquote>
<h3 id="数组对象中有多个字段-gt-但是只需要其中两个字段："><a href="#数组对象中有多个字段-gt-但是只需要其中两个字段：" class="headerlink" title="数组对象中有多个字段 =&gt; 但是只需要其中两个字段："></a>数组对象中有多个字段 =&gt; 但是只需要其中两个字段：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">返回的：</span><br><span class="line">typeDistributionInfo:[</span><br><span class="line">    &#123;</span><br><span class="line">        orgProportion: <span class="number">6</span>,   </span><br><span class="line">        mediatorProportion: <span class="number">6</span>,    </span><br><span class="line">        orgTypeCode: <span class="string">"orgTypeCode"</span>,    </span><br><span class="line">        orgTypeName: <span class="string">"人民调解机构"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        orgProportion: <span class="number">10</span>, </span><br><span class="line">        mediatorProportion: <span class="number">10</span>, </span><br><span class="line">        orgTypeCode: <span class="string">"orgTypeCode"</span>, </span><br><span class="line">        orgTypeName: <span class="string">"行政调解机构"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">需变成：</span><br><span class="line">typeDistributionInfo:[</span><br><span class="line">    &#123;</span><br><span class="line">        orgProportion: <span class="number">6</span>,   </span><br><span class="line">        mediatorProportion: <span class="number">6</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        orgProportion: <span class="number">10</span>, </span><br><span class="line">        mediatorProportion: <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法1：</span><br><span class="line">var newArray2 = [];</span><br><span class="line">for (var i = 0; i &lt; typeDistributionInfo.length; i++) &#123;</span><br><span class="line">    newObject.name = typeDistributionInfo[i].orgTypeName;</span><br><span class="line">    newObject.value = typeDistributionInfo[i].orgProportion;</span><br><span class="line">    newArray2.push(newObject);</span><br><span class="line">&#125;</span><br><span class="line">方法2：</span><br><span class="line">const newArray2 = []</span><br><span class="line">typeDistributionInfo.forEach(element =&gt; &#123;</span><br><span class="line">    const &#123; name, code &#125; = element;</span><br><span class="line">    newArray2.push(&#123; name, code &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="对象-gt-数组对象"><a href="#对象-gt-数组对象" class="headerlink" title="对象 =&gt; 数组对象"></a>对象 =&gt; 数组对象</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对象中有多个字段：</span><br><span class="line">sexAndAgeDistributionInfo:&#123;</span><br><span class="line">    ageLessForty: 100,</span><br><span class="line">    ageLessSixty: 100,</span><br><span class="line">    ageLessTwenty: 20,</span><br><span class="line">    ageMoreSixty: 20,</span><br><span class="line">    femaleNun: 200,</span><br><span class="line">    maleNun: 100,</span><br><span class="line">    unknownSexNun: 50</span><br><span class="line">&#125;</span><br><span class="line">需要：</span><br><span class="line">var medSexAndAgeDistributionInfo = [</span><br><span class="line">    &#123;</span><br><span class="line">        sex:&apos;女&apos;,</span><br><span class="line">        value: this.sexAndAgeDistributionInfo.femaleNun</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        sex:&apos;男&apos;,value: this.sexAndAgeDistributionInfo.maleNun</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法：</span><br><span class="line">var medSexAndAgeDistributionInfo = [</span><br><span class="line">    &#123;</span><br><span class="line">        sex:&apos;女&apos;,</span><br><span class="line">        value: this.sexAndAgeDistributionInfo.femaleNun</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        sex:&apos;男&apos;,value: this.sexAndAgeDistributionInfo.maleNun</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="处理后端返回的字符串（获取h3中的内容）"><a href="#处理后端返回的字符串（获取h3中的内容）" class="headerlink" title="处理后端返回的字符串（获取h3中的内容）"></a>处理后端返回的字符串（获取h3中的内容）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">返回的字符串：</span><br><span class="line">&#123;</span><br><span class="line">    code:1,</span><br><span class="line">    data:&quot;&#123; &quot;codexType&quot;:&quot;法律&quot;,&quot;codexContent&quot;:&quot;嘿嘿&quot;,&quot;&lt;h3&gt;一只鸭子&lt;/h3&gt;&quot;,...&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">获取：</span><br><span class="line">getDetail(params).then((res) =&gt; &#123;</span><br><span class="line">    if(res.data.code === 1) &#123;</span><br><span class="line">        this.lowsDetails = JSON.parse(res.data.data)</span><br><span class="line">        // 获取返回的H3中的内容</span><br><span class="line">        var temp = document.createElement(&apos;div&apos;)</span><br><span class="line">        temp.innerHTML = res.data.data;</span><br><span class="line">        let arr = []</span><br><span class="line">        for(var i = 0; i&lt; temp.getElementsByTagName(&apos;h3&apos;).length; i++) &#123;</span><br><span class="line">            if(temp.getElementsByTagName(&apos;h3&apos;)[i] &amp;&amp;temp.getElementsByTagName(&apos;h3&apos;)[i].innerText) &#123;</span><br><span class="line">              temp.getElementsByTagName(&apos;h3&apos;)[i].innerText</span><br><span class="line">            &#125;</span><br><span class="line">            arr.push(temp.getElementsByTagName(&apos;h3&apos;)[i].innerText)</span><br><span class="line">        &#125;</span><br><span class="line">          this.arr =arr</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="数组对象中插入对象"><a href="#数组对象中插入对象" class="headerlink" title="数组对象中插入对象"></a>数组对象中插入对象</h3><p>原数据：</p>
<p>// menulist<br><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/WechatIMG9.png" alt="cmd-markdown-logo"></p>
<p>需要插入的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// dailyPermissionData</span><br><span class="line">[</span><br><span class="line">    &#123;name: &apos;lzzhy&apos;&#125;,</span><br><span class="line">    &#123;name: &apos;hzzly&apos;&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>需求： 将dailyPermissionData插入menulist[2].child末尾</p>
<p>实现方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(let i = 0; i &lt; menulist.length; i ++) &#123;</span><br><span class="line">    if(menulist[i].parent.menuName == &apos;实施日报&apos;) &#123;</span><br><span class="line">        menulist[i].child = [...menulist[i].child, ...this.dailyPermissionData]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Hexo-Github-Markdown搭建博客、装饰博客、踩过的坑.md</title>
    <url>/Hexo-Github-Markdown%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E3%80%81%E8%A3%85%E9%A5%B0%E5%8D%9A%E5%AE%A2%E3%80%81%E8%B8%A9%E8%BF%87%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<p>其实之前就想搞个博客来玩但一直没有去做，今天看到一个博客里面记录了平常工作生活的事迹，突然心血来潮也想试试。说干就干，搞起来。这篇文章是从搭建一个简单的博客到添加评论访问统计等功能、到如何可以在百度谷歌中也可以找到自己的博客…最后总结</p>
<h2 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h2><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>1.安装Node(用来生成静态页面)  </p>
<p>2.安装git(用来把本地的hexo提交到github上)   </p>
<blockquote>
<p><font face="微软雅黑" size="3" color="Green">首先检查是否安装了git和node.js，终端输入一下命令</font><br><code>node -v</code> #是否出现安装版本信息，出现说明已经安装了<br><code>git --version</code> #同上述情况<br><font face="微软雅黑" size="3" color="Green">如果没有安装，则进行安装,提供下载网址：</font><br>[git]: <a href="https://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">https://sourceforge.net/projects/git-osx-installer/</a><br>[node.js]: <a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p>
</blockquote>
<p>3.申请github账号(用来做博客的远程创库、域名、服务器之类的) </p>
<blockquote>
<p>在github注册一个账号并新建一个仓库(注意：创建仓库的名字必须为 username.github.io，我的用户名为lzzhy，因此我创建的仓库就是 lzzhy.github.io，这是很关键的一点，很重要。输入名字后直接点最下面的绿色按钮不用填其他的，新建仓库完成。)</p>
</blockquote>
<p>4.如果已经安装好了以上两个那么可以安装hexo了：</p>
<blockquote>
<p><code>npm install -g hexo-cli</code></p>
</blockquote>
<p>5.创建blog文件夹，并初始化建立博客框架：</p>
<blockquote>
<p>#在你的电脑上建立一个blog目录文件夹<br><code>mkdir blog</code><br>#进入目录<br><code>cd blog</code><br>#初始化目录<br><code>hexo init</code><br>#开启本地服务<br><code>hexo s</code></p>
</blockquote>
<p><font face="微软雅黑" size="3" color="#FF0000">好了，到了这在浏览器中输入生成的 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就可以看到很丑的博客首页了。。。</font></p>
<p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/img1.png" alt="cmd-markdown-logo"></p>
<h3 id="Github仓库与本地博客建立连接"><a href="#Github仓库与本地博客建立连接" class="headerlink" title="Github仓库与本地博客建立连接"></a>Github仓库与本地博客建立连接</h3><p>编辑<strong>根</strong>目录下的_config.yml文件，打开该文件在文件最后输入红色框中的内容，只需将自己的username替换就可以了其他无需更改。</p>
<p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/img2.jpg" alt="cmd-markdown-logo"></p>
<p>然后在目录中执行：</p>
<blockquote>
<p>#产生静态网页<br><code>hexo g</code><br>#部署到GitHub page上<br><code>hexo d</code></p>
</blockquote>
<p>？在这个过程中发现了一个<font face="微软雅黑" size="3" color="red">bug</font>：</p>
<blockquote>
<p>只能在本地运行看到博客首页，在github上只有代码可是不能找到博客主页：因为github的是jekyll,本地的是hexo，所以不能同步。解决：删掉github仓库，重新来一次并关联本地。。。。。。。。mmp,原来是一开始配置_config.yml的时候单词写错了（master少写了一个s），果然粗心</p>
</blockquote>
<h3 id="当然，我们还可以去装修一下我们的博客-hexo有很多配套主题-可自行百度并都有配置文档"><a href="#当然，我们还可以去装修一下我们的博客-hexo有很多配套主题-可自行百度并都有配置文档" class="headerlink" title="当然，我们还可以去装修一下我们的博客,hexo有很多配套主题,可自行百度并都有配置文档"></a>当然，我们还可以去装修一下我们的博客,hexo有很多配套主题,可自行百度并都有配置文档</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.主题安装：git clone https://github.com/theme-next/hexo-theme-next themes/next (以next主题为栗，改为其他主题则只需要将对应的next换掉)；</span><br><span class="line">2.在根目录下的_config.yml配置中修改对应的主题名称</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>头像图片、作者名字、网站描述等网站基本属性都在根目录的_config.yml文件里配置  </li>
<li>评论、搜索、统计、等功能配置都在主题文件的_config.yml文件里配置 </li>
</ul>
</blockquote>
<h3 id="博客基本使用"><a href="#博客基本使用" class="headerlink" title="博客基本使用"></a>博客基本使用</h3><p>1.那肯定是写文章了：hexo new “文章名”， 在source/_posts会生成后缀名为.md的文件，支持markdown语法，里面可以设置标签名、分类名、是否开启评论功能等（markdown语法冒号后加空格）</p>
<blockquote>
<p>在.md文件中第二个—-下输入要写的文章，参考使用<a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">markdown</a>语法</p>
</blockquote>
<p>文章写好后可以通过：<code>hexo g,hexo d</code>,在直接通过github链接访问：如<a href="https://lzzhy.github.io/">lzzhy.github.io</a></p>
<p><font face="微软雅黑" size="3" color="#FF0000">这样，一个完整的搭建博客的过程就已经完成了</font></p>
<p>(不蒜子统计只会统计相应页面的数据，在首页中并不会统计。若是需要在首页中展示则需要通过三方leanCloud)。</p>
<h2 id="hexo-给博客添加不蒜子统计访问量，评论功能"><a href="#hexo-给博客添加不蒜子统计访问量，评论功能" class="headerlink" title="hexo 给博客添加不蒜子统计访问量，评论功能"></a>hexo 给博客添加不蒜子统计访问量，评论功能</h2><h3 id="添加统计字数："><a href="#添加统计字数：" class="headerlink" title="添加统计字数："></a>添加统计字数：</h3><p>1.安装 hexo-wordcount：</p>
<blockquote>
<p>npm i –save hexo-wordcount</p>
</blockquote>
<p>2.文件配置   </p>
<blockquote>
<p>将自己所用主题中的 _config.yml 文件中的 wordcount 设置为true wordcount: true</p>
</blockquote>
<p>3.重启服务就可以看到了</p>
<h3 id="添加统计访问量："><a href="#添加统计访问量：" class="headerlink" title="添加统计访问量："></a>添加统计访问量：</h3><p>1.配置<br><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/bokezhuang-02.png" alt="cmd-markdown-logo">   </p>
<p>2.问题：   </p>
<blockquote>
<p>通过利用不蒜子统计，发现统计数量并不能展现。   </p>
</blockquote>
<p>3.原因：<br><a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计官网</a>   Soga!原来就是因为不蒜子统计的域名过期了</p>
<p>4.解决方法：<br>首先需要先找到主题MaterialFlow下引用不蒜子统计的方法。文件路径为/themes/MaterialFlow/layout/_third-party/analytics/busuanzi-counter.swig文件。修改为如下图红框部分就OK了！<br><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/bokezhuang-01.png" alt="cmd-markdown-logo"></p>
<hr>
<p>接着。。。。。。</p>
<p>在昨天把访问量设置好后今天惊奇的发现居然有8个访问量了，开森。（不是刷的哦）！所以又想把评论和点赞功能设置一下，嘿嘿。。</p>
<h3 id="评论："><a href="#评论：" class="headerlink" title="评论："></a>评论：</h3><p>1.注册<a href="https://leancloud.cn/" target="_blank" rel="noopener">Leancloud</a></p>
<blockquote>
<p>注册完之后需创建一个应用，可叫blog：然后 <strong>进入应用-&gt;设置-&gt;应用key</strong>获取你的appid 和 appkey 如图所示：</p>
</blockquote>
<p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/busuanzi01.png" alt="cmd-markdown-logo"></p>
<p>2.博客主题文件找到配置文件 <strong>_config.yml</strong>，找到valine并输入appid 和 appkey：</p>
<p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/busuanzi02.png" alt="cmd-markdown-logo"></p>
<p>3.配置域名：<br>记得在Leancloud -&gt; 设置 -&gt; 安全中心 -&gt; Web 安全域名 把你的<strong>线上域名</strong>加进去</p>
<p>🎉结束撒花～</p>
<p>写了个人博客后，就希望在百度搜索引擎中能找到自己的文章，那么就需要进行SEO的优化了。这里主要对google和baidu爬虫的优化。</p>
<h2 id="如何在百度和谷歌中搜索就能找到你的博客-HEXO-SEO优化"><a href="#如何在百度和谷歌中搜索就能找到你的博客-HEXO-SEO优化" class="headerlink" title="如何在百度和谷歌中搜索就能找到你的博客- HEXO SEO优化"></a>如何在百度和谷歌中搜索就能找到你的博客- HEXO SEO优化</h2><h3 id="什么是SEO"><a href="#什么是SEO" class="headerlink" title="什么是SEO"></a>什么是SEO</h3><p>搜索引擎优化，又称为SEO(Search Engine Optimization)，它是一种通过分析搜索引擎的排名规律，了解各种搜索引擎怎样进行搜索、怎样抓取互联网页面、怎样确定特定关键词的搜索结果排名的技术。<br>搜索引擎采用易于被搜索引用的手段，对网站进行有针对性的优化，提高网站在搜索引擎中的自然排名，吸引更多的用户访问网站，提高网站的访问量，提高网站的销售能力和宣传能力，从而提升网站的品牌效应。<br><a href="https://baike.baidu.com/item/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96/3132?fromtitle=seo&fromid=102990&fr=aladdin" target="_blank" rel="noopener">百度百科</a></p>
<h3 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h3><h4 id="给本地文章生成sitemap文件"><a href="#给本地文章生成sitemap文件" class="headerlink" title="给本地文章生成sitemap文件"></a>给本地文章生成sitemap文件</h4><p> npm install hexo-generator-sitemap –save #sitemap.xml适合提交给谷歌搜素引擎<br> npm install hexo-generator-baidu-sitemap –save #baidusitemap.xml适合提交百度搜索引擎</p>
<h4 id="在根目录-config-yml中修改如下配置："><a href="#在根目录-config-yml中修改如下配置：" class="headerlink" title="在根目录_config.yml中修改如下配置："></a>在根目录_config.yml中修改如下配置：</h4><p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/HEXO%20SEO%E4%BC%98%E5%8C%96/WechatIMG7.png" alt="cmd-markdown-logo"></p>
<p>注意格式的缩进，之前试了很多次都报错，才发现是格式的问题。</p>
<h4 id="在根目录-config-yml中修改如下配置：-1"><a href="#在根目录-config-yml中修改如下配置：-1" class="headerlink" title="在根目录_config.yml中修改如下配置："></a>在根目录_config.yml中修改如下配置：</h4><p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/HEXO%20SEO%E4%BC%98%E5%8C%96/WechatIMG61.png" alt="cmd-markdown-logo"> </p>
<p>配置好后，hexo g 就能在 根目录\public 中生成sitemap.xml 和 baidusitemap.xml了;其中第一个是一会要提交给google的，后面那个看名字当然就是提交给Baidu的了;</p>
<h4 id="添加-roborts-txt文件"><a href="#添加-roborts-txt文件" class="headerlink" title="添加 roborts.txt文件"></a>添加 roborts.txt文件</h4><p>在根目录source下添加roborts.txt文件</p>
<p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/HEXO%20SEO%E4%BC%98%E5%8C%96/WechatIMG8.png" alt="cmd-markdown-logo"></p>
<p>然后hexo d -g提交一下</p>
<h3 id="百度收录站点"><a href="#百度收录站点" class="headerlink" title="百度收录站点"></a>百度收录站点</h3><p>在<a href="https://ziyuan.baidu.com/" target="_blank" rel="noopener">百度站长平台</a>中的用户中心 =&gt; 站点管理添加你的站点网址：</p>
<p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/HEXO%20SEO%E4%BC%98%E5%8C%96/WechatIMG4.png" alt="cmd-markdown-logo"></p>
<p>在最后一步验证网站中有三种方式，我选的是<em>文件验证</em>   </p>
<p>1.HTML标签验证（其中：content注意要换成自己的。）</p>
<ul>
<li>在主题的_config.yml文件中设置：baidu_site_verification: true，如果没有该字段就手动添加。</li>
<li>在themes/MaterialFlow/layout/_partials/head.swig文件中添加下列代码<br><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/HEXO%20SEO%E4%BC%98%E5%8C%96/WechatIMG5.png" alt="cmd-markdown-logo"></li>
</ul>
<p>2.文件验证，按照百度站长的步骤就好了。（hexo根目录在项目目录resource文件夹下）<br><font face="微软雅黑" size="3" color="red">注意：可能会报如下错误</font> </p>
<p>baidu_verify_V5nnDAPNHd.html是站点下载的文件</p>
<p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/HEXO%20SEO%E4%BC%98%E5%8C%96/WechatIMG9.png" alt="cmd-markdown-logo"></p>
<p>这是因为hexo编译文件时，会给下载的HTML文件中添加其他的内容，导致验证失败。比如下载原文件内容是<br><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/HEXO%20SEO%E4%BC%98%E5%8C%96/WechatIMG10.png" alt="cmd-markdown-logo"></p>
<p>但github中baidu_verify_V5nnDAPNHd.html的文件内容却是这样的……一大堆</p>
<p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/HEXO%20SEO%E4%BC%98%E5%8C%96/WechatIMG11.png" alt="cmd-markdown-logo"></p>
<p>因此，需要在Github里手动修改验证HTML文件，将github上的HTML文件中的内容改为站长给的文件内容。</p>
<h4 id="sitemap提交百度站长"><a href="#sitemap提交百度站长" class="headerlink" title="sitemap提交百度站长"></a>sitemap提交百度站长</h4><blockquote>
<p>链接提交工具是网站主动向百度搜索推送数据的工具，本工具可缩短爬虫发现网站链接时间，网站时效性内容建议使用链接提交工具，实时向搜索推送数据。是轻量级链接提交组件，将自动推送的JS代码放置在站点每一个页面源代码中，当页面被访问时，页面链接会自动推送给百度，有利于新页面更快被百度发现。。    </p>
</blockquote>
<p>登录<a href="https://ziyuan.baidu.com/" target="_blank" rel="noopener">百度站长平台</a>，在左菜单栏<em>链接提交</em>中。也有三种方式提交方式，我使用的是sitemap验证</p>
<p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/HEXO%20SEO%E4%BC%98%E5%8C%96/WechatIMG12.png" alt="cmd-markdown-logo"></p>
<p>若是选择自动推送，则是以下配置：</p>
<ul>
<li>在主题配置文件将baidu_push设置为true</li>
<li>在路径themes =&gt; MaterialFlow =&gt; layout 下创建baidu_push.swig 文件，文件内容如下：</li>
</ul>
<p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/hexo%20%E5%8D%9A%E5%AE%A2%E8%B8%A9%E5%9D%91%E5%A4%A7%E5%90%88%E9%9B%86/WechatIMG5.png" alt="cmd-markdown-logo"></p>
<h3 id="谷歌收录站点"><a href="#谷歌收录站点" class="headerlink" title="谷歌收录站点"></a>谷歌收录站点</h3><p>由于没有翻墙软件就没有折腾了(<em>^▽^</em>)。。。</p>
<p><font face="微软雅黑" size="3" color="red">最后：当然是查看有没有被收录了：<br></font>    </p>
<p>方法：打开百度或谷歌搜索，在搜索框里输入：</p>
<blockquote>
<p>site:&lt;域名&gt;  如：site:lzzhy.github.io/</p>
</blockquote>
<p>如果提示说：很抱歉，没有找到与“site:<a href="https://maxwellyue.github.io”相关的网页。说明未被收录。" target="_blank" rel="noopener">https://maxwellyue.github.io”相关的网页。说明未被收录。</a></p>
<p>如果搜索结果中你第一眼就看到了你的博客站点，说明已被收录</p>
<p>？百度站点提交sitemap，升级https</p>
<p>遇到坑的时候都心情暴躁啊，血压升高。完全静不下心来解决问题。其实很多时候报错都会提示的，按照提示去解决就可以了</p>
<h2 id="hexo-博客踩坑大合集"><a href="#hexo-博客踩坑大合集" class="headerlink" title="hexo 博客踩坑大合集"></a>hexo 博客踩坑大合集</h2><h3 id="邮箱验证"><a href="#邮箱验证" class="headerlink" title="邮箱验证"></a>邮箱验证</h3><p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/hexo%20%E5%8D%9A%E5%AE%A2%E8%B8%A9%E5%9D%91%E5%A4%A7%E5%90%88%E9%9B%86/WechatIMG1.png" alt="cmd-markdown-logo"></p>
<p>解决：登录邮箱进行验证</p>
<h3 id="commit-报错"><a href="#commit-报错" class="headerlink" title="commit 报错"></a>commit 报错</h3><p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/hexo%20%E5%8D%9A%E5%AE%A2%E8%B8%A9%E5%9D%91%E5%A4%A7%E5%90%88%E9%9B%86/WechatIMG2%201.png" alt="cmd-markdown-logo"></p>
<p>解决：</p>
<p>hexo deploy –message “feat: 内容”</p>
<h3 id="去掉提交校验"><a href="#去掉提交校验" class="headerlink" title="去掉提交校验"></a>去掉提交校验</h3><p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/hexo%20%E5%8D%9A%E5%AE%A2%E8%B8%A9%E5%9D%91%E5%A4%A7%E5%90%88%E9%9B%86/WechatIMG1.png" alt="cmd-markdown-logo"></p>
<p>原因：由于之前加了全局commit校验，因此自动将这个校验添加到了博客中。因此，删除这个配置即可：</p>
<ul>
<li>Command + Shift + .    //来快速（在 Finder 中）显示 和 隐藏 隐藏文件</li>
<li>在 blog 项目目录下找到 .deploy_git =&gt; .git =&gt; hooks, 删除 hooks 里面的commit-msg文件</li>
</ul>
<h2 id="github-上的博客仓库不小心被删"><a href="#github-上的博客仓库不小心被删" class="headerlink" title="github 上的博客仓库不小心被删"></a>github 上的博客仓库不小心被删</h2><h3 id="先还原github上的仓库"><a href="#先还原github上的仓库" class="headerlink" title="先还原github上的仓库"></a>先还原github上的仓库</h3><p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/hexo%20%E5%8D%9A%E5%AE%A2%E8%B8%A9%E5%9D%91%E5%A4%A7%E5%90%88%E9%9B%86/WechatIMG2.png" alt="cmd-markdown-logo"></p>
<p><img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/hexo%20%E5%8D%9A%E5%AE%A2%E8%B8%A9%E5%9D%91%E5%A4%A7%E5%90%88%E9%9B%86/WechatIMG3.png" alt="cmd-markdown-logo"></p>
<p>再去自己仓库确认下是否已找回</p>
<h3 id="github上的仓库已被还原，可是访问博客地址还是404"><a href="#github上的仓库已被还原，可是访问博客地址还是404" class="headerlink" title="github上的仓库已被还原，可是访问博客地址还是404"></a>github上的仓库已被还原，可是访问博客地址还是404</h3><p>进入 github 上的博客仓库，在 setting =&gt; github pages =&gt; choose themes(类似这种点进去) =&gt; 选择一个主题 就好了</p>
<p>现在在访问博客地址就可以了</p>
<h2 id="更换域名"><a href="#更换域名" class="headerlink" title="更换域名"></a>更换域名</h2><p>原本博客是在 github 上搭建的，但由于 gitpage 总是有问题导致我的博客访问不了。因此决定更换域名！更换域名的步骤有以下这几个：</p>
<ul>
<li><p>购买域名（我买的是<a href="https://wanwang.aliyun.com/domain/searchresult/?keyword=lzzhy&suffix=.com#/?keyword=lzzhy&suffix=com" target="_blank" rel="noopener">阿里云</a>的），并进行实名认证，备案等…</p>
</li>
<li><p>在博客source目录下新增 CNAME 文件，并写入自己已经购买好的域名（我的是 lzzhy.cn），并提交代码</p>
</li>
<li><p>找到github上自己博客的仓库 =&gt; settings =&gt; 找到如下图的位置，并加上 lzzhy.cn</p>
<p>  <img src="https://lzzhy.oss-cn-beijing.aliyuncs.com/blog/hexo%20%E5%8D%9A%E5%AE%A2%E8%B8%A9%E5%9D%91%E5%A4%A7%E5%90%88%E9%9B%86/WechatIMG13.png" alt="cmd-markdown-logo"></p>
</li>
</ul>
<p>好了，现在就可以去访问新域名啦啦啦！！！（不过使用新域名之后访客记录就清零咯）</p>
]]></content>
  </entry>
</search>
